{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"http-request-codegen generates HTTP request code snippets for different implementations. It's perfect if you want to include examples documenting APIs. Supports the following features: Request parameters values randomization using multiples strategies: Random values from iterables and callables. Random values from data types. Random values from Faker providers . Randomization using seeds and localization. Request headers customization. Request optional arguments by implementation. Custom line wrapping. Custom indentation. Custom quotation characters. Rendering in one line. Remember This is not a greater level API across multiple HTTP request libraries, but it is written so that you can generate the most common types of HTTP requests regardless of the implementation. Installation \u00b6 pip pip install http-request-codegen pipenv pipenv install http-request-codegen source git clone https://github.com/mondeja/http-request-codegen.git --depth = 1 cd http-request-codegen python setup.py install development git clone https://github.com/mondeja/http-request-codegen.git cd http-request-codegen pip install -e . [ dev ] Demo \u00b6 Javascript fetch GET Input import fake_module from http_request_codegen import generate_http_request_code generate_http_request_code ( language = 'javascript' , impl = 'fetch' , method = 'GET' , url = 'https://github.com/mondeja/http-request-codegen' , headers = { 'Content-Type' : 'application/json' , 'Accept-Language' : '*' }, seed = 4762 , parameters = [ { 'name' : 'fixed-value' , 'value' : 3 }, { 'name' : 'dinamic-value-by-iterable' , 'value' : [ 1 , 2 , 3 ] # same as 'values': [1, 2, 3] }, { 'name' : 'dinamic-value-by-function' , 'value' : fake_module . integers_from_1_to_10 }, # Parameter value randomization { 'name' : 'random-values-by-iterable' , 'values' : [ 'foo' , 'bar' , 'baz' ] }, { 'name' : 'random-values-by-function' , 'values' : fake_module . integers_from_1_to_10 }, { 'name' : 'random-values-by-function-path' , 'values' : 'fake_module::integers_from_1_to_10' }, { 'name' : 'random-value-by-faker-provider-function-path' , 'faker' : 'faker.providers.job::job' }, { 'name' : 'random-string' , # by default: random word 'type' : 'str' }, { 'name' : 'random-integer' , 'type' : 'int' , }, { 'name' : 'random-integer-in-range' , 'type' : int , # You can use Python types also 'min' : 2 , 'max' : 5 , }, { 'name' : 'random-float' , 'type' : 'number' , # You can use some type aliases also }, { 'name' : 'random-rounded-float-in-range' , 'type' : float , 'min' : 1.555 , 'max' : 2.555 , 'round' : 3 }, { 'name' : 'random-boolean' , 'type' : bool }, { 'name' : 'random-boolean-nullable' , 'type' : 'boolean' , 'null' : True }, { 'name' : 'random-type' , 'type' : 'random' # random type from availables }, { 'name' : 'random-unique-identifier' , 'type' : 'uuid' }, { 'name' : 'random-id' , # positive integer 'type' : 'id' }, # Parameter name randomization { 'name' : [ 'random-name-from-iterable' , 'random-name-by-iterable' ], 'type' : 'str' , }, { 'name' : fake_module . random_name_by_function , 'type' : 'random' , }, ] ) This implementation will emulate browsers' fetch API by default. using Promises-like response processing. If you want to simulate a NodeJS environment, pass the parameter setup as True and the next initialization snippet will be prepended to the generated code: const fetch = require ( 'node-fetch' ); For ESM imports emulation, use setup='import fetch from \\'node-fetch\\';\\n\\n' , thus the initialization snippet will be: import fetch from 'node-fetch' ; Of course, you can customize this initialization for other environments. For example, polyfill the API using whatwg as ESM module with setup='import \\'whatwg-fetch\\';\\n\\n' : import 'whatwg-fetch' ; Output fetch ( 'https://github.com/mondeja/http-request-codegen?fixed-value=3&dinamic-value' + '-by-iterable=2&dinamic-value-by-function=7&random-values-by-iterable=bar&' + 'random-values-by-function=7&random-values-by-function-path=7&random-value' + '-by-faker-provider-function-path=Radiation+protection+practitioner&random' + '-string=program&random-integer=61115&random-integer-in-range=5&random-flo' + 'at=-2210.249383058661&random-rounded-float-in-range=2.038&random-boolean=' + 'false&random-boolean-nullable=false&random-type=give&random-unique-identi' + 'fier=f9f75dd406bf477abb6362dbc41aceeb&random-id=63326&random-name-by-iter' + 'able=eat&random-name-by-function=claim' , { headers : { 'Content-Type' : 'application/json' , 'Accept-Language' : '*' } } ). then ( function ( response ) { console . log ( response ); }). catch ( function ( err ) { console . error ( 'Error:' , err ); }); POST application/x-www-form-urlencoded Input import fake_module from http_request_codegen import generate_http_request_code generate_http_request_code ( language = 'javascript' , impl = 'fetch' , method = 'POST' , url = 'https://github.com/mondeja/http-request-codegen' , headers = { 'Accept-Language' : '*' , 'Accept-Charset' : 'utf-8' }, seed = 4762 , parameters = [ { 'name' : 'fixed-value' , 'value' : 3 }, { 'name' : 'dinamic-value-by-iterable' , 'value' : [ 1 , 2 , 3 ] # same as 'values': [1, 2, 3] }, { 'name' : 'dinamic-value-by-function' , 'value' : fake_module . integers_from_1_to_10 }, # Parameter value randomization { 'name' : 'random-values-by-iterable' , 'values' : [ 'foo' , 'bar' , 'baz' ] }, { 'name' : 'random-values-by-function' , 'values' : fake_module . integers_from_1_to_10 }, { 'name' : 'random-values-by-function-path' , 'values' : 'fake_module::integers_from_1_to_10' }, { 'name' : 'random-value-by-faker-provider-function-path' , 'faker' : 'faker.providers.job::job' }, { 'name' : 'random-string' , # by default: random word 'type' : 'str' }, { 'name' : 'random-integer' , 'type' : 'int' , }, { 'name' : 'random-integer-in-range' , 'type' : int , # You can use Python types also 'min' : 2 , 'max' : 5 , }, { 'name' : 'random-float' , 'type' : 'number' , # You can use some type aliases also }, { 'name' : 'random-rounded-float-in-range' , 'type' : float , 'min' : 1.555 , 'max' : 2.555 , 'round' : 3 }, { 'name' : 'random-boolean' , 'type' : bool }, { 'name' : 'random-boolean-nullable' , 'type' : 'boolean' , 'null' : True }, { 'name' : 'random-type' , 'type' : 'random' # random type from availables }, { 'name' : 'random-unique-identifier' , 'type' : 'uuid' }, { 'name' : 'random-id' , # positive integer 'type' : 'id' }, # Parameter name randomization { 'name' : [ 'random-name-from-iterable' , 'random-name-by-iterable' ], 'type' : 'str' , }, { 'name' : fake_module . random_name_by_function , 'type' : 'random' , }, ] ) Output const fetch = require ( 'node-fetch' ); fetch ( 'https://github.com/mondeja/http-request-codegen' , { method : 'POST' , body : new URLSearchParams ({ 'fixed-value' : '3' , 'dinamic-value-by-iterable' : '2' , 'dinamic-value-by-function' : '7' , 'random-values-by-iterable' : 'bar' , 'random-values-by-function' : '7' , 'random-values-by-function-path' : '7' , 'random-value-by-faker-provider-function-path' : 'Paramedic' , 'random-string' : 'police' , 'random-integer' : '61115' , 'random-integer-in-range' : '5' , 'random-float' : '-2210.249383058661' , 'random-rounded-float-in-range' : '2.038' , 'random-boolean' : 'false' , 'random-boolean-nullable' : 'false' , 'random-type' : 'house' , 'random-unique-identifier' : '3a1627210bc5440d8edb6c43fb27e40c' , 'random-id' : '63326' , 'random-name-by-iterable' : 'claim' , 'random-name-by-function' : 'fly' }), headers : { 'Accept-Language' : '*' , 'Accept-Charset' : 'utf-8' } } ). then ( function ( response ) { console . log ( response ); }). catch ( function ( err ) { console . error ( 'Error:' , err ); }); multipart/form-data Input from http_request_codegen import generate_http_request_code generate_http_request_code ( language = 'javascript' , impl = 'fetch' , method = 'POST' , url = 'https://github.com/mondeja/http-request-codegen' , headers = { 'Accept-Language' : '*' , 'Accept-Charset' : 'utf-8' }, seed = 4762 , files = { 'fixed-filepath' : '/tmp/foo.txt' , 'random-filepath' : None , 'fixed-filepath-content-type' : ( '/tmp/bar.csv' , 'text/csv' ), 'fixed-filepath-ct-header' : ( '/tmp/bar.json' , 'application/json' , { 'Accept-Charset' : 'utf-8' } ), 'random-filepath-content-type' : ( None , 'text/plain' ), 'random-filepath-ct-header' : ( None , 'text/csv' , { 'Accept-Charset' : 'utf-8' } ) } ) Output const fs = require ( 'fs' ); const fetch = require ( 'node-fetch' ); const FormData = require ( 'form-data' ); const formData = new FormData (); formData . append ( 'fixed-filepath' , fs . createReadStream ( '/tmp/foo.txt' ), { filename : 'foo.txt' } ); formData . append ( 'random-filepath' , fs . createReadStream ( '/someone/themselves.avi' ), { filename : 'themselves.avi' } ); formData . append ( 'fixed-filepath-content-type' , fs . createReadStream ( '/tmp/bar.csv' ), { filename : 'bar.csv' , contentType : 'text/csv' } ); formData . append ( 'fixed-filepath-ct-header' , fs . createReadStream ( '/tmp/bar.json' ), { filename : 'bar.json' , contentType : 'application/json' } ); formData . append ( 'random-filepath-content-type' , fs . createReadStream ( '/structure/story.tiff' ), { filename : 'story.tiff' , contentType : 'text/plain' } ); formData . append ( 'random-filepath-ct-header' , fs . createReadStream ( '/response/help.json' ), { filename : 'help.json' , contentType : 'text/csv' } ); fetch ( 'https://github.com/mondeja/http-request-codegen' , { method : 'POST' , body : formData , headers : { 'Accept-Language' : '*' , 'Accept-Charset' : 'utf-8' } } ). then ( function ( response ) { console . log ( response ); }). catch ( function ( err ) { console . error ( 'Error:' , err ); }); application/json Input import fake_module from http_request_codegen import generate_http_request_code generate_http_request_code ( language = 'javascript' , impl = 'fetch' , method = 'POST' , url = 'https://github.com/mondeja/http-request-codegen' , headers = { 'Content-Type' : 'application/json' }, seed = 4762 , parameters = [ { 'name' : 'fixed-value' , 'value' : 3 }, { 'name' : 'dinamic-value-by-iterable' , 'value' : [ 1 , 2 , 3 ] # same as 'values': [1, 2, 3] }, { 'name' : 'dinamic-value-by-function' , 'value' : fake_module . integers_from_1_to_10 }, # Parameter value randomization { 'name' : 'random-values-by-iterable' , 'values' : [ 'foo' , 'bar' , 'baz' ] }, { 'name' : 'random-values-by-function' , 'values' : fake_module . integers_from_1_to_10 }, { 'name' : 'random-values-by-function-path' , 'values' : 'fake_module::integers_from_1_to_10' }, { 'name' : 'random-value-by-faker-provider-function-path' , 'faker' : 'faker.providers.job::job' }, { 'name' : 'random-string' , # by default: random word 'type' : 'str' }, { 'name' : 'random-integer' , 'type' : 'int' , }, { 'name' : 'random-integer-in-range' , 'type' : int , # You can use Python types also 'min' : 2 , 'max' : 5 , }, { 'name' : 'random-float' , 'type' : 'number' , # You can use some type aliases also }, { 'name' : 'random-rounded-float-in-range' , 'type' : float , 'min' : 1.555 , 'max' : 2.555 , 'round' : 3 }, { 'name' : 'random-boolean' , 'type' : bool }, { 'name' : 'random-boolean-nullable' , 'type' : 'boolean' , 'null' : True }, { 'name' : 'random-type' , 'type' : 'random' # random type from availables }, { 'name' : 'random-unique-identifier' , 'type' : 'uuid' }, { 'name' : 'random-id' , # positive integer 'type' : 'id' }, # Parameter name randomization { 'name' : [ 'random-name-from-iterable' , 'random-name-by-iterable' ], 'type' : 'str' , }, { 'name' : fake_module . random_name_by_function , 'type' : 'random' , }, ] ) Output const fetch = require ( 'node-fetch' ); fetch ( 'https://github.com/mondeja/http-request-codegen' , { method : 'POST' , body : JSON . stringify ({ 'fixed-value' : '3' , 'dinamic-value-by-iterable' : '2' , 'dinamic-value-by-function' : '7' , 'random-values-by-iterable' : 'bar' , 'random-values-by-function' : '7' , 'random-values-by-function-path' : '7' , 'random-value-by-faker-provider-function-path' : 'Print production planne' + 'r' , 'random-string' : 'land' , 'random-integer' : '61115' , 'random-integer-in-range' : '5' , 'random-float' : '-2210.249383058661' , 'random-rounded-float-in-range' : '2.038' , 'random-boolean' : 'false' , 'random-boolean-nullable' : 'false' , 'random-type' : 'ago' , 'random-unique-identifier' : 'db962bff86af4f4b9ad499b8140e716b' , 'random-id' : '63326' , 'random-name-by-iterable' : 'hot' , 'random-name-by-function' : 'environmental' }), headers : { 'Content-Type' : 'application/json' } } ). then ( function ( response ) { console . log ( response ); }). catch ( function ( err ) { console . error ( 'Error:' , err ); }); text/plain Input from http_request_codegen import generate_http_request_code generate_http_request_code ( language = 'javascript' , impl = 'fetch' , method = 'POST' , url = 'https://github.com/mondeja/http-request-codegen' , headers = { 'Content-Type' : 'text/plain' }, seed = 4762 , parameters = [ { 'name' : 'random-values-by-iterable' , 'values' : [ 'foo' , 'bar' , 'baz' ] } ] ) Output const fetch = require ( 'node-fetch' ); fetch ( 'https://github.com/mondeja/http-request-codegen' , { method : 'POST' , body : 'bar' , headers : { 'Content-Type' : 'text/plain' } } ). then ( function ( response ) { console . log ( response ); }). catch ( function ( err ) { console . error ( 'Error:' , err ); }); Python requests GET Input import fake_module from http_request_codegen import generate_http_request_code generate_http_request_code ( language = 'python' , impl = 'requests' , method = 'GET' , url = 'https://github.com/mondeja/http-request-codegen' , headers = { 'Content-Type' : 'application/json' , 'Accept-Language' : '*' }, seed = 4762 , parameters = [ { 'name' : 'fixed-value' , 'value' : 3 }, { 'name' : 'dinamic-value-by-iterable' , 'value' : [ 1 , 2 , 3 ] # same as 'values': [1, 2, 3] }, { 'name' : 'dinamic-value-by-function' , 'value' : fake_module . integers_from_1_to_10 }, # Parameter value randomization { 'name' : 'random-values-by-iterable' , 'values' : [ 'foo' , 'bar' , 'baz' ] }, { 'name' : 'random-values-by-function' , 'values' : fake_module . integers_from_1_to_10 }, { 'name' : 'random-values-by-function-path' , 'values' : 'fake_module::integers_from_1_to_10' }, { 'name' : 'random-value-by-faker-provider-function-path' , 'faker' : 'faker.providers.job::job' }, { 'name' : 'random-string' , # by default: random word 'type' : 'str' }, { 'name' : 'random-integer' , 'type' : 'int' , }, { 'name' : 'random-integer-in-range' , 'type' : int , # You can use Python types also 'min' : 2 , 'max' : 5 , }, { 'name' : 'random-float' , 'type' : 'number' , # You can use some type aliases also }, { 'name' : 'random-rounded-float-in-range' , 'type' : float , 'min' : 1.555 , 'max' : 2.555 , 'round' : 3 }, { 'name' : 'random-boolean' , 'type' : bool }, { 'name' : 'random-boolean-nullable' , 'type' : 'boolean' , 'null' : True }, { 'name' : 'random-type' , 'type' : 'random' # random type from availables }, { 'name' : 'random-unique-identifier' , 'type' : 'uuid' }, { 'name' : 'random-id' , # positive integer 'type' : 'id' }, # Parameter name randomization { 'name' : [ 'random-name-from-iterable' , 'random-name-by-iterable' ], 'type' : 'str' , }, { 'name' : fake_module . random_name_by_function , 'type' : 'random' , }, ] ) Parameters are passed using requests.get function params parameter, not by appending ?foo=bar&... to the URL. If you want this behaviour, build the passed URL using lazy_name_by_parameter and lazy_value_by_parameter functions instead of use the parameters argument. If you want to import more modules in the initialization snippet, keep in mind that you must provide import requests line also in the setup argument. For example, setup='import requests\\nimport foo\\n\\n' will render as: import requests import foo requests . get ( '<url>' ... Output import requests req = requests . get ( 'https://github.com/mondeja/http-request-codegen' , params = { 'fixed-value' : '3' , 'dinamic-value-by-iterable' : '2' , 'dinamic-value-by-function' : '7' , 'random-values-by-iterable' : 'bar' , 'random-values-by-function' : '7' , 'random-values-by-function-path' : '7' , 'random-value-by-faker-provider-function-path' : 'Ergonomist' , 'random-string' : 'top' , 'random-integer' : '61115' , 'random-integer-in-range' : '5' , 'random-float' : '-2210.249383058661' , 'random-rounded-float-in-range' : '2.038' , 'random-boolean' : 'false' , 'random-boolean-nullable' : 'false' , 'random-type' : 'push' , 'random-unique-identifier' : '8632e25293a34491b216494b49d918d3' , 'random-id' : '63326' , 'random-name-by-iterable' : 'much' , 'random-name-by-function' : 'decision' }, headers = { 'Content-Type' : 'application/json' , 'Accept-Language' : '*' } ) POST application/x-www-form-urlencoded Input import fake_module from http_request_codegen import generate_http_request_code generate_http_request_code ( language = 'python' , impl = 'requests' , method = 'POST' , url = 'https://github.com/mondeja/http-request-codegen' , headers = { 'Accept-Language' : '*' , 'Accept-Charset' : 'utf-8' }, seed = 4762 , parameters = [ { 'name' : 'fixed-value' , 'value' : 3 }, { 'name' : 'dinamic-value-by-iterable' , 'value' : [ 1 , 2 , 3 ] # same as 'values': [1, 2, 3] }, { 'name' : 'dinamic-value-by-function' , 'value' : fake_module . integers_from_1_to_10 }, # Parameter value randomization { 'name' : 'random-values-by-iterable' , 'values' : [ 'foo' , 'bar' , 'baz' ] }, { 'name' : 'random-values-by-function' , 'values' : fake_module . integers_from_1_to_10 }, { 'name' : 'random-values-by-function-path' , 'values' : 'fake_module::integers_from_1_to_10' }, { 'name' : 'random-value-by-faker-provider-function-path' , 'faker' : 'faker.providers.job::job' }, { 'name' : 'random-string' , # by default: random word 'type' : 'str' }, { 'name' : 'random-integer' , 'type' : 'int' , }, { 'name' : 'random-integer-in-range' , 'type' : int , # You can use Python types also 'min' : 2 , 'max' : 5 , }, { 'name' : 'random-float' , 'type' : 'number' , # You can use some type aliases also }, { 'name' : 'random-rounded-float-in-range' , 'type' : float , 'min' : 1.555 , 'max' : 2.555 , 'round' : 3 }, { 'name' : 'random-boolean' , 'type' : bool }, { 'name' : 'random-boolean-nullable' , 'type' : 'boolean' , 'null' : True }, { 'name' : 'random-type' , 'type' : 'random' # random type from availables }, { 'name' : 'random-unique-identifier' , 'type' : 'uuid' }, { 'name' : 'random-id' , # positive integer 'type' : 'id' }, # Parameter name randomization { 'name' : [ 'random-name-from-iterable' , 'random-name-by-iterable' ], 'type' : 'str' , }, { 'name' : fake_module . random_name_by_function , 'type' : 'random' , }, ] ) Output import requests req = requests . post ( 'https://github.com/mondeja/http-request-codegen' , data = { 'fixed-value' : '3' , 'dinamic-value-by-iterable' : '2' , 'dinamic-value-by-function' : '7' , 'random-values-by-iterable' : 'bar' , 'random-values-by-function' : '7' , 'random-values-by-function-path' : '7' , 'random-value-by-faker-provider-function-path' : 'Fashion designer' , 'random-string' : 'as' , 'random-integer' : '61115' , 'random-integer-in-range' : '5' , 'random-float' : '-2210.249383058661' , 'random-rounded-float-in-range' : '2.038' , 'random-boolean' : 'false' , 'random-boolean-nullable' : 'false' , 'random-type' : 'machine' , 'random-unique-identifier' : 'b3fdec3a00294b77b7b3e9e45a296883' , 'random-id' : '63326' , 'random-name-by-iterable' : 'doctor' , 'random-name-by-function' : 'within' }, headers = { 'Accept-Language' : '*' , 'Accept-Charset' : 'utf-8' } ) multipart/form-data Input from http_request_codegen import generate_http_request_code generate_http_request_code ( language = 'python' , impl = 'requests' , method = 'POST' , url = 'https://github.com/mondeja/http-request-codegen' , headers = { 'Accept-Language' : '*' , 'Accept-Charset' : 'utf-8' }, seed = 4762 , files = { 'fixed-filepath' : '/tmp/foo.txt' , 'random-filepath' : None , 'fixed-filepath-content-type' : ( '/tmp/bar.csv' , 'text/csv' ), 'fixed-filepath-ct-header' : ( '/tmp/bar.json' , 'application/json' , { 'Accept-Charset' : 'utf-8' } ), 'random-filepath-content-type' : ( None , 'text/plain' ), 'random-filepath-ct-header' : ( None , 'text/csv' , { 'Accept-Charset' : 'utf-8' } ) } ) Output import requests req = requests . post ( 'https://github.com/mondeja/http-request-codegen' , files = { 'fixed-filepath' : ( '/tmp/foo.txt' , open ( '/tmp/foo.txt' , 'rb' ) ), 'random-filepath' : ( '/receive/city.numbers' , open ( '/receive/city.numbers' , 'rb' ) ), 'fixed-filepath-content-type' : ( '/tmp/bar.csv' , open ( '/tmp/bar.csv' , 'rb' ), 'text/csv' ), 'fixed-filepath-ct-header' : ( '/tmp/bar.json' , open ( '/tmp/bar.json' , 'rb' ), 'application/json' , { 'Accept-Charset' : 'utf-8' } ), 'random-filepath-content-type' : ( '/either/few.key' , open ( '/either/few.key' , 'rb' ), 'text/plain' ), 'random-filepath-ct-header' : ( '/increase/strategy.json' , open ( '/increase/strategy.json' , 'rb' ), 'text/csv' , { 'Accept-Charset' : 'utf-8' } ) }, headers = { 'Accept-Language' : '*' , 'Accept-Charset' : 'utf-8' } ) application/json Input import fake_module from http_request_codegen import generate_http_request_code generate_http_request_code ( language = 'python' , impl = 'requests' , method = 'POST' , url = 'https://github.com/mondeja/http-request-codegen' , headers = { 'Content-Type' : 'application/json' }, seed = 4762 , parameters = [ { 'name' : 'fixed-value' , 'value' : 3 }, { 'name' : 'dinamic-value-by-iterable' , 'value' : [ 1 , 2 , 3 ] # same as 'values': [1, 2, 3] }, { 'name' : 'dinamic-value-by-function' , 'value' : fake_module . integers_from_1_to_10 }, # Parameter value randomization { 'name' : 'random-values-by-iterable' , 'values' : [ 'foo' , 'bar' , 'baz' ] }, { 'name' : 'random-values-by-function' , 'values' : fake_module . integers_from_1_to_10 }, { 'name' : 'random-values-by-function-path' , 'values' : 'fake_module::integers_from_1_to_10' }, { 'name' : 'random-value-by-faker-provider-function-path' , 'faker' : 'faker.providers.job::job' }, { 'name' : 'random-string' , # by default: random word 'type' : 'str' }, { 'name' : 'random-integer' , 'type' : 'int' , }, { 'name' : 'random-integer-in-range' , 'type' : int , # You can use Python types also 'min' : 2 , 'max' : 5 , }, { 'name' : 'random-float' , 'type' : 'number' , # You can use some type aliases also }, { 'name' : 'random-rounded-float-in-range' , 'type' : float , 'min' : 1.555 , 'max' : 2.555 , 'round' : 3 }, { 'name' : 'random-boolean' , 'type' : bool }, { 'name' : 'random-boolean-nullable' , 'type' : 'boolean' , 'null' : True }, { 'name' : 'random-type' , 'type' : 'random' # random type from availables }, { 'name' : 'random-unique-identifier' , 'type' : 'uuid' }, { 'name' : 'random-id' , # positive integer 'type' : 'id' }, # Parameter name randomization { 'name' : [ 'random-name-from-iterable' , 'random-name-by-iterable' ], 'type' : 'str' , }, { 'name' : fake_module . random_name_by_function , 'type' : 'random' , }, ] ) Output import requests req = requests . post ( 'https://github.com/mondeja/http-request-codegen' , json = { 'fixed-value' : 3 , 'dinamic-value-by-iterable' : '2' , 'dinamic-value-by-function' : '7' , 'random-values-by-iterable' : 'bar' , 'random-values-by-function' : '7' , 'random-values-by-function-path' : '7' , 'random-value-by-faker-provider-function-path' : 'Statistician' , 'random-string' : 'buy' , 'random-integer' : '61115' , 'random-integer-in-range' : '5' , 'random-float' : '-2210.249383058661' , 'random-rounded-float-in-range' : '2.038' , 'random-boolean' : 'false' , 'random-boolean-nullable' : 'false' , 'random-type' : 'image' , 'random-unique-identifier' : 'ce9f472d5964448d98fcf7a3dd3a5d3c' , 'random-id' : '63326' , 'random-name-by-iterable' : 'give' , 'random-name-by-function' : 'health' }, headers = { 'Content-Type' : 'application/json' } ) text/plain Input from http_request_codegen import generate_http_request_code generate_http_request_code ( language = 'python' , impl = 'requests' , method = 'POST' , url = 'https://github.com/mondeja/http-request-codegen' , headers = { 'Content-Type' : 'text/plain' }, seed = 4762 , parameters = [ { 'name' : 'random-values-by-iterable' , 'values' : [ 'foo' , 'bar' , 'baz' ] } ] ) Output import requests req = requests . post ( 'https://github.com/mondeja/http-request-codegen' , data = 'bar' , headers = { 'Content-Type' : 'text/plain' } ) Bash curl GET Input import fake_module from http_request_codegen import generate_http_request_code generate_http_request_code ( language = 'bash' , impl = 'curl' , method = 'GET' , url = 'https://github.com/mondeja/http-request-codegen' , headers = { 'Content-Type' : 'application/json' , 'Accept-Language' : '*' }, seed = 4762 , parameters = [ { 'name' : 'fixed-value' , 'value' : 3 }, { 'name' : 'dinamic-value-by-iterable' , 'value' : [ 1 , 2 , 3 ] # same as 'values': [1, 2, 3] }, { 'name' : 'dinamic-value-by-function' , 'value' : fake_module . integers_from_1_to_10 }, # Parameter value randomization { 'name' : 'random-values-by-iterable' , 'values' : [ 'foo' , 'bar' , 'baz' ] }, { 'name' : 'random-values-by-function' , 'values' : fake_module . integers_from_1_to_10 }, { 'name' : 'random-values-by-function-path' , 'values' : 'fake_module::integers_from_1_to_10' }, { 'name' : 'random-value-by-faker-provider-function-path' , 'faker' : 'faker.providers.job::job' }, { 'name' : 'random-string' , # by default: random word 'type' : 'str' }, { 'name' : 'random-integer' , 'type' : 'int' , }, { 'name' : 'random-integer-in-range' , 'type' : int , # You can use Python types also 'min' : 2 , 'max' : 5 , }, { 'name' : 'random-float' , 'type' : 'number' , # You can use some type aliases also }, { 'name' : 'random-rounded-float-in-range' , 'type' : float , 'min' : 1.555 , 'max' : 2.555 , 'round' : 3 }, { 'name' : 'random-boolean' , 'type' : bool }, { 'name' : 'random-boolean-nullable' , 'type' : 'boolean' , 'null' : True }, { 'name' : 'random-type' , 'type' : 'random' # random type from availables }, { 'name' : 'random-unique-identifier' , 'type' : 'uuid' }, { 'name' : 'random-id' , # positive integer 'type' : 'id' }, # Parameter name randomization { 'name' : [ 'random-name-from-iterable' , 'random-name-by-iterable' ], 'type' : 'str' , }, { 'name' : fake_module . random_name_by_function , 'type' : 'random' , }, ] ) Pass extra options to 'curl' command in kwargs parameter. For example, to save the response in a file, pass kwargs={'-o': 'filename.ext'} : curl -o \"filename.ext\" Output curl \\ -d 'fixed-value=3&dinamic-value-by-iterable=2&dinamic-value-by-function=7&random-values-by-iterable=bar&random-values-by-function=7&random-values-by-function-path=7&random-value-by-faker-provider-function-path=Administrator%2C+charities%2Fvoluntary+organisations&random-string=surface&random-integer=61115&random-integer-in-range=5&random-float=-2210.249383058661&random-rounded-float-in-range=2.038&random-boolean=false&random-boolean-nullable=false&random-type=road&random-unique-identifier=31387ab05be14110acb56166691d1374&random-id=63326&random-name-by-iterable=usually&random-name-by-function=real' \\ -H 'Content-Type: application/json' \\ -H 'Accept-Language: *' \\ https://github.com/mondeja/http-request-codegen POST application/x-www-form-urlencoded Input import fake_module from http_request_codegen import generate_http_request_code generate_http_request_code ( language = 'bash' , impl = 'curl' , method = 'POST' , url = 'https://github.com/mondeja/http-request-codegen' , headers = { 'Accept-Language' : '*' , 'Accept-Charset' : 'utf-8' }, seed = 4762 , parameters = [ { 'name' : 'fixed-value' , 'value' : 3 }, { 'name' : 'dinamic-value-by-iterable' , 'value' : [ 1 , 2 , 3 ] # same as 'values': [1, 2, 3] }, { 'name' : 'dinamic-value-by-function' , 'value' : fake_module . integers_from_1_to_10 }, # Parameter value randomization { 'name' : 'random-values-by-iterable' , 'values' : [ 'foo' , 'bar' , 'baz' ] }, { 'name' : 'random-values-by-function' , 'values' : fake_module . integers_from_1_to_10 }, { 'name' : 'random-values-by-function-path' , 'values' : 'fake_module::integers_from_1_to_10' }, { 'name' : 'random-value-by-faker-provider-function-path' , 'faker' : 'faker.providers.job::job' }, { 'name' : 'random-string' , # by default: random word 'type' : 'str' }, { 'name' : 'random-integer' , 'type' : 'int' , }, { 'name' : 'random-integer-in-range' , 'type' : int , # You can use Python types also 'min' : 2 , 'max' : 5 , }, { 'name' : 'random-float' , 'type' : 'number' , # You can use some type aliases also }, { 'name' : 'random-rounded-float-in-range' , 'type' : float , 'min' : 1.555 , 'max' : 2.555 , 'round' : 3 }, { 'name' : 'random-boolean' , 'type' : bool }, { 'name' : 'random-boolean-nullable' , 'type' : 'boolean' , 'null' : True }, { 'name' : 'random-type' , 'type' : 'random' # random type from availables }, { 'name' : 'random-unique-identifier' , 'type' : 'uuid' }, { 'name' : 'random-id' , # positive integer 'type' : 'id' }, # Parameter name randomization { 'name' : [ 'random-name-from-iterable' , 'random-name-by-iterable' ], 'type' : 'str' , }, { 'name' : fake_module . random_name_by_function , 'type' : 'random' , }, ] ) Output curl \\ -X 'POST' \\ -d 'fixed-value=3&dinamic-value-by-iterable=2&dinamic-value-by-function=7&random-values-by-iterable=bar&random-values-by-function=7&random-values-by-function-path=7&random-value-by-faker-provider-function-path=Designer%2C+textile&random-string=culture&random-integer=61115&random-integer-in-range=5&random-float=-2210.249383058661&random-rounded-float-in-range=2.038&random-boolean=false&random-boolean-nullable=false&random-type=air&random-unique-identifier=522f08111809464b9d2038088d3ffdec&random-id=63326&random-name-by-iterable=though&random-name-by-function=idea' \\ -H 'Accept-Language: *' \\ -H 'Accept-Charset: utf-8' \\ https://github.com/mondeja/http-request-codegen multipart/form-data Input from http_request_codegen import generate_http_request_code generate_http_request_code ( language = 'bash' , impl = 'curl' , method = 'POST' , url = 'https://github.com/mondeja/http-request-codegen' , headers = { 'Accept-Language' : '*' , 'Accept-Charset' : 'utf-8' }, seed = 4762 , files = { 'fixed-filepath' : '/tmp/foo.txt' , 'random-filepath' : None , 'fixed-filepath-content-type' : ( '/tmp/bar.csv' , 'text/csv' ), 'fixed-filepath-ct-header' : ( '/tmp/bar.json' , 'application/json' , { 'Accept-Charset' : 'utf-8' } ), 'random-filepath-content-type' : ( None , 'text/plain' ), 'random-filepath-ct-header' : ( None , 'text/csv' , { 'Accept-Charset' : 'utf-8' } ) } ) Output curl \\ -X 'POST' \\ -F 'fixed-filepath=@/tmp/foo.txt' \\ -F 'random-filepath=@/through/across.txt' \\ -F 'fixed-filepath-content-type=@/tmp/bar.csv' \\ -F 'fixed-filepath-ct-header=@/tmp/bar.json' \\ -F 'random-filepath-content-type=@/south/goal.json' \\ -F 'random-filepath-ct-header=@/again/option.flac' \\ -H 'Accept-Language: *' \\ -H 'Accept-Charset: utf-8' \\ https://github.com/mondeja/http-request-codegen application/json Input import fake_module from http_request_codegen import generate_http_request_code generate_http_request_code ( language = 'bash' , impl = 'curl' , method = 'POST' , url = 'https://github.com/mondeja/http-request-codegen' , headers = { 'Content-Type' : 'application/json' }, seed = 4762 , parameters = [ { 'name' : 'fixed-value' , 'value' : 3 }, { 'name' : 'dinamic-value-by-iterable' , 'value' : [ 1 , 2 , 3 ] # same as 'values': [1, 2, 3] }, { 'name' : 'dinamic-value-by-function' , 'value' : fake_module . integers_from_1_to_10 }, # Parameter value randomization { 'name' : 'random-values-by-iterable' , 'values' : [ 'foo' , 'bar' , 'baz' ] }, { 'name' : 'random-values-by-function' , 'values' : fake_module . integers_from_1_to_10 }, { 'name' : 'random-values-by-function-path' , 'values' : 'fake_module::integers_from_1_to_10' }, { 'name' : 'random-value-by-faker-provider-function-path' , 'faker' : 'faker.providers.job::job' }, { 'name' : 'random-string' , # by default: random word 'type' : 'str' }, { 'name' : 'random-integer' , 'type' : 'int' , }, { 'name' : 'random-integer-in-range' , 'type' : int , # You can use Python types also 'min' : 2 , 'max' : 5 , }, { 'name' : 'random-float' , 'type' : 'number' , # You can use some type aliases also }, { 'name' : 'random-rounded-float-in-range' , 'type' : float , 'min' : 1.555 , 'max' : 2.555 , 'round' : 3 }, { 'name' : 'random-boolean' , 'type' : bool }, { 'name' : 'random-boolean-nullable' , 'type' : 'boolean' , 'null' : True }, { 'name' : 'random-type' , 'type' : 'random' # random type from availables }, { 'name' : 'random-unique-identifier' , 'type' : 'uuid' }, { 'name' : 'random-id' , # positive integer 'type' : 'id' }, # Parameter name randomization { 'name' : [ 'random-name-from-iterable' , 'random-name-by-iterable' ], 'type' : 'str' , }, { 'name' : fake_module . random_name_by_function , 'type' : 'random' , }, ] ) Output curl \\ -X 'POST' \\ -d 'fixed-value=3&dinamic-value-by-iterable=2&dinamic-value-by-function=7&random-values-by-iterable=bar&random-values-by-function=7&random-values-by-function-path=7&random-value-by-faker-provider-function-path=Exhibitions+officer%2C+museum%2Fgallery&random-string=church&random-integer=61115&random-integer-in-range=5&random-float=-2210.249383058661&random-rounded-float-in-range=2.038&random-boolean=false&random-boolean-nullable=false&random-type=against&random-unique-identifier=9e013269fc1b40fa944a2f1b48e49f31&random-id=63326&random-name-by-iterable=music&random-name-by-function=animal' \\ -H 'Content-Type: application/json' \\ https://github.com/mondeja/http-request-codegen text/plain Input from http_request_codegen import generate_http_request_code generate_http_request_code ( language = 'bash' , impl = 'curl' , method = 'POST' , url = 'https://github.com/mondeja/http-request-codegen' , headers = { 'Content-Type' : 'text/plain' }, seed = 4762 , parameters = [ { 'name' : 'random-values-by-iterable' , 'values' : [ 'foo' , 'bar' , 'baz' ] } ] ) Output curl \\ -X 'POST' \\ -d 'random-values-by-iterable=bar' \\ -H 'Content-Type: text/plain' \\ https://github.com/mondeja/http-request-codegen Support \u00b6 Javascript fetch GET POST Headers \u2705 \u2705 Parameters \u2705 \u2705 Parameters localization \u2705 \u2705 Parameters seed \u2705 \u2705 Custom indentation \u2705 \u2705 Quotation character \u2705 \u2705 One line rendering \u2705 \u2705 Custom initialization \u2705 \u2705 Custom teardown \u2705 \u2705 Line wrapping \u2705 \u2705 Python requests GET POST Headers \u2705 \u2705 Parameters \u2705 \u2705 Parameters localization \u2705 \u2705 Parameters seed \u2705 \u2705 Custom indentation \u2705 \u2705 Quotation character \u2705 \u2705 One line rendering \u2705 \u2705 Custom initialization \u2705 \u2705 Custom teardown \u2705 \u2705 Line wrapping \u2705 \u2705 Bash curl GET POST Headers \u2705 \u2705 Parameters \u2705 \u2705 Parameters localization \u2705 \u2705 Parameters seed \u2705 \u2705 Custom indentation \u2705 \u2705 Quotation character \u2705 \u2705 One line rendering \u2705 \u2705 Custom initialization \u2705 \u2705 Custom teardown \u2705 \u2705 Line wrapping \u2705 \u2705","title":"Introduction"},{"location":"#installation","text":"pip pip install http-request-codegen pipenv pipenv install http-request-codegen source git clone https://github.com/mondeja/http-request-codegen.git --depth = 1 cd http-request-codegen python setup.py install development git clone https://github.com/mondeja/http-request-codegen.git cd http-request-codegen pip install -e . [ dev ]","title":"Installation"},{"location":"#demo","text":"Javascript fetch GET Input import fake_module from http_request_codegen import generate_http_request_code generate_http_request_code ( language = 'javascript' , impl = 'fetch' , method = 'GET' , url = 'https://github.com/mondeja/http-request-codegen' , headers = { 'Content-Type' : 'application/json' , 'Accept-Language' : '*' }, seed = 4762 , parameters = [ { 'name' : 'fixed-value' , 'value' : 3 }, { 'name' : 'dinamic-value-by-iterable' , 'value' : [ 1 , 2 , 3 ] # same as 'values': [1, 2, 3] }, { 'name' : 'dinamic-value-by-function' , 'value' : fake_module . integers_from_1_to_10 }, # Parameter value randomization { 'name' : 'random-values-by-iterable' , 'values' : [ 'foo' , 'bar' , 'baz' ] }, { 'name' : 'random-values-by-function' , 'values' : fake_module . integers_from_1_to_10 }, { 'name' : 'random-values-by-function-path' , 'values' : 'fake_module::integers_from_1_to_10' }, { 'name' : 'random-value-by-faker-provider-function-path' , 'faker' : 'faker.providers.job::job' }, { 'name' : 'random-string' , # by default: random word 'type' : 'str' }, { 'name' : 'random-integer' , 'type' : 'int' , }, { 'name' : 'random-integer-in-range' , 'type' : int , # You can use Python types also 'min' : 2 , 'max' : 5 , }, { 'name' : 'random-float' , 'type' : 'number' , # You can use some type aliases also }, { 'name' : 'random-rounded-float-in-range' , 'type' : float , 'min' : 1.555 , 'max' : 2.555 , 'round' : 3 }, { 'name' : 'random-boolean' , 'type' : bool }, { 'name' : 'random-boolean-nullable' , 'type' : 'boolean' , 'null' : True }, { 'name' : 'random-type' , 'type' : 'random' # random type from availables }, { 'name' : 'random-unique-identifier' , 'type' : 'uuid' }, { 'name' : 'random-id' , # positive integer 'type' : 'id' }, # Parameter name randomization { 'name' : [ 'random-name-from-iterable' , 'random-name-by-iterable' ], 'type' : 'str' , }, { 'name' : fake_module . random_name_by_function , 'type' : 'random' , }, ] ) This implementation will emulate browsers' fetch API by default. using Promises-like response processing. If you want to simulate a NodeJS environment, pass the parameter setup as True and the next initialization snippet will be prepended to the generated code: const fetch = require ( 'node-fetch' ); For ESM imports emulation, use setup='import fetch from \\'node-fetch\\';\\n\\n' , thus the initialization snippet will be: import fetch from 'node-fetch' ; Of course, you can customize this initialization for other environments. For example, polyfill the API using whatwg as ESM module with setup='import \\'whatwg-fetch\\';\\n\\n' : import 'whatwg-fetch' ; Output fetch ( 'https://github.com/mondeja/http-request-codegen?fixed-value=3&dinamic-value' + '-by-iterable=2&dinamic-value-by-function=7&random-values-by-iterable=bar&' + 'random-values-by-function=7&random-values-by-function-path=7&random-value' + '-by-faker-provider-function-path=Radiation+protection+practitioner&random' + '-string=program&random-integer=61115&random-integer-in-range=5&random-flo' + 'at=-2210.249383058661&random-rounded-float-in-range=2.038&random-boolean=' + 'false&random-boolean-nullable=false&random-type=give&random-unique-identi' + 'fier=f9f75dd406bf477abb6362dbc41aceeb&random-id=63326&random-name-by-iter' + 'able=eat&random-name-by-function=claim' , { headers : { 'Content-Type' : 'application/json' , 'Accept-Language' : '*' } } ). then ( function ( response ) { console . log ( response ); }). catch ( function ( err ) { console . error ( 'Error:' , err ); }); POST application/x-www-form-urlencoded Input import fake_module from http_request_codegen import generate_http_request_code generate_http_request_code ( language = 'javascript' , impl = 'fetch' , method = 'POST' , url = 'https://github.com/mondeja/http-request-codegen' , headers = { 'Accept-Language' : '*' , 'Accept-Charset' : 'utf-8' }, seed = 4762 , parameters = [ { 'name' : 'fixed-value' , 'value' : 3 }, { 'name' : 'dinamic-value-by-iterable' , 'value' : [ 1 , 2 , 3 ] # same as 'values': [1, 2, 3] }, { 'name' : 'dinamic-value-by-function' , 'value' : fake_module . integers_from_1_to_10 }, # Parameter value randomization { 'name' : 'random-values-by-iterable' , 'values' : [ 'foo' , 'bar' , 'baz' ] }, { 'name' : 'random-values-by-function' , 'values' : fake_module . integers_from_1_to_10 }, { 'name' : 'random-values-by-function-path' , 'values' : 'fake_module::integers_from_1_to_10' }, { 'name' : 'random-value-by-faker-provider-function-path' , 'faker' : 'faker.providers.job::job' }, { 'name' : 'random-string' , # by default: random word 'type' : 'str' }, { 'name' : 'random-integer' , 'type' : 'int' , }, { 'name' : 'random-integer-in-range' , 'type' : int , # You can use Python types also 'min' : 2 , 'max' : 5 , }, { 'name' : 'random-float' , 'type' : 'number' , # You can use some type aliases also }, { 'name' : 'random-rounded-float-in-range' , 'type' : float , 'min' : 1.555 , 'max' : 2.555 , 'round' : 3 }, { 'name' : 'random-boolean' , 'type' : bool }, { 'name' : 'random-boolean-nullable' , 'type' : 'boolean' , 'null' : True }, { 'name' : 'random-type' , 'type' : 'random' # random type from availables }, { 'name' : 'random-unique-identifier' , 'type' : 'uuid' }, { 'name' : 'random-id' , # positive integer 'type' : 'id' }, # Parameter name randomization { 'name' : [ 'random-name-from-iterable' , 'random-name-by-iterable' ], 'type' : 'str' , }, { 'name' : fake_module . random_name_by_function , 'type' : 'random' , }, ] ) Output const fetch = require ( 'node-fetch' ); fetch ( 'https://github.com/mondeja/http-request-codegen' , { method : 'POST' , body : new URLSearchParams ({ 'fixed-value' : '3' , 'dinamic-value-by-iterable' : '2' , 'dinamic-value-by-function' : '7' , 'random-values-by-iterable' : 'bar' , 'random-values-by-function' : '7' , 'random-values-by-function-path' : '7' , 'random-value-by-faker-provider-function-path' : 'Paramedic' , 'random-string' : 'police' , 'random-integer' : '61115' , 'random-integer-in-range' : '5' , 'random-float' : '-2210.249383058661' , 'random-rounded-float-in-range' : '2.038' , 'random-boolean' : 'false' , 'random-boolean-nullable' : 'false' , 'random-type' : 'house' , 'random-unique-identifier' : '3a1627210bc5440d8edb6c43fb27e40c' , 'random-id' : '63326' , 'random-name-by-iterable' : 'claim' , 'random-name-by-function' : 'fly' }), headers : { 'Accept-Language' : '*' , 'Accept-Charset' : 'utf-8' } } ). then ( function ( response ) { console . log ( response ); }). catch ( function ( err ) { console . error ( 'Error:' , err ); }); multipart/form-data Input from http_request_codegen import generate_http_request_code generate_http_request_code ( language = 'javascript' , impl = 'fetch' , method = 'POST' , url = 'https://github.com/mondeja/http-request-codegen' , headers = { 'Accept-Language' : '*' , 'Accept-Charset' : 'utf-8' }, seed = 4762 , files = { 'fixed-filepath' : '/tmp/foo.txt' , 'random-filepath' : None , 'fixed-filepath-content-type' : ( '/tmp/bar.csv' , 'text/csv' ), 'fixed-filepath-ct-header' : ( '/tmp/bar.json' , 'application/json' , { 'Accept-Charset' : 'utf-8' } ), 'random-filepath-content-type' : ( None , 'text/plain' ), 'random-filepath-ct-header' : ( None , 'text/csv' , { 'Accept-Charset' : 'utf-8' } ) } ) Output const fs = require ( 'fs' ); const fetch = require ( 'node-fetch' ); const FormData = require ( 'form-data' ); const formData = new FormData (); formData . append ( 'fixed-filepath' , fs . createReadStream ( '/tmp/foo.txt' ), { filename : 'foo.txt' } ); formData . append ( 'random-filepath' , fs . createReadStream ( '/someone/themselves.avi' ), { filename : 'themselves.avi' } ); formData . append ( 'fixed-filepath-content-type' , fs . createReadStream ( '/tmp/bar.csv' ), { filename : 'bar.csv' , contentType : 'text/csv' } ); formData . append ( 'fixed-filepath-ct-header' , fs . createReadStream ( '/tmp/bar.json' ), { filename : 'bar.json' , contentType : 'application/json' } ); formData . append ( 'random-filepath-content-type' , fs . createReadStream ( '/structure/story.tiff' ), { filename : 'story.tiff' , contentType : 'text/plain' } ); formData . append ( 'random-filepath-ct-header' , fs . createReadStream ( '/response/help.json' ), { filename : 'help.json' , contentType : 'text/csv' } ); fetch ( 'https://github.com/mondeja/http-request-codegen' , { method : 'POST' , body : formData , headers : { 'Accept-Language' : '*' , 'Accept-Charset' : 'utf-8' } } ). then ( function ( response ) { console . log ( response ); }). catch ( function ( err ) { console . error ( 'Error:' , err ); }); application/json Input import fake_module from http_request_codegen import generate_http_request_code generate_http_request_code ( language = 'javascript' , impl = 'fetch' , method = 'POST' , url = 'https://github.com/mondeja/http-request-codegen' , headers = { 'Content-Type' : 'application/json' }, seed = 4762 , parameters = [ { 'name' : 'fixed-value' , 'value' : 3 }, { 'name' : 'dinamic-value-by-iterable' , 'value' : [ 1 , 2 , 3 ] # same as 'values': [1, 2, 3] }, { 'name' : 'dinamic-value-by-function' , 'value' : fake_module . integers_from_1_to_10 }, # Parameter value randomization { 'name' : 'random-values-by-iterable' , 'values' : [ 'foo' , 'bar' , 'baz' ] }, { 'name' : 'random-values-by-function' , 'values' : fake_module . integers_from_1_to_10 }, { 'name' : 'random-values-by-function-path' , 'values' : 'fake_module::integers_from_1_to_10' }, { 'name' : 'random-value-by-faker-provider-function-path' , 'faker' : 'faker.providers.job::job' }, { 'name' : 'random-string' , # by default: random word 'type' : 'str' }, { 'name' : 'random-integer' , 'type' : 'int' , }, { 'name' : 'random-integer-in-range' , 'type' : int , # You can use Python types also 'min' : 2 , 'max' : 5 , }, { 'name' : 'random-float' , 'type' : 'number' , # You can use some type aliases also }, { 'name' : 'random-rounded-float-in-range' , 'type' : float , 'min' : 1.555 , 'max' : 2.555 , 'round' : 3 }, { 'name' : 'random-boolean' , 'type' : bool }, { 'name' : 'random-boolean-nullable' , 'type' : 'boolean' , 'null' : True }, { 'name' : 'random-type' , 'type' : 'random' # random type from availables }, { 'name' : 'random-unique-identifier' , 'type' : 'uuid' }, { 'name' : 'random-id' , # positive integer 'type' : 'id' }, # Parameter name randomization { 'name' : [ 'random-name-from-iterable' , 'random-name-by-iterable' ], 'type' : 'str' , }, { 'name' : fake_module . random_name_by_function , 'type' : 'random' , }, ] ) Output const fetch = require ( 'node-fetch' ); fetch ( 'https://github.com/mondeja/http-request-codegen' , { method : 'POST' , body : JSON . stringify ({ 'fixed-value' : '3' , 'dinamic-value-by-iterable' : '2' , 'dinamic-value-by-function' : '7' , 'random-values-by-iterable' : 'bar' , 'random-values-by-function' : '7' , 'random-values-by-function-path' : '7' , 'random-value-by-faker-provider-function-path' : 'Print production planne' + 'r' , 'random-string' : 'land' , 'random-integer' : '61115' , 'random-integer-in-range' : '5' , 'random-float' : '-2210.249383058661' , 'random-rounded-float-in-range' : '2.038' , 'random-boolean' : 'false' , 'random-boolean-nullable' : 'false' , 'random-type' : 'ago' , 'random-unique-identifier' : 'db962bff86af4f4b9ad499b8140e716b' , 'random-id' : '63326' , 'random-name-by-iterable' : 'hot' , 'random-name-by-function' : 'environmental' }), headers : { 'Content-Type' : 'application/json' } } ). then ( function ( response ) { console . log ( response ); }). catch ( function ( err ) { console . error ( 'Error:' , err ); }); text/plain Input from http_request_codegen import generate_http_request_code generate_http_request_code ( language = 'javascript' , impl = 'fetch' , method = 'POST' , url = 'https://github.com/mondeja/http-request-codegen' , headers = { 'Content-Type' : 'text/plain' }, seed = 4762 , parameters = [ { 'name' : 'random-values-by-iterable' , 'values' : [ 'foo' , 'bar' , 'baz' ] } ] ) Output const fetch = require ( 'node-fetch' ); fetch ( 'https://github.com/mondeja/http-request-codegen' , { method : 'POST' , body : 'bar' , headers : { 'Content-Type' : 'text/plain' } } ). then ( function ( response ) { console . log ( response ); }). catch ( function ( err ) { console . error ( 'Error:' , err ); }); Python requests GET Input import fake_module from http_request_codegen import generate_http_request_code generate_http_request_code ( language = 'python' , impl = 'requests' , method = 'GET' , url = 'https://github.com/mondeja/http-request-codegen' , headers = { 'Content-Type' : 'application/json' , 'Accept-Language' : '*' }, seed = 4762 , parameters = [ { 'name' : 'fixed-value' , 'value' : 3 }, { 'name' : 'dinamic-value-by-iterable' , 'value' : [ 1 , 2 , 3 ] # same as 'values': [1, 2, 3] }, { 'name' : 'dinamic-value-by-function' , 'value' : fake_module . integers_from_1_to_10 }, # Parameter value randomization { 'name' : 'random-values-by-iterable' , 'values' : [ 'foo' , 'bar' , 'baz' ] }, { 'name' : 'random-values-by-function' , 'values' : fake_module . integers_from_1_to_10 }, { 'name' : 'random-values-by-function-path' , 'values' : 'fake_module::integers_from_1_to_10' }, { 'name' : 'random-value-by-faker-provider-function-path' , 'faker' : 'faker.providers.job::job' }, { 'name' : 'random-string' , # by default: random word 'type' : 'str' }, { 'name' : 'random-integer' , 'type' : 'int' , }, { 'name' : 'random-integer-in-range' , 'type' : int , # You can use Python types also 'min' : 2 , 'max' : 5 , }, { 'name' : 'random-float' , 'type' : 'number' , # You can use some type aliases also }, { 'name' : 'random-rounded-float-in-range' , 'type' : float , 'min' : 1.555 , 'max' : 2.555 , 'round' : 3 }, { 'name' : 'random-boolean' , 'type' : bool }, { 'name' : 'random-boolean-nullable' , 'type' : 'boolean' , 'null' : True }, { 'name' : 'random-type' , 'type' : 'random' # random type from availables }, { 'name' : 'random-unique-identifier' , 'type' : 'uuid' }, { 'name' : 'random-id' , # positive integer 'type' : 'id' }, # Parameter name randomization { 'name' : [ 'random-name-from-iterable' , 'random-name-by-iterable' ], 'type' : 'str' , }, { 'name' : fake_module . random_name_by_function , 'type' : 'random' , }, ] ) Parameters are passed using requests.get function params parameter, not by appending ?foo=bar&... to the URL. If you want this behaviour, build the passed URL using lazy_name_by_parameter and lazy_value_by_parameter functions instead of use the parameters argument. If you want to import more modules in the initialization snippet, keep in mind that you must provide import requests line also in the setup argument. For example, setup='import requests\\nimport foo\\n\\n' will render as: import requests import foo requests . get ( '<url>' ... Output import requests req = requests . get ( 'https://github.com/mondeja/http-request-codegen' , params = { 'fixed-value' : '3' , 'dinamic-value-by-iterable' : '2' , 'dinamic-value-by-function' : '7' , 'random-values-by-iterable' : 'bar' , 'random-values-by-function' : '7' , 'random-values-by-function-path' : '7' , 'random-value-by-faker-provider-function-path' : 'Ergonomist' , 'random-string' : 'top' , 'random-integer' : '61115' , 'random-integer-in-range' : '5' , 'random-float' : '-2210.249383058661' , 'random-rounded-float-in-range' : '2.038' , 'random-boolean' : 'false' , 'random-boolean-nullable' : 'false' , 'random-type' : 'push' , 'random-unique-identifier' : '8632e25293a34491b216494b49d918d3' , 'random-id' : '63326' , 'random-name-by-iterable' : 'much' , 'random-name-by-function' : 'decision' }, headers = { 'Content-Type' : 'application/json' , 'Accept-Language' : '*' } ) POST application/x-www-form-urlencoded Input import fake_module from http_request_codegen import generate_http_request_code generate_http_request_code ( language = 'python' , impl = 'requests' , method = 'POST' , url = 'https://github.com/mondeja/http-request-codegen' , headers = { 'Accept-Language' : '*' , 'Accept-Charset' : 'utf-8' }, seed = 4762 , parameters = [ { 'name' : 'fixed-value' , 'value' : 3 }, { 'name' : 'dinamic-value-by-iterable' , 'value' : [ 1 , 2 , 3 ] # same as 'values': [1, 2, 3] }, { 'name' : 'dinamic-value-by-function' , 'value' : fake_module . integers_from_1_to_10 }, # Parameter value randomization { 'name' : 'random-values-by-iterable' , 'values' : [ 'foo' , 'bar' , 'baz' ] }, { 'name' : 'random-values-by-function' , 'values' : fake_module . integers_from_1_to_10 }, { 'name' : 'random-values-by-function-path' , 'values' : 'fake_module::integers_from_1_to_10' }, { 'name' : 'random-value-by-faker-provider-function-path' , 'faker' : 'faker.providers.job::job' }, { 'name' : 'random-string' , # by default: random word 'type' : 'str' }, { 'name' : 'random-integer' , 'type' : 'int' , }, { 'name' : 'random-integer-in-range' , 'type' : int , # You can use Python types also 'min' : 2 , 'max' : 5 , }, { 'name' : 'random-float' , 'type' : 'number' , # You can use some type aliases also }, { 'name' : 'random-rounded-float-in-range' , 'type' : float , 'min' : 1.555 , 'max' : 2.555 , 'round' : 3 }, { 'name' : 'random-boolean' , 'type' : bool }, { 'name' : 'random-boolean-nullable' , 'type' : 'boolean' , 'null' : True }, { 'name' : 'random-type' , 'type' : 'random' # random type from availables }, { 'name' : 'random-unique-identifier' , 'type' : 'uuid' }, { 'name' : 'random-id' , # positive integer 'type' : 'id' }, # Parameter name randomization { 'name' : [ 'random-name-from-iterable' , 'random-name-by-iterable' ], 'type' : 'str' , }, { 'name' : fake_module . random_name_by_function , 'type' : 'random' , }, ] ) Output import requests req = requests . post ( 'https://github.com/mondeja/http-request-codegen' , data = { 'fixed-value' : '3' , 'dinamic-value-by-iterable' : '2' , 'dinamic-value-by-function' : '7' , 'random-values-by-iterable' : 'bar' , 'random-values-by-function' : '7' , 'random-values-by-function-path' : '7' , 'random-value-by-faker-provider-function-path' : 'Fashion designer' , 'random-string' : 'as' , 'random-integer' : '61115' , 'random-integer-in-range' : '5' , 'random-float' : '-2210.249383058661' , 'random-rounded-float-in-range' : '2.038' , 'random-boolean' : 'false' , 'random-boolean-nullable' : 'false' , 'random-type' : 'machine' , 'random-unique-identifier' : 'b3fdec3a00294b77b7b3e9e45a296883' , 'random-id' : '63326' , 'random-name-by-iterable' : 'doctor' , 'random-name-by-function' : 'within' }, headers = { 'Accept-Language' : '*' , 'Accept-Charset' : 'utf-8' } ) multipart/form-data Input from http_request_codegen import generate_http_request_code generate_http_request_code ( language = 'python' , impl = 'requests' , method = 'POST' , url = 'https://github.com/mondeja/http-request-codegen' , headers = { 'Accept-Language' : '*' , 'Accept-Charset' : 'utf-8' }, seed = 4762 , files = { 'fixed-filepath' : '/tmp/foo.txt' , 'random-filepath' : None , 'fixed-filepath-content-type' : ( '/tmp/bar.csv' , 'text/csv' ), 'fixed-filepath-ct-header' : ( '/tmp/bar.json' , 'application/json' , { 'Accept-Charset' : 'utf-8' } ), 'random-filepath-content-type' : ( None , 'text/plain' ), 'random-filepath-ct-header' : ( None , 'text/csv' , { 'Accept-Charset' : 'utf-8' } ) } ) Output import requests req = requests . post ( 'https://github.com/mondeja/http-request-codegen' , files = { 'fixed-filepath' : ( '/tmp/foo.txt' , open ( '/tmp/foo.txt' , 'rb' ) ), 'random-filepath' : ( '/receive/city.numbers' , open ( '/receive/city.numbers' , 'rb' ) ), 'fixed-filepath-content-type' : ( '/tmp/bar.csv' , open ( '/tmp/bar.csv' , 'rb' ), 'text/csv' ), 'fixed-filepath-ct-header' : ( '/tmp/bar.json' , open ( '/tmp/bar.json' , 'rb' ), 'application/json' , { 'Accept-Charset' : 'utf-8' } ), 'random-filepath-content-type' : ( '/either/few.key' , open ( '/either/few.key' , 'rb' ), 'text/plain' ), 'random-filepath-ct-header' : ( '/increase/strategy.json' , open ( '/increase/strategy.json' , 'rb' ), 'text/csv' , { 'Accept-Charset' : 'utf-8' } ) }, headers = { 'Accept-Language' : '*' , 'Accept-Charset' : 'utf-8' } ) application/json Input import fake_module from http_request_codegen import generate_http_request_code generate_http_request_code ( language = 'python' , impl = 'requests' , method = 'POST' , url = 'https://github.com/mondeja/http-request-codegen' , headers = { 'Content-Type' : 'application/json' }, seed = 4762 , parameters = [ { 'name' : 'fixed-value' , 'value' : 3 }, { 'name' : 'dinamic-value-by-iterable' , 'value' : [ 1 , 2 , 3 ] # same as 'values': [1, 2, 3] }, { 'name' : 'dinamic-value-by-function' , 'value' : fake_module . integers_from_1_to_10 }, # Parameter value randomization { 'name' : 'random-values-by-iterable' , 'values' : [ 'foo' , 'bar' , 'baz' ] }, { 'name' : 'random-values-by-function' , 'values' : fake_module . integers_from_1_to_10 }, { 'name' : 'random-values-by-function-path' , 'values' : 'fake_module::integers_from_1_to_10' }, { 'name' : 'random-value-by-faker-provider-function-path' , 'faker' : 'faker.providers.job::job' }, { 'name' : 'random-string' , # by default: random word 'type' : 'str' }, { 'name' : 'random-integer' , 'type' : 'int' , }, { 'name' : 'random-integer-in-range' , 'type' : int , # You can use Python types also 'min' : 2 , 'max' : 5 , }, { 'name' : 'random-float' , 'type' : 'number' , # You can use some type aliases also }, { 'name' : 'random-rounded-float-in-range' , 'type' : float , 'min' : 1.555 , 'max' : 2.555 , 'round' : 3 }, { 'name' : 'random-boolean' , 'type' : bool }, { 'name' : 'random-boolean-nullable' , 'type' : 'boolean' , 'null' : True }, { 'name' : 'random-type' , 'type' : 'random' # random type from availables }, { 'name' : 'random-unique-identifier' , 'type' : 'uuid' }, { 'name' : 'random-id' , # positive integer 'type' : 'id' }, # Parameter name randomization { 'name' : [ 'random-name-from-iterable' , 'random-name-by-iterable' ], 'type' : 'str' , }, { 'name' : fake_module . random_name_by_function , 'type' : 'random' , }, ] ) Output import requests req = requests . post ( 'https://github.com/mondeja/http-request-codegen' , json = { 'fixed-value' : 3 , 'dinamic-value-by-iterable' : '2' , 'dinamic-value-by-function' : '7' , 'random-values-by-iterable' : 'bar' , 'random-values-by-function' : '7' , 'random-values-by-function-path' : '7' , 'random-value-by-faker-provider-function-path' : 'Statistician' , 'random-string' : 'buy' , 'random-integer' : '61115' , 'random-integer-in-range' : '5' , 'random-float' : '-2210.249383058661' , 'random-rounded-float-in-range' : '2.038' , 'random-boolean' : 'false' , 'random-boolean-nullable' : 'false' , 'random-type' : 'image' , 'random-unique-identifier' : 'ce9f472d5964448d98fcf7a3dd3a5d3c' , 'random-id' : '63326' , 'random-name-by-iterable' : 'give' , 'random-name-by-function' : 'health' }, headers = { 'Content-Type' : 'application/json' } ) text/plain Input from http_request_codegen import generate_http_request_code generate_http_request_code ( language = 'python' , impl = 'requests' , method = 'POST' , url = 'https://github.com/mondeja/http-request-codegen' , headers = { 'Content-Type' : 'text/plain' }, seed = 4762 , parameters = [ { 'name' : 'random-values-by-iterable' , 'values' : [ 'foo' , 'bar' , 'baz' ] } ] ) Output import requests req = requests . post ( 'https://github.com/mondeja/http-request-codegen' , data = 'bar' , headers = { 'Content-Type' : 'text/plain' } ) Bash curl GET Input import fake_module from http_request_codegen import generate_http_request_code generate_http_request_code ( language = 'bash' , impl = 'curl' , method = 'GET' , url = 'https://github.com/mondeja/http-request-codegen' , headers = { 'Content-Type' : 'application/json' , 'Accept-Language' : '*' }, seed = 4762 , parameters = [ { 'name' : 'fixed-value' , 'value' : 3 }, { 'name' : 'dinamic-value-by-iterable' , 'value' : [ 1 , 2 , 3 ] # same as 'values': [1, 2, 3] }, { 'name' : 'dinamic-value-by-function' , 'value' : fake_module . integers_from_1_to_10 }, # Parameter value randomization { 'name' : 'random-values-by-iterable' , 'values' : [ 'foo' , 'bar' , 'baz' ] }, { 'name' : 'random-values-by-function' , 'values' : fake_module . integers_from_1_to_10 }, { 'name' : 'random-values-by-function-path' , 'values' : 'fake_module::integers_from_1_to_10' }, { 'name' : 'random-value-by-faker-provider-function-path' , 'faker' : 'faker.providers.job::job' }, { 'name' : 'random-string' , # by default: random word 'type' : 'str' }, { 'name' : 'random-integer' , 'type' : 'int' , }, { 'name' : 'random-integer-in-range' , 'type' : int , # You can use Python types also 'min' : 2 , 'max' : 5 , }, { 'name' : 'random-float' , 'type' : 'number' , # You can use some type aliases also }, { 'name' : 'random-rounded-float-in-range' , 'type' : float , 'min' : 1.555 , 'max' : 2.555 , 'round' : 3 }, { 'name' : 'random-boolean' , 'type' : bool }, { 'name' : 'random-boolean-nullable' , 'type' : 'boolean' , 'null' : True }, { 'name' : 'random-type' , 'type' : 'random' # random type from availables }, { 'name' : 'random-unique-identifier' , 'type' : 'uuid' }, { 'name' : 'random-id' , # positive integer 'type' : 'id' }, # Parameter name randomization { 'name' : [ 'random-name-from-iterable' , 'random-name-by-iterable' ], 'type' : 'str' , }, { 'name' : fake_module . random_name_by_function , 'type' : 'random' , }, ] ) Pass extra options to 'curl' command in kwargs parameter. For example, to save the response in a file, pass kwargs={'-o': 'filename.ext'} : curl -o \"filename.ext\" Output curl \\ -d 'fixed-value=3&dinamic-value-by-iterable=2&dinamic-value-by-function=7&random-values-by-iterable=bar&random-values-by-function=7&random-values-by-function-path=7&random-value-by-faker-provider-function-path=Administrator%2C+charities%2Fvoluntary+organisations&random-string=surface&random-integer=61115&random-integer-in-range=5&random-float=-2210.249383058661&random-rounded-float-in-range=2.038&random-boolean=false&random-boolean-nullable=false&random-type=road&random-unique-identifier=31387ab05be14110acb56166691d1374&random-id=63326&random-name-by-iterable=usually&random-name-by-function=real' \\ -H 'Content-Type: application/json' \\ -H 'Accept-Language: *' \\ https://github.com/mondeja/http-request-codegen POST application/x-www-form-urlencoded Input import fake_module from http_request_codegen import generate_http_request_code generate_http_request_code ( language = 'bash' , impl = 'curl' , method = 'POST' , url = 'https://github.com/mondeja/http-request-codegen' , headers = { 'Accept-Language' : '*' , 'Accept-Charset' : 'utf-8' }, seed = 4762 , parameters = [ { 'name' : 'fixed-value' , 'value' : 3 }, { 'name' : 'dinamic-value-by-iterable' , 'value' : [ 1 , 2 , 3 ] # same as 'values': [1, 2, 3] }, { 'name' : 'dinamic-value-by-function' , 'value' : fake_module . integers_from_1_to_10 }, # Parameter value randomization { 'name' : 'random-values-by-iterable' , 'values' : [ 'foo' , 'bar' , 'baz' ] }, { 'name' : 'random-values-by-function' , 'values' : fake_module . integers_from_1_to_10 }, { 'name' : 'random-values-by-function-path' , 'values' : 'fake_module::integers_from_1_to_10' }, { 'name' : 'random-value-by-faker-provider-function-path' , 'faker' : 'faker.providers.job::job' }, { 'name' : 'random-string' , # by default: random word 'type' : 'str' }, { 'name' : 'random-integer' , 'type' : 'int' , }, { 'name' : 'random-integer-in-range' , 'type' : int , # You can use Python types also 'min' : 2 , 'max' : 5 , }, { 'name' : 'random-float' , 'type' : 'number' , # You can use some type aliases also }, { 'name' : 'random-rounded-float-in-range' , 'type' : float , 'min' : 1.555 , 'max' : 2.555 , 'round' : 3 }, { 'name' : 'random-boolean' , 'type' : bool }, { 'name' : 'random-boolean-nullable' , 'type' : 'boolean' , 'null' : True }, { 'name' : 'random-type' , 'type' : 'random' # random type from availables }, { 'name' : 'random-unique-identifier' , 'type' : 'uuid' }, { 'name' : 'random-id' , # positive integer 'type' : 'id' }, # Parameter name randomization { 'name' : [ 'random-name-from-iterable' , 'random-name-by-iterable' ], 'type' : 'str' , }, { 'name' : fake_module . random_name_by_function , 'type' : 'random' , }, ] ) Output curl \\ -X 'POST' \\ -d 'fixed-value=3&dinamic-value-by-iterable=2&dinamic-value-by-function=7&random-values-by-iterable=bar&random-values-by-function=7&random-values-by-function-path=7&random-value-by-faker-provider-function-path=Designer%2C+textile&random-string=culture&random-integer=61115&random-integer-in-range=5&random-float=-2210.249383058661&random-rounded-float-in-range=2.038&random-boolean=false&random-boolean-nullable=false&random-type=air&random-unique-identifier=522f08111809464b9d2038088d3ffdec&random-id=63326&random-name-by-iterable=though&random-name-by-function=idea' \\ -H 'Accept-Language: *' \\ -H 'Accept-Charset: utf-8' \\ https://github.com/mondeja/http-request-codegen multipart/form-data Input from http_request_codegen import generate_http_request_code generate_http_request_code ( language = 'bash' , impl = 'curl' , method = 'POST' , url = 'https://github.com/mondeja/http-request-codegen' , headers = { 'Accept-Language' : '*' , 'Accept-Charset' : 'utf-8' }, seed = 4762 , files = { 'fixed-filepath' : '/tmp/foo.txt' , 'random-filepath' : None , 'fixed-filepath-content-type' : ( '/tmp/bar.csv' , 'text/csv' ), 'fixed-filepath-ct-header' : ( '/tmp/bar.json' , 'application/json' , { 'Accept-Charset' : 'utf-8' } ), 'random-filepath-content-type' : ( None , 'text/plain' ), 'random-filepath-ct-header' : ( None , 'text/csv' , { 'Accept-Charset' : 'utf-8' } ) } ) Output curl \\ -X 'POST' \\ -F 'fixed-filepath=@/tmp/foo.txt' \\ -F 'random-filepath=@/through/across.txt' \\ -F 'fixed-filepath-content-type=@/tmp/bar.csv' \\ -F 'fixed-filepath-ct-header=@/tmp/bar.json' \\ -F 'random-filepath-content-type=@/south/goal.json' \\ -F 'random-filepath-ct-header=@/again/option.flac' \\ -H 'Accept-Language: *' \\ -H 'Accept-Charset: utf-8' \\ https://github.com/mondeja/http-request-codegen application/json Input import fake_module from http_request_codegen import generate_http_request_code generate_http_request_code ( language = 'bash' , impl = 'curl' , method = 'POST' , url = 'https://github.com/mondeja/http-request-codegen' , headers = { 'Content-Type' : 'application/json' }, seed = 4762 , parameters = [ { 'name' : 'fixed-value' , 'value' : 3 }, { 'name' : 'dinamic-value-by-iterable' , 'value' : [ 1 , 2 , 3 ] # same as 'values': [1, 2, 3] }, { 'name' : 'dinamic-value-by-function' , 'value' : fake_module . integers_from_1_to_10 }, # Parameter value randomization { 'name' : 'random-values-by-iterable' , 'values' : [ 'foo' , 'bar' , 'baz' ] }, { 'name' : 'random-values-by-function' , 'values' : fake_module . integers_from_1_to_10 }, { 'name' : 'random-values-by-function-path' , 'values' : 'fake_module::integers_from_1_to_10' }, { 'name' : 'random-value-by-faker-provider-function-path' , 'faker' : 'faker.providers.job::job' }, { 'name' : 'random-string' , # by default: random word 'type' : 'str' }, { 'name' : 'random-integer' , 'type' : 'int' , }, { 'name' : 'random-integer-in-range' , 'type' : int , # You can use Python types also 'min' : 2 , 'max' : 5 , }, { 'name' : 'random-float' , 'type' : 'number' , # You can use some type aliases also }, { 'name' : 'random-rounded-float-in-range' , 'type' : float , 'min' : 1.555 , 'max' : 2.555 , 'round' : 3 }, { 'name' : 'random-boolean' , 'type' : bool }, { 'name' : 'random-boolean-nullable' , 'type' : 'boolean' , 'null' : True }, { 'name' : 'random-type' , 'type' : 'random' # random type from availables }, { 'name' : 'random-unique-identifier' , 'type' : 'uuid' }, { 'name' : 'random-id' , # positive integer 'type' : 'id' }, # Parameter name randomization { 'name' : [ 'random-name-from-iterable' , 'random-name-by-iterable' ], 'type' : 'str' , }, { 'name' : fake_module . random_name_by_function , 'type' : 'random' , }, ] ) Output curl \\ -X 'POST' \\ -d 'fixed-value=3&dinamic-value-by-iterable=2&dinamic-value-by-function=7&random-values-by-iterable=bar&random-values-by-function=7&random-values-by-function-path=7&random-value-by-faker-provider-function-path=Exhibitions+officer%2C+museum%2Fgallery&random-string=church&random-integer=61115&random-integer-in-range=5&random-float=-2210.249383058661&random-rounded-float-in-range=2.038&random-boolean=false&random-boolean-nullable=false&random-type=against&random-unique-identifier=9e013269fc1b40fa944a2f1b48e49f31&random-id=63326&random-name-by-iterable=music&random-name-by-function=animal' \\ -H 'Content-Type: application/json' \\ https://github.com/mondeja/http-request-codegen text/plain Input from http_request_codegen import generate_http_request_code generate_http_request_code ( language = 'bash' , impl = 'curl' , method = 'POST' , url = 'https://github.com/mondeja/http-request-codegen' , headers = { 'Content-Type' : 'text/plain' }, seed = 4762 , parameters = [ { 'name' : 'random-values-by-iterable' , 'values' : [ 'foo' , 'bar' , 'baz' ] } ] ) Output curl \\ -X 'POST' \\ -d 'random-values-by-iterable=bar' \\ -H 'Content-Type: text/plain' \\ https://github.com/mondeja/http-request-codegen","title":"Demo"},{"location":"#support","text":"Javascript fetch GET POST Headers \u2705 \u2705 Parameters \u2705 \u2705 Parameters localization \u2705 \u2705 Parameters seed \u2705 \u2705 Custom indentation \u2705 \u2705 Quotation character \u2705 \u2705 One line rendering \u2705 \u2705 Custom initialization \u2705 \u2705 Custom teardown \u2705 \u2705 Line wrapping \u2705 \u2705 Python requests GET POST Headers \u2705 \u2705 Parameters \u2705 \u2705 Parameters localization \u2705 \u2705 Parameters seed \u2705 \u2705 Custom indentation \u2705 \u2705 Quotation character \u2705 \u2705 One line rendering \u2705 \u2705 Custom initialization \u2705 \u2705 Custom teardown \u2705 \u2705 Line wrapping \u2705 \u2705 Bash curl GET POST Headers \u2705 \u2705 Parameters \u2705 \u2705 Parameters localization \u2705 \u2705 Parameters seed \u2705 \u2705 Custom indentation \u2705 \u2705 Quotation character \u2705 \u2705 One line rendering \u2705 \u2705 Custom initialization \u2705 \u2705 Custom teardown \u2705 \u2705 Line wrapping \u2705 \u2705","title":"Support"},{"location":"dev/","text":"Setup development environment \u00b6 Linux/MacOS pip + virtualenv git clone https://github.com/mondeja/http-request-codegen.git python3 -m virtualenv venv . venv/bin/activate python3 -m pip install . [ dev ] pre-commit install Windows pip + virtualenv git clone https://github.com/mondeja/http-request-codegen.git python3 -m virtualenv venv venv\\Scripts\\activate.bat python3 -m pip install .[dev] pre-commit install Development commands \u00b6 Test \u00b6 All pytest -sv Coverage pytest -s --cov = http_request_codegen --cov-config = setup.cfg --cov-report = html Doctests pytest -svv --doctest-modules http_request_codegen Lint \u00b6 pre-commit run --all-files Developing implementations \u00b6 To develop an HTTP method function for a library or a program, you need to take in accounts all parameters described in generate_http_request_code function, but not the randomized values passed in parameters argument, because http_request_codegen provides functions that can handle these. Implementation arguments \u00b6 Each implementation function must contain the following arguments, which are passed from the API function generate_http_request_code , so it's recommended that you familiarize yourself with the arguments of that function before continuing with this guide because they are well documented there: url : unique positional argument of the function, represents the target URL of the request. headers : dictionary of headers. parameters : list of parameter data objects. files : dictionary of files, only passed to POST requests, so this should not be defined as argument is the function implementation's name is different to post . wrap : maximum anchor of the rendered code snippet. indent : indentation used in the rendered code snippet. quote_char : string quotation character. setup : code snippet prepended to generated request output. teardown : code snippet appended at the end of the generated request output. oneline : if enabled, render the code snippet in one line. seed : seed used generating random fake values of parameters. locale : locale used by faker library to localize the faked random values for parameters. Method singularities \u00b6 POST \u00b6 Most POST methods implementations render their code snippets different, depending on Content-Types header, including by default some of the most used Content-Types header related behaviours: The default behavior, even if you don't specify it explicitly in the Content-Type header is the generation of an application/x-www-form-urlencoded encoded request. If you want to generate a multipart/form-data encoded request, you need to specify the files to sent using the files argument. If you specifies the Content-Type header application/json , the parameters sent will be adjusted according to the JSON encoded POST request. If you specifies the Content-Type header text/plain , you can only send one parameter and it will be adjusted accordingly following the implementation. One line wrapping behaviour \u00b6 The first thing to take in account (and the most complicated one) is the behaviour of wrapping ( wrap argument) rendering as if oneline=True is passed. The question is: can a snippet of code be outputted in one line if the estimated length of the request is lower than wrap argument value? For example, Python requests can be rendered using this kind of code, in one line: import requests req = requests . get ( 'https://github.com/mondeja/http-request-codegen' ) ...or using multiple lines ( wrap is lower than expected length): import requests req = requests . get ( 'https://github.com/mondeja/http-request-codegen' ) Of course, this also affects parameters , headers and kwargs : import requests req = requests . get ( 'localhost' , params = { 'foo' : 'bar' }, headers = { 'foo' : 'bar' }) ...which can be outputted in multiple lines: import requests req = requests . get ( 'localhost' , params = { 'foo' : 'bar' }, headers = { 'foo' : 'bar' } ) Since this behaviour can depend both oneline and wrap arguments, the recommended way of implement this is to calculate the length of the expected request inside the code snippet, and, if it is greater or equal to wrap argument, must be rendered as if oneline=True . Tip You can see an example of this type of implementation at http_request_codegen.generators.python.requests::get function. But other implementations could be rendered in multiples lines regardless the wrap argument value. For example, the Javascript fetch API implementation will output always a multiline code snippet (unless oneline=True is explicitly defined), because the Javascript Promises writing in single line is not a common syntax and there is a little chance that the generated request could not be wrapped given the default wrap value (80 in this case). The minimum reasonable possible code snippet in one line for Javascript fetch API implementation would be: fetch ( 'localhost' ). then ( function ( response ) {}). catch ( function ( error ) { console . error ( error )}); ...which exceeds the default wrap value length (80). In such type of cases, there is no need of calculate the expected generated code snippet request length before build their output. Tip You can see an example of this type of implementation at http_request_codegen.generators.javascript.fetch::get function. In the first case, you need to iterate over parameters , headers and kwargs arguments to compute the expected length, then compare the expected length with wrap argument value and, if it reaches it, define an internal oneline=True like behaviour. In the second, you can assume that the generated code is multiline unless oneline=True is explicitly defined as argument. Randomizing values \u00b6 The library provides the functions lazy_name_by_parameter and lazy_value_by_parameter which returns the name and the value of a parameter given a parameter dictionary specification. These must be used to randomize parameters in a unified way across implementations as described in generate_http_request_code function documentation. Language/platform utilities \u00b6 You can create an _utils.py module inside a language or platform package to store utilities that could help in the process of building the code snippet, like: Define default indentation for the language/platform ( indent argument). Define default wrapping length value ( wrap argument). Define default quotation character/s ( quote_char argument). Escape quotes of values (according to given quote_char argument). Create greater level functions of code generation for the language/platform, such as string definitions with wrapping behaviour, dictionary definitions... Tip See current _utils.py modules of generators packages as reference. Creating test cases \u00b6 Use the script scripts/create-impl-test-cases.py to create possible generated code snippets cases accordingly to combination of arguments. This will help you developing implementations because saves you the need of execute every possible combination of arguments. Use it as follows: rm -rf cases && python3 scripts/create-impl-test-cases.py \\ --language python \\ --implementation requests \\ --method GET \\ --directory cases Previous command will create a cases/ directory with a lot of code snippets generated, given the combinations described in tests/combinations.py . When you will have manually revised that all code snippets are generated correctly, you can create a test for the implementation at tests/test_generators/test_<lang>/test_<impl>/test_<impl>.py , placing the cases/ directory at tests/test_generators/test_<lang>/test_<impl>/<METHOD> . For example, for Python requests GET method, the test module would be tests/test_generators/test_python/test_requests/test_requests.py and the cases/ directory would be placed at tests/test_generators/test_python/test_requests/GET/ . Tip You can use an already implemented test module as a reference to write the one for the implementation.","title":"Development"},{"location":"dev/#setup-development-environment","text":"Linux/MacOS pip + virtualenv git clone https://github.com/mondeja/http-request-codegen.git python3 -m virtualenv venv . venv/bin/activate python3 -m pip install . [ dev ] pre-commit install Windows pip + virtualenv git clone https://github.com/mondeja/http-request-codegen.git python3 -m virtualenv venv venv\\Scripts\\activate.bat python3 -m pip install .[dev] pre-commit install","title":"Setup development environment"},{"location":"dev/#development-commands","text":"","title":"Development commands"},{"location":"dev/#test","text":"All pytest -sv Coverage pytest -s --cov = http_request_codegen --cov-config = setup.cfg --cov-report = html Doctests pytest -svv --doctest-modules http_request_codegen","title":"Test"},{"location":"dev/#lint","text":"pre-commit run --all-files","title":"Lint"},{"location":"dev/#developing-implementations","text":"To develop an HTTP method function for a library or a program, you need to take in accounts all parameters described in generate_http_request_code function, but not the randomized values passed in parameters argument, because http_request_codegen provides functions that can handle these.","title":"Developing implementations"},{"location":"dev/#implementation-arguments","text":"Each implementation function must contain the following arguments, which are passed from the API function generate_http_request_code , so it's recommended that you familiarize yourself with the arguments of that function before continuing with this guide because they are well documented there: url : unique positional argument of the function, represents the target URL of the request. headers : dictionary of headers. parameters : list of parameter data objects. files : dictionary of files, only passed to POST requests, so this should not be defined as argument is the function implementation's name is different to post . wrap : maximum anchor of the rendered code snippet. indent : indentation used in the rendered code snippet. quote_char : string quotation character. setup : code snippet prepended to generated request output. teardown : code snippet appended at the end of the generated request output. oneline : if enabled, render the code snippet in one line. seed : seed used generating random fake values of parameters. locale : locale used by faker library to localize the faked random values for parameters.","title":"Implementation arguments"},{"location":"dev/#method-singularities","text":"","title":"Method singularities"},{"location":"dev/#post","text":"Most POST methods implementations render their code snippets different, depending on Content-Types header, including by default some of the most used Content-Types header related behaviours: The default behavior, even if you don't specify it explicitly in the Content-Type header is the generation of an application/x-www-form-urlencoded encoded request. If you want to generate a multipart/form-data encoded request, you need to specify the files to sent using the files argument. If you specifies the Content-Type header application/json , the parameters sent will be adjusted according to the JSON encoded POST request. If you specifies the Content-Type header text/plain , you can only send one parameter and it will be adjusted accordingly following the implementation.","title":"POST"},{"location":"dev/#one-line-wrapping-behaviour","text":"The first thing to take in account (and the most complicated one) is the behaviour of wrapping ( wrap argument) rendering as if oneline=True is passed. The question is: can a snippet of code be outputted in one line if the estimated length of the request is lower than wrap argument value? For example, Python requests can be rendered using this kind of code, in one line: import requests req = requests . get ( 'https://github.com/mondeja/http-request-codegen' ) ...or using multiple lines ( wrap is lower than expected length): import requests req = requests . get ( 'https://github.com/mondeja/http-request-codegen' ) Of course, this also affects parameters , headers and kwargs : import requests req = requests . get ( 'localhost' , params = { 'foo' : 'bar' }, headers = { 'foo' : 'bar' }) ...which can be outputted in multiple lines: import requests req = requests . get ( 'localhost' , params = { 'foo' : 'bar' }, headers = { 'foo' : 'bar' } ) Since this behaviour can depend both oneline and wrap arguments, the recommended way of implement this is to calculate the length of the expected request inside the code snippet, and, if it is greater or equal to wrap argument, must be rendered as if oneline=True . Tip You can see an example of this type of implementation at http_request_codegen.generators.python.requests::get function. But other implementations could be rendered in multiples lines regardless the wrap argument value. For example, the Javascript fetch API implementation will output always a multiline code snippet (unless oneline=True is explicitly defined), because the Javascript Promises writing in single line is not a common syntax and there is a little chance that the generated request could not be wrapped given the default wrap value (80 in this case). The minimum reasonable possible code snippet in one line for Javascript fetch API implementation would be: fetch ( 'localhost' ). then ( function ( response ) {}). catch ( function ( error ) { console . error ( error )}); ...which exceeds the default wrap value length (80). In such type of cases, there is no need of calculate the expected generated code snippet request length before build their output. Tip You can see an example of this type of implementation at http_request_codegen.generators.javascript.fetch::get function. In the first case, you need to iterate over parameters , headers and kwargs arguments to compute the expected length, then compare the expected length with wrap argument value and, if it reaches it, define an internal oneline=True like behaviour. In the second, you can assume that the generated code is multiline unless oneline=True is explicitly defined as argument.","title":"One line wrapping behaviour"},{"location":"dev/#randomizing-values","text":"The library provides the functions lazy_name_by_parameter and lazy_value_by_parameter which returns the name and the value of a parameter given a parameter dictionary specification. These must be used to randomize parameters in a unified way across implementations as described in generate_http_request_code function documentation.","title":"Randomizing values"},{"location":"dev/#languageplatform-utilities","text":"You can create an _utils.py module inside a language or platform package to store utilities that could help in the process of building the code snippet, like: Define default indentation for the language/platform ( indent argument). Define default wrapping length value ( wrap argument). Define default quotation character/s ( quote_char argument). Escape quotes of values (according to given quote_char argument). Create greater level functions of code generation for the language/platform, such as string definitions with wrapping behaviour, dictionary definitions... Tip See current _utils.py modules of generators packages as reference.","title":"Language/platform utilities"},{"location":"dev/#creating-test-cases","text":"Use the script scripts/create-impl-test-cases.py to create possible generated code snippets cases accordingly to combination of arguments. This will help you developing implementations because saves you the need of execute every possible combination of arguments. Use it as follows: rm -rf cases && python3 scripts/create-impl-test-cases.py \\ --language python \\ --implementation requests \\ --method GET \\ --directory cases Previous command will create a cases/ directory with a lot of code snippets generated, given the combinations described in tests/combinations.py . When you will have manually revised that all code snippets are generated correctly, you can create a test for the implementation at tests/test_generators/test_<lang>/test_<impl>/test_<impl>.py , placing the cases/ directory at tests/test_generators/test_<lang>/test_<impl>/<METHOD> . For example, for Python requests GET method, the test module would be tests/test_generators/test_python/test_requests/test_requests.py and the cases/ directory would be placed at tests/test_generators/test_python/test_requests/GET/ . Tip You can use an already implemented test module as a reference to write the one for the implementation.","title":"Creating test cases"},{"location":"reference/","text":"Public API \u00b6 generate_http_request_code \u00b6 from http_request_codegen import generate_http_request_code Generates a code snippet of an HTTP request for a library of a given programming language or a CLI of a program, based on a valid HTTP method and a specification of parameters. There are some peculiarities concerning certain methods: POST Most POST methods implementations render their code snippets different, depending on Content-Types header, including by default some of the most used Content-Types header related behaviours: The default behavior, even if you don't specify it explicitly in the Content-Type header is the generation of an application/x-www-form-urlencoded encoded request. If you want to generate a multipart/form-data encoded request, you need to specify the files to sent using the files argument. If you specifies the Content-Type header application/json , the parameters sent will be adjusted according to the JSON encoded POST request. If you specifies the Content-Type header text/plain , you can only send one parameter and it will be adjusted accordingly following the implementation. Parameters: Name Type Description Default language str Programming language or plataform of the resulting code snippet. See Support to check the supported platforms and programming languages. None impl str Implementation type used for the code snippet. It can be a library, a program, or a language API. See Support to check the supported implementations by language. None method str HTTP method of the generated request. 'GET' url str, iterable, callable URL endpoint of the generated request. Defined as a string, the url will be the string itself. Defined as an iterable, the url will be selected randomly from the iterable. Supports recursivity: until a string is not selected the recursion will not be stopped. Defined as a callable, the url will be the returned value of the callable. Supports recursivity: until a string is returned the recursion will not be stopped. 'http://localhost' headers dict Mapping of request header names and values. {} parameters list List of parameters for the request. Each parameter must be a dictionary. This dictionary defines, for each parameter, what is the parameter name and how are the parameters values generated: name ( str , list , function ): Parameter name. At least one of this or names attributes are required. Defined as a string, the name will be the string itself. Defined as an iterable, the name will be selected randomly from the iterable. Supports recursivity: until a string is not selected the recursion will not be stopped. Defined as a callable, the name will be the returned value of the callable. Supports recursivity: until a string is returned the recursion will not be stopped. names ( str , list , function ): Parameter name. At least one of this or name attributes are required. Defined as an iterable, the name will be selected randomly from the iterable. Supports recursivity: until a string is not selected the recursion will not be stopped. Defined as a string, must be a Python formatted module path following the format 'path.to.module::function' and the return name will be used as the name for the parameter, which is useful if choosing a random value from a list doesn't fit your needs. Defined as a callable, the name will be the returned value of the callable. Supports recursivity: until a string is returned the recursion will not be stopped. type ( str , iterable , callable ): Parameter data type. If not defined and value , values and faker are not defined, will be considered as a string and the value of the parameter will be a random word built using faker library. For some types, other parameter dictionary attributes are supported, documented, if so, in each type. The following parameter data types are supported as attributes of parameters dictionaries, as well as their corresponding names in capital letters: 'str' : Basic string type. Can be defined with the Python builtin type str or the strings 'str' and 'string' . 'int' : Basic integer type. Can be defined with the Python builtin type int , or the strings 'int' and 'integer' . As default will be an integer in the range -65536 to 65536. The minimum and maximum values can be defined with min and max parameter optional attributes. 'float' : Floating point number type. Can be defined with the Python builtin type float , or the strings 'float' and number . As default will be in the range -65536 to 65536. The minimum and maximum values can be defined with min and max parameter optional attributes and can be rounded with round Python builtin function using round parameter optional attribute. 'bool' : Basic boolean type. Can be defined with the Python builtin type bool , or the strings 'bool' and 'boolean' . Returns as parameter value one of the strings 'true' or 'false' . If you pass the optional parameter attribute null as True , the string 'null' can also be returned. 'uuid' : Unique identifier type. Can be defined with the Python type uuid.UUID , or the strings 'uuid' and 'uuid4' . It's a unique identifier v4 encoded as hexadecimal string. 'id' : Basic integer id. It's a positive integer in the range 1 to 65536. The maximum value can be defined by optional max attribute. 'random' : Random type between the available types. You can define a set of possible types passing an iterable to types optional parameter attribute. Defined as an iterable or callable, the type will be selected randomly from the iterable, or the returned value from the callable will be used. This allows you to select a random type from a list of custom predefined types. value ( str , iterable , callable ): Parameter value. If not defined and type , values and faker are not defined, the value of the parameter will be a random word built using faker library. Defined as a string, the value will be the string itself. Defined as an iterable, the value will be selected randomly from the iterable. Supports recursivity: until a string is not selected the recursion will not be stopped. Defined as a callable, the value will be the returned value of the callable. Supports recursivity: until a string is returned the recursion will not be stopped. values ( list , iterable , callable ): Possible parameter values. Defined as an iterable, the value will be selected randomly from the iterable. Supports recursivity: until a string is not selected the recursion will not be stopped. Defined as a string, must be a Python formatted module path following the format 'path.to.module::function' and the return value will be used as the value for the parameter, which is useful if choosing a random value from a list doesn't fit your needs. Defined as a callable, the value will be the returned value of the callable. Supports recursivity: until a string is returned the recursion will not be stopped. faker ( str , function ): Python formatted module path to a function of a Faker provider used to build the value randomized. Can be a standard, external provider or any function, but if is not a provider, seed and locale will not have effect. Defined as a string must follow the format 'path.to.provider.module::function' . [] files dict Mapping of files to send to URL. Only has effect for POST methods. If you define this argument, the Content-Type header of the request will be assumed to be 'multipart/form-data' , but only will be explicitly specified in the code generated if the implementation needs it. Each value accepts a string, None or a tuple: Defined as a string, must be the filepath of the file to be sent. Defined as None , the filepath will be randomized using faker.providers.file::file_path function. Defined as a tuple, the first value must be the filepath of the file to be sent (if None will be a randomized filepath), the second value the content-type of the file and the third a dictionary of custom headers for the file. {} wrap int Maximum anchor of the rendered code snippet. If it exceeds it, the rendered code will be conveniently formatted on multiple lines. 80 indent str Indentation string used in the generated code. If not defined, the indentation string commonly used in the implementation will be used. None quote_char str Quotation character for strings used in the generated code. \"'\" setup bool, str If True , includes the code needed by an implementation to perform the request. Could be imports of additional modules or intialization of objects, depends on implementation. You can customize this snippet passing a string with the code snippet that you want to include. None teardown str Code snippet to include after the HTTP request code. None oneline bool Render the code in a single line. False seed int Seed used generating random fake values of parameters. Useful if you want to generate the same set of values between multiples code snippets. None locale str Locale used by faker library to localize the faked random values for parameters. None Exceptions: Type Description ValueError Value is not a valid value in their context. TypeError Values does not complaint with the types supported for it. ImportError Python module-function path specified can not be imported successfully. Returns: Type Description str HTTP request code snippet. generate_http_request_md_fenced_code_block \u00b6 from http_request_codegen import generate_http_request_md_fenced_code_block Wraps generate_http_request_code function result in a Markdown fenced code block. Parameters: Name Type Description Default fence_string str Code block fence string used wrapping the code. It does not perform any check about if the fenced string is a \"valid\" markdown code block fence string. '```' **kwargs All other optional arguments are passed to generate_http_request_code function. {} Examples: >>> generate_http_request_md_fenced_code_block ( setup = False ) \"```python \\n req = requests.get('http://localhost') \\n ```\" >>> generate_http_request_md_fenced_code_block ( fence_string = '~~~' , ... setup = False ) \"~~~python \\n req = requests.get('http://localhost') \\n ~~~\" Returns: Type Description str Fenced code block with HTTP request code snippet inside. lazy_name_by_parameter \u00b6 from http_request_codegen import lazy_name_by_parameter Given a dictionary of parameter options, returns the corresponding parameter name built following the rules listed in parameters argument of generate_http_request_code function documentation. The strategy of name building is to check next attributes in given order: name names You can use this function to build the parameters at lower level. This can be used, for example, to append the parameters to an URL generating GET method code snippets if an implementation does by building the parameters as arguments of a function. Parameters: Name Type Description Default parameter_data dict Parameter specification data. It's defined at name and names sections of parameters argument of generate_http_request_code function documentation. required seed int Seed using randomizing names. None Exceptions: Type Description ValueError none of the name or names attributes are defined inside parameter_data dictionary. Examples: >>> lazy_name_by_parameter ({ 'name' : 'foo' }) 'foo' >>> result = lazy_name_by_parameter ({ 'names' : [ 'foo' , 'bar' , 'baz' ]}) >>> result in [ 'foo' , 'bar' , 'baz' ] True Returns: Type Description str Parameter name. lazy_value_by_parameter \u00b6 from http_request_codegen import lazy_value_by_parameter Given a dictionary of parameter options, returns the corresponding value built following the rules listed in parameters argument of generate_http_request_code function documentation. For example, giving {'type': int} as input, the output will be a random number as string. The strategy of value building is to check next attributes in given order: 'value' 'values' 'faker' 'type' If none of the previous attributes are passed will be treated as if {'type': str} has been passed, returning a random word. You can use this function to build the parameters at lower level. This can be used, for example, to append the parameters to an URL generating GET method code snippets if an implementation does by building the parameters as arguments of a function. Parameters: Name Type Description Default parameter_data dict Parameter specification data. It's defined at type , value , values and faker sections of parameters argument as is defined at generate_http_request_code function documentation. required seed int Seed using randomizing values. None locale str Locale used for faker providers. None Examples: >>> lazy_value_by_parameter ({ 'value' : 'foo' }) 'foo' >>> result = lazy_value_by_parameter ({ 'values' : [ 'foo' , 'bar' , 'baz' ]}) >>> result in [ 'foo' , 'bar' , 'baz' ] True >>> result = lazy_value_by_parameter ({ 'type' : 'int' }) >>> result . replace ( '.' , '' , 1 ) . lstrip ( '-' ) . isnumeric () and \\ ... isinstance ( result , str ) True Exceptions: Type Description ImportError 'values' attribute value points to an inexistent Python object. TypeError 'faker' attribute value does not contains a string or Python callable object, or if the 'type' attribute value does not support the defined type. ImportError 'faker' attribute value, when passed as string, points to an inexistent Python object. Returns: Type Description str Parameter value.","title":"Reference"},{"location":"reference/#public-api","text":"","title":"Public API"},{"location":"reference/#generate_http_request_code","text":"from http_request_codegen import generate_http_request_code Generates a code snippet of an HTTP request for a library of a given programming language or a CLI of a program, based on a valid HTTP method and a specification of parameters. There are some peculiarities concerning certain methods: POST Most POST methods implementations render their code snippets different, depending on Content-Types header, including by default some of the most used Content-Types header related behaviours: The default behavior, even if you don't specify it explicitly in the Content-Type header is the generation of an application/x-www-form-urlencoded encoded request. If you want to generate a multipart/form-data encoded request, you need to specify the files to sent using the files argument. If you specifies the Content-Type header application/json , the parameters sent will be adjusted according to the JSON encoded POST request. If you specifies the Content-Type header text/plain , you can only send one parameter and it will be adjusted accordingly following the implementation. Parameters: Name Type Description Default language str Programming language or plataform of the resulting code snippet. See Support to check the supported platforms and programming languages. None impl str Implementation type used for the code snippet. It can be a library, a program, or a language API. See Support to check the supported implementations by language. None method str HTTP method of the generated request. 'GET' url str, iterable, callable URL endpoint of the generated request. Defined as a string, the url will be the string itself. Defined as an iterable, the url will be selected randomly from the iterable. Supports recursivity: until a string is not selected the recursion will not be stopped. Defined as a callable, the url will be the returned value of the callable. Supports recursivity: until a string is returned the recursion will not be stopped. 'http://localhost' headers dict Mapping of request header names and values. {} parameters list List of parameters for the request. Each parameter must be a dictionary. This dictionary defines, for each parameter, what is the parameter name and how are the parameters values generated: name ( str , list , function ): Parameter name. At least one of this or names attributes are required. Defined as a string, the name will be the string itself. Defined as an iterable, the name will be selected randomly from the iterable. Supports recursivity: until a string is not selected the recursion will not be stopped. Defined as a callable, the name will be the returned value of the callable. Supports recursivity: until a string is returned the recursion will not be stopped. names ( str , list , function ): Parameter name. At least one of this or name attributes are required. Defined as an iterable, the name will be selected randomly from the iterable. Supports recursivity: until a string is not selected the recursion will not be stopped. Defined as a string, must be a Python formatted module path following the format 'path.to.module::function' and the return name will be used as the name for the parameter, which is useful if choosing a random value from a list doesn't fit your needs. Defined as a callable, the name will be the returned value of the callable. Supports recursivity: until a string is returned the recursion will not be stopped. type ( str , iterable , callable ): Parameter data type. If not defined and value , values and faker are not defined, will be considered as a string and the value of the parameter will be a random word built using faker library. For some types, other parameter dictionary attributes are supported, documented, if so, in each type. The following parameter data types are supported as attributes of parameters dictionaries, as well as their corresponding names in capital letters: 'str' : Basic string type. Can be defined with the Python builtin type str or the strings 'str' and 'string' . 'int' : Basic integer type. Can be defined with the Python builtin type int , or the strings 'int' and 'integer' . As default will be an integer in the range -65536 to 65536. The minimum and maximum values can be defined with min and max parameter optional attributes. 'float' : Floating point number type. Can be defined with the Python builtin type float , or the strings 'float' and number . As default will be in the range -65536 to 65536. The minimum and maximum values can be defined with min and max parameter optional attributes and can be rounded with round Python builtin function using round parameter optional attribute. 'bool' : Basic boolean type. Can be defined with the Python builtin type bool , or the strings 'bool' and 'boolean' . Returns as parameter value one of the strings 'true' or 'false' . If you pass the optional parameter attribute null as True , the string 'null' can also be returned. 'uuid' : Unique identifier type. Can be defined with the Python type uuid.UUID , or the strings 'uuid' and 'uuid4' . It's a unique identifier v4 encoded as hexadecimal string. 'id' : Basic integer id. It's a positive integer in the range 1 to 65536. The maximum value can be defined by optional max attribute. 'random' : Random type between the available types. You can define a set of possible types passing an iterable to types optional parameter attribute. Defined as an iterable or callable, the type will be selected randomly from the iterable, or the returned value from the callable will be used. This allows you to select a random type from a list of custom predefined types. value ( str , iterable , callable ): Parameter value. If not defined and type , values and faker are not defined, the value of the parameter will be a random word built using faker library. Defined as a string, the value will be the string itself. Defined as an iterable, the value will be selected randomly from the iterable. Supports recursivity: until a string is not selected the recursion will not be stopped. Defined as a callable, the value will be the returned value of the callable. Supports recursivity: until a string is returned the recursion will not be stopped. values ( list , iterable , callable ): Possible parameter values. Defined as an iterable, the value will be selected randomly from the iterable. Supports recursivity: until a string is not selected the recursion will not be stopped. Defined as a string, must be a Python formatted module path following the format 'path.to.module::function' and the return value will be used as the value for the parameter, which is useful if choosing a random value from a list doesn't fit your needs. Defined as a callable, the value will be the returned value of the callable. Supports recursivity: until a string is returned the recursion will not be stopped. faker ( str , function ): Python formatted module path to a function of a Faker provider used to build the value randomized. Can be a standard, external provider or any function, but if is not a provider, seed and locale will not have effect. Defined as a string must follow the format 'path.to.provider.module::function' . [] files dict Mapping of files to send to URL. Only has effect for POST methods. If you define this argument, the Content-Type header of the request will be assumed to be 'multipart/form-data' , but only will be explicitly specified in the code generated if the implementation needs it. Each value accepts a string, None or a tuple: Defined as a string, must be the filepath of the file to be sent. Defined as None , the filepath will be randomized using faker.providers.file::file_path function. Defined as a tuple, the first value must be the filepath of the file to be sent (if None will be a randomized filepath), the second value the content-type of the file and the third a dictionary of custom headers for the file. {} wrap int Maximum anchor of the rendered code snippet. If it exceeds it, the rendered code will be conveniently formatted on multiple lines. 80 indent str Indentation string used in the generated code. If not defined, the indentation string commonly used in the implementation will be used. None quote_char str Quotation character for strings used in the generated code. \"'\" setup bool, str If True , includes the code needed by an implementation to perform the request. Could be imports of additional modules or intialization of objects, depends on implementation. You can customize this snippet passing a string with the code snippet that you want to include. None teardown str Code snippet to include after the HTTP request code. None oneline bool Render the code in a single line. False seed int Seed used generating random fake values of parameters. Useful if you want to generate the same set of values between multiples code snippets. None locale str Locale used by faker library to localize the faked random values for parameters. None Exceptions: Type Description ValueError Value is not a valid value in their context. TypeError Values does not complaint with the types supported for it. ImportError Python module-function path specified can not be imported successfully. Returns: Type Description str HTTP request code snippet.","title":"generate_http_request_code"},{"location":"reference/#generate_http_request_md_fenced_code_block","text":"from http_request_codegen import generate_http_request_md_fenced_code_block Wraps generate_http_request_code function result in a Markdown fenced code block. Parameters: Name Type Description Default fence_string str Code block fence string used wrapping the code. It does not perform any check about if the fenced string is a \"valid\" markdown code block fence string. '```' **kwargs All other optional arguments are passed to generate_http_request_code function. {} Examples: >>> generate_http_request_md_fenced_code_block ( setup = False ) \"```python \\n req = requests.get('http://localhost') \\n ```\" >>> generate_http_request_md_fenced_code_block ( fence_string = '~~~' , ... setup = False ) \"~~~python \\n req = requests.get('http://localhost') \\n ~~~\" Returns: Type Description str Fenced code block with HTTP request code snippet inside.","title":"generate_http_request_md_fenced_code_block"},{"location":"reference/#lazy_name_by_parameter","text":"from http_request_codegen import lazy_name_by_parameter Given a dictionary of parameter options, returns the corresponding parameter name built following the rules listed in parameters argument of generate_http_request_code function documentation. The strategy of name building is to check next attributes in given order: name names You can use this function to build the parameters at lower level. This can be used, for example, to append the parameters to an URL generating GET method code snippets if an implementation does by building the parameters as arguments of a function. Parameters: Name Type Description Default parameter_data dict Parameter specification data. It's defined at name and names sections of parameters argument of generate_http_request_code function documentation. required seed int Seed using randomizing names. None Exceptions: Type Description ValueError none of the name or names attributes are defined inside parameter_data dictionary. Examples: >>> lazy_name_by_parameter ({ 'name' : 'foo' }) 'foo' >>> result = lazy_name_by_parameter ({ 'names' : [ 'foo' , 'bar' , 'baz' ]}) >>> result in [ 'foo' , 'bar' , 'baz' ] True Returns: Type Description str Parameter name.","title":"lazy_name_by_parameter"},{"location":"reference/#lazy_value_by_parameter","text":"from http_request_codegen import lazy_value_by_parameter Given a dictionary of parameter options, returns the corresponding value built following the rules listed in parameters argument of generate_http_request_code function documentation. For example, giving {'type': int} as input, the output will be a random number as string. The strategy of value building is to check next attributes in given order: 'value' 'values' 'faker' 'type' If none of the previous attributes are passed will be treated as if {'type': str} has been passed, returning a random word. You can use this function to build the parameters at lower level. This can be used, for example, to append the parameters to an URL generating GET method code snippets if an implementation does by building the parameters as arguments of a function. Parameters: Name Type Description Default parameter_data dict Parameter specification data. It's defined at type , value , values and faker sections of parameters argument as is defined at generate_http_request_code function documentation. required seed int Seed using randomizing values. None locale str Locale used for faker providers. None Examples: >>> lazy_value_by_parameter ({ 'value' : 'foo' }) 'foo' >>> result = lazy_value_by_parameter ({ 'values' : [ 'foo' , 'bar' , 'baz' ]}) >>> result in [ 'foo' , 'bar' , 'baz' ] True >>> result = lazy_value_by_parameter ({ 'type' : 'int' }) >>> result . replace ( '.' , '' , 1 ) . lstrip ( '-' ) . isnumeric () and \\ ... isinstance ( result , str ) True Exceptions: Type Description ImportError 'values' attribute value points to an inexistent Python object. TypeError 'faker' attribute value does not contains a string or Python callable object, or if the 'type' attribute value does not support the defined type. ImportError 'faker' attribute value, when passed as string, points to an inexistent Python object. Returns: Type Description str Parameter value.","title":"lazy_value_by_parameter"},{"location":"es/","text":"http-request-codegen genera trozos de c\u00f3digo de peticiones HTTP para diferentes implementaciones. Es perfecto si quieres incluir ejemplos documentando APIs. Soporta las siguientes caracter\u00edsticas: Aleatorizaci\u00f3n de par\u00e1metros de peticiones usando m\u00faltiples estrategias: Valores aleatorios desde iterables y ejecutables. Valores aleatorios seg\u00fan tipo de datos. Valores aleatorios desde proveedores Faker . Aleatorizaci\u00f3n usando semillas y localizaci\u00f3n. Personalizaci\u00f3n de encabezados de peticiones. Argumentos opcionales de peticiones por implementaci\u00f3n. Envoltura de l\u00ednea personalizada. Indentaci\u00f3n personalizada. Personalizaci\u00f3n de caracteres de cadenas. Renderizado en una l\u00ednea. Recuerda Esto no es una API de m\u00e1s alto nivel entre muchas bibliotecas de peticiones HTTP, pero est\u00e1 escrita de tal forma que puedes generar los tipos de peticiones HTTP m\u00e1s comunes independientemente de la implementaci\u00f3n. Instalaci\u00f3n \u00b6 pip pip install http-request-codegen pipenv pipenv install http-request-codegen source git clone https://github.com/mondeja/http-request-codegen.git --depth = 1 cd http-request-codegen python setup.py install development git clone https://github.com/mondeja/http-request-codegen.git cd http-request-codegen pip install -e . [ dev ] Demostraci\u00f3n \u00b6 Javascript fetch GET Entrada import fake_module from http_request_codegen import generate_http_request_code generate_http_request_code ( language = 'javascript' , impl = 'fetch' , method = 'GET' , url = 'https://github.com/mondeja/http-request-codegen' , headers = { 'Content-Type' : 'application/json' , 'Accept-Language' : '*' }, seed = 4762 , parameters = [ { 'name' : 'fixed-value' , 'value' : 3 }, { 'name' : 'dinamic-value-by-iterable' , 'value' : [ 1 , 2 , 3 ] # same as 'values': [1, 2, 3] }, { 'name' : 'dinamic-value-by-function' , 'value' : fake_module . integers_from_1_to_10 }, # Parameter value randomization { 'name' : 'random-values-by-iterable' , 'values' : [ 'foo' , 'bar' , 'baz' ] }, { 'name' : 'random-values-by-function' , 'values' : fake_module . integers_from_1_to_10 }, { 'name' : 'random-values-by-function-path' , 'values' : 'fake_module::integers_from_1_to_10' }, { 'name' : 'random-value-by-faker-provider-function-path' , 'faker' : 'faker.providers.job::job' }, { 'name' : 'random-string' , # by default: random word 'type' : 'str' }, { 'name' : 'random-integer' , 'type' : 'int' , }, { 'name' : 'random-integer-in-range' , 'type' : int , # You can use Python types also 'min' : 2 , 'max' : 5 , }, { 'name' : 'random-float' , 'type' : 'number' , # You can use some type aliases also }, { 'name' : 'random-rounded-float-in-range' , 'type' : float , 'min' : 1.555 , 'max' : 2.555 , 'round' : 3 }, { 'name' : 'random-boolean' , 'type' : bool }, { 'name' : 'random-boolean-nullable' , 'type' : 'boolean' , 'null' : True }, { 'name' : 'random-type' , 'type' : 'random' # random type from availables }, { 'name' : 'random-unique-identifier' , 'type' : 'uuid' }, { 'name' : 'random-id' , # positive integer 'type' : 'id' }, # Parameter name randomization { 'name' : [ 'random-name-from-iterable' , 'random-name-by-iterable' ], 'type' : 'str' , }, { 'name' : fake_module . random_name_by_function , 'type' : 'random' , }, ] ) Esta implementaci\u00f3n emular\u00e1 a la API fetch de los navegadores por defecto, usando procesamiento de respuestas mediante promesas. Si quieres simular un entorno NodeJS, pasa el par\u00e1metro setup como True y el siguiente trozo de inicializaci\u00f3n ser\u00e1 colocado al principio del c\u00f3digo generado: const fetch = require ( 'node-fetch' ); Para simulaci\u00f3n de importaciones ESM usa setup='import fetch from \\'node-fetch\\';\\n\\n' , por lo que el c\u00f3digo de inicializaci\u00f3n ser\u00e1: import fetch from 'node-fetch' ; Por supuesto, puedes personalizar esta inicializaci\u00f3n para otros entornos. Por ejemplo, hacer un polyfill a la API usando whatwg como m\u00f3dulo ESM usando setup='import \\'whatwg-fetch\\';\\n\\n' : import 'whatwg-fetch' ; Salida fetch ( 'https://github.com/mondeja/http-request-codegen?fixed-value=3&dinamic-value' + '-by-iterable=2&dinamic-value-by-function=7&random-values-by-iterable=bar&' + 'random-values-by-function=7&random-values-by-function-path=7&random-value' + '-by-faker-provider-function-path=Radiation+protection+practitioner&random' + '-string=program&random-integer=61115&random-integer-in-range=5&random-flo' + 'at=-2210.249383058661&random-rounded-float-in-range=2.038&random-boolean=' + 'false&random-boolean-nullable=false&random-type=give&random-unique-identi' + 'fier=f9f75dd406bf477abb6362dbc41aceeb&random-id=63326&random-name-by-iter' + 'able=eat&random-name-by-function=claim' , { headers : { 'Content-Type' : 'application/json' , 'Accept-Language' : '*' } } ). then ( function ( response ) { console . log ( response ); }). catch ( function ( err ) { console . error ( 'Error:' , err ); }); POST application/x-www-form-urlencoded Entrada import fake_module from http_request_codegen import generate_http_request_code generate_http_request_code ( language = 'javascript' , impl = 'fetch' , method = 'POST' , url = 'https://github.com/mondeja/http-request-codegen' , headers = { 'Accept-Language' : '*' , 'Accept-Charset' : 'utf-8' }, seed = 4762 , parameters = [ { 'name' : 'fixed-value' , 'value' : 3 }, { 'name' : 'dinamic-value-by-iterable' , 'value' : [ 1 , 2 , 3 ] # same as 'values': [1, 2, 3] }, { 'name' : 'dinamic-value-by-function' , 'value' : fake_module . integers_from_1_to_10 }, # Parameter value randomization { 'name' : 'random-values-by-iterable' , 'values' : [ 'foo' , 'bar' , 'baz' ] }, { 'name' : 'random-values-by-function' , 'values' : fake_module . integers_from_1_to_10 }, { 'name' : 'random-values-by-function-path' , 'values' : 'fake_module::integers_from_1_to_10' }, { 'name' : 'random-value-by-faker-provider-function-path' , 'faker' : 'faker.providers.job::job' }, { 'name' : 'random-string' , # by default: random word 'type' : 'str' }, { 'name' : 'random-integer' , 'type' : 'int' , }, { 'name' : 'random-integer-in-range' , 'type' : int , # You can use Python types also 'min' : 2 , 'max' : 5 , }, { 'name' : 'random-float' , 'type' : 'number' , # You can use some type aliases also }, { 'name' : 'random-rounded-float-in-range' , 'type' : float , 'min' : 1.555 , 'max' : 2.555 , 'round' : 3 }, { 'name' : 'random-boolean' , 'type' : bool }, { 'name' : 'random-boolean-nullable' , 'type' : 'boolean' , 'null' : True }, { 'name' : 'random-type' , 'type' : 'random' # random type from availables }, { 'name' : 'random-unique-identifier' , 'type' : 'uuid' }, { 'name' : 'random-id' , # positive integer 'type' : 'id' }, # Parameter name randomization { 'name' : [ 'random-name-from-iterable' , 'random-name-by-iterable' ], 'type' : 'str' , }, { 'name' : fake_module . random_name_by_function , 'type' : 'random' , }, ] ) Salida const fetch = require ( 'node-fetch' ); fetch ( 'https://github.com/mondeja/http-request-codegen' , { method : 'POST' , body : new URLSearchParams ({ 'fixed-value' : '3' , 'dinamic-value-by-iterable' : '2' , 'dinamic-value-by-function' : '7' , 'random-values-by-iterable' : 'bar' , 'random-values-by-function' : '7' , 'random-values-by-function-path' : '7' , 'random-value-by-faker-provider-function-path' : 'Paramedic' , 'random-string' : 'police' , 'random-integer' : '61115' , 'random-integer-in-range' : '5' , 'random-float' : '-2210.249383058661' , 'random-rounded-float-in-range' : '2.038' , 'random-boolean' : 'false' , 'random-boolean-nullable' : 'false' , 'random-type' : 'house' , 'random-unique-identifier' : '3a1627210bc5440d8edb6c43fb27e40c' , 'random-id' : '63326' , 'random-name-by-iterable' : 'claim' , 'random-name-by-function' : 'fly' }), headers : { 'Accept-Language' : '*' , 'Accept-Charset' : 'utf-8' } } ). then ( function ( response ) { console . log ( response ); }). catch ( function ( err ) { console . error ( 'Error:' , err ); }); multipart/form-data Entrada from http_request_codegen import generate_http_request_code generate_http_request_code ( language = 'javascript' , impl = 'fetch' , method = 'POST' , url = 'https://github.com/mondeja/http-request-codegen' , headers = { 'Accept-Language' : '*' , 'Accept-Charset' : 'utf-8' }, seed = 4762 , files = { 'fixed-filepath' : '/tmp/foo.txt' , 'random-filepath' : None , 'fixed-filepath-content-type' : ( '/tmp/bar.csv' , 'text/csv' ), 'fixed-filepath-ct-header' : ( '/tmp/bar.json' , 'application/json' , { 'Accept-Charset' : 'utf-8' } ), 'random-filepath-content-type' : ( None , 'text/plain' ), 'random-filepath-ct-header' : ( None , 'text/csv' , { 'Accept-Charset' : 'utf-8' } ) } ) Salida const fs = require ( 'fs' ); const fetch = require ( 'node-fetch' ); const FormData = require ( 'form-data' ); const formData = new FormData (); formData . append ( 'fixed-filepath' , fs . createReadStream ( '/tmp/foo.txt' ), { filename : 'foo.txt' } ); formData . append ( 'random-filepath' , fs . createReadStream ( '/someone/themselves.avi' ), { filename : 'themselves.avi' } ); formData . append ( 'fixed-filepath-content-type' , fs . createReadStream ( '/tmp/bar.csv' ), { filename : 'bar.csv' , contentType : 'text/csv' } ); formData . append ( 'fixed-filepath-ct-header' , fs . createReadStream ( '/tmp/bar.json' ), { filename : 'bar.json' , contentType : 'application/json' } ); formData . append ( 'random-filepath-content-type' , fs . createReadStream ( '/structure/story.tiff' ), { filename : 'story.tiff' , contentType : 'text/plain' } ); formData . append ( 'random-filepath-ct-header' , fs . createReadStream ( '/response/help.json' ), { filename : 'help.json' , contentType : 'text/csv' } ); fetch ( 'https://github.com/mondeja/http-request-codegen' , { method : 'POST' , body : formData , headers : { 'Accept-Language' : '*' , 'Accept-Charset' : 'utf-8' } } ). then ( function ( response ) { console . log ( response ); }). catch ( function ( err ) { console . error ( 'Error:' , err ); }); application/json Entrada import fake_module from http_request_codegen import generate_http_request_code generate_http_request_code ( language = 'javascript' , impl = 'fetch' , method = 'POST' , url = 'https://github.com/mondeja/http-request-codegen' , headers = { 'Content-Type' : 'application/json' }, seed = 4762 , parameters = [ { 'name' : 'fixed-value' , 'value' : 3 }, { 'name' : 'dinamic-value-by-iterable' , 'value' : [ 1 , 2 , 3 ] # same as 'values': [1, 2, 3] }, { 'name' : 'dinamic-value-by-function' , 'value' : fake_module . integers_from_1_to_10 }, # Parameter value randomization { 'name' : 'random-values-by-iterable' , 'values' : [ 'foo' , 'bar' , 'baz' ] }, { 'name' : 'random-values-by-function' , 'values' : fake_module . integers_from_1_to_10 }, { 'name' : 'random-values-by-function-path' , 'values' : 'fake_module::integers_from_1_to_10' }, { 'name' : 'random-value-by-faker-provider-function-path' , 'faker' : 'faker.providers.job::job' }, { 'name' : 'random-string' , # by default: random word 'type' : 'str' }, { 'name' : 'random-integer' , 'type' : 'int' , }, { 'name' : 'random-integer-in-range' , 'type' : int , # You can use Python types also 'min' : 2 , 'max' : 5 , }, { 'name' : 'random-float' , 'type' : 'number' , # You can use some type aliases also }, { 'name' : 'random-rounded-float-in-range' , 'type' : float , 'min' : 1.555 , 'max' : 2.555 , 'round' : 3 }, { 'name' : 'random-boolean' , 'type' : bool }, { 'name' : 'random-boolean-nullable' , 'type' : 'boolean' , 'null' : True }, { 'name' : 'random-type' , 'type' : 'random' # random type from availables }, { 'name' : 'random-unique-identifier' , 'type' : 'uuid' }, { 'name' : 'random-id' , # positive integer 'type' : 'id' }, # Parameter name randomization { 'name' : [ 'random-name-from-iterable' , 'random-name-by-iterable' ], 'type' : 'str' , }, { 'name' : fake_module . random_name_by_function , 'type' : 'random' , }, ] ) Salida const fetch = require ( 'node-fetch' ); fetch ( 'https://github.com/mondeja/http-request-codegen' , { method : 'POST' , body : JSON . stringify ({ 'fixed-value' : '3' , 'dinamic-value-by-iterable' : '2' , 'dinamic-value-by-function' : '7' , 'random-values-by-iterable' : 'bar' , 'random-values-by-function' : '7' , 'random-values-by-function-path' : '7' , 'random-value-by-faker-provider-function-path' : 'Print production planne' + 'r' , 'random-string' : 'land' , 'random-integer' : '61115' , 'random-integer-in-range' : '5' , 'random-float' : '-2210.249383058661' , 'random-rounded-float-in-range' : '2.038' , 'random-boolean' : 'false' , 'random-boolean-nullable' : 'false' , 'random-type' : 'ago' , 'random-unique-identifier' : 'db962bff86af4f4b9ad499b8140e716b' , 'random-id' : '63326' , 'random-name-by-iterable' : 'hot' , 'random-name-by-function' : 'environmental' }), headers : { 'Content-Type' : 'application/json' } } ). then ( function ( response ) { console . log ( response ); }). catch ( function ( err ) { console . error ( 'Error:' , err ); }); text/plain Entrada from http_request_codegen import generate_http_request_code generate_http_request_code ( language = 'javascript' , impl = 'fetch' , method = 'POST' , url = 'https://github.com/mondeja/http-request-codegen' , headers = { 'Content-Type' : 'text/plain' }, seed = 4762 , parameters = [ { 'name' : 'random-values-by-iterable' , 'values' : [ 'foo' , 'bar' , 'baz' ] } ] ) Salida const fetch = require ( 'node-fetch' ); fetch ( 'https://github.com/mondeja/http-request-codegen' , { method : 'POST' , body : 'bar' , headers : { 'Content-Type' : 'text/plain' } } ). then ( function ( response ) { console . log ( response ); }). catch ( function ( err ) { console . error ( 'Error:' , err ); }); Python requests GET Entrada import fake_module from http_request_codegen import generate_http_request_code generate_http_request_code ( language = 'python' , impl = 'requests' , method = 'GET' , url = 'https://github.com/mondeja/http-request-codegen' , headers = { 'Content-Type' : 'application/json' , 'Accept-Language' : '*' }, seed = 4762 , parameters = [ { 'name' : 'fixed-value' , 'value' : 3 }, { 'name' : 'dinamic-value-by-iterable' , 'value' : [ 1 , 2 , 3 ] # same as 'values': [1, 2, 3] }, { 'name' : 'dinamic-value-by-function' , 'value' : fake_module . integers_from_1_to_10 }, # Parameter value randomization { 'name' : 'random-values-by-iterable' , 'values' : [ 'foo' , 'bar' , 'baz' ] }, { 'name' : 'random-values-by-function' , 'values' : fake_module . integers_from_1_to_10 }, { 'name' : 'random-values-by-function-path' , 'values' : 'fake_module::integers_from_1_to_10' }, { 'name' : 'random-value-by-faker-provider-function-path' , 'faker' : 'faker.providers.job::job' }, { 'name' : 'random-string' , # by default: random word 'type' : 'str' }, { 'name' : 'random-integer' , 'type' : 'int' , }, { 'name' : 'random-integer-in-range' , 'type' : int , # You can use Python types also 'min' : 2 , 'max' : 5 , }, { 'name' : 'random-float' , 'type' : 'number' , # You can use some type aliases also }, { 'name' : 'random-rounded-float-in-range' , 'type' : float , 'min' : 1.555 , 'max' : 2.555 , 'round' : 3 }, { 'name' : 'random-boolean' , 'type' : bool }, { 'name' : 'random-boolean-nullable' , 'type' : 'boolean' , 'null' : True }, { 'name' : 'random-type' , 'type' : 'random' # random type from availables }, { 'name' : 'random-unique-identifier' , 'type' : 'uuid' }, { 'name' : 'random-id' , # positive integer 'type' : 'id' }, # Parameter name randomization { 'name' : [ 'random-name-from-iterable' , 'random-name-by-iterable' ], 'type' : 'str' , }, { 'name' : fake_module . random_name_by_function , 'type' : 'random' , }, ] ) Los par\u00e1metros son pasados usando el par\u00e1metro params de la funci\u00f3n requests.get , no a\u00f1adiendo ?foo=bar&... a la URL. Si quieres este comportamiento, construye la URL pasada usando las funciones lazy_name_by_parameter y lazy_value_by_parameter en lugar de usar el argumento parameters . Si quieres importar m\u00e1s m\u00f3dulos en el c\u00f3digo de inicializaci\u00f3n, ten en cuenta que debes proveer import requests en el argumento setup . Por ejemplo, setup='import requests\\nimport foo\\n\\n' renderizar\u00e1 como: import requests import foo requests . get ( '<url>' ... Salida import requests req = requests . get ( 'https://github.com/mondeja/http-request-codegen' , params = { 'fixed-value' : '3' , 'dinamic-value-by-iterable' : '2' , 'dinamic-value-by-function' : '7' , 'random-values-by-iterable' : 'bar' , 'random-values-by-function' : '7' , 'random-values-by-function-path' : '7' , 'random-value-by-faker-provider-function-path' : 'Ergonomist' , 'random-string' : 'top' , 'random-integer' : '61115' , 'random-integer-in-range' : '5' , 'random-float' : '-2210.249383058661' , 'random-rounded-float-in-range' : '2.038' , 'random-boolean' : 'false' , 'random-boolean-nullable' : 'false' , 'random-type' : 'push' , 'random-unique-identifier' : '8632e25293a34491b216494b49d918d3' , 'random-id' : '63326' , 'random-name-by-iterable' : 'much' , 'random-name-by-function' : 'decision' }, headers = { 'Content-Type' : 'application/json' , 'Accept-Language' : '*' } ) POST application/x-www-form-urlencoded Entrada import fake_module from http_request_codegen import generate_http_request_code generate_http_request_code ( language = 'python' , impl = 'requests' , method = 'POST' , url = 'https://github.com/mondeja/http-request-codegen' , headers = { 'Accept-Language' : '*' , 'Accept-Charset' : 'utf-8' }, seed = 4762 , parameters = [ { 'name' : 'fixed-value' , 'value' : 3 }, { 'name' : 'dinamic-value-by-iterable' , 'value' : [ 1 , 2 , 3 ] # same as 'values': [1, 2, 3] }, { 'name' : 'dinamic-value-by-function' , 'value' : fake_module . integers_from_1_to_10 }, # Parameter value randomization { 'name' : 'random-values-by-iterable' , 'values' : [ 'foo' , 'bar' , 'baz' ] }, { 'name' : 'random-values-by-function' , 'values' : fake_module . integers_from_1_to_10 }, { 'name' : 'random-values-by-function-path' , 'values' : 'fake_module::integers_from_1_to_10' }, { 'name' : 'random-value-by-faker-provider-function-path' , 'faker' : 'faker.providers.job::job' }, { 'name' : 'random-string' , # by default: random word 'type' : 'str' }, { 'name' : 'random-integer' , 'type' : 'int' , }, { 'name' : 'random-integer-in-range' , 'type' : int , # You can use Python types also 'min' : 2 , 'max' : 5 , }, { 'name' : 'random-float' , 'type' : 'number' , # You can use some type aliases also }, { 'name' : 'random-rounded-float-in-range' , 'type' : float , 'min' : 1.555 , 'max' : 2.555 , 'round' : 3 }, { 'name' : 'random-boolean' , 'type' : bool }, { 'name' : 'random-boolean-nullable' , 'type' : 'boolean' , 'null' : True }, { 'name' : 'random-type' , 'type' : 'random' # random type from availables }, { 'name' : 'random-unique-identifier' , 'type' : 'uuid' }, { 'name' : 'random-id' , # positive integer 'type' : 'id' }, # Parameter name randomization { 'name' : [ 'random-name-from-iterable' , 'random-name-by-iterable' ], 'type' : 'str' , }, { 'name' : fake_module . random_name_by_function , 'type' : 'random' , }, ] ) Salida import requests req = requests . post ( 'https://github.com/mondeja/http-request-codegen' , data = { 'fixed-value' : '3' , 'dinamic-value-by-iterable' : '2' , 'dinamic-value-by-function' : '7' , 'random-values-by-iterable' : 'bar' , 'random-values-by-function' : '7' , 'random-values-by-function-path' : '7' , 'random-value-by-faker-provider-function-path' : 'Fashion designer' , 'random-string' : 'as' , 'random-integer' : '61115' , 'random-integer-in-range' : '5' , 'random-float' : '-2210.249383058661' , 'random-rounded-float-in-range' : '2.038' , 'random-boolean' : 'false' , 'random-boolean-nullable' : 'false' , 'random-type' : 'machine' , 'random-unique-identifier' : 'b3fdec3a00294b77b7b3e9e45a296883' , 'random-id' : '63326' , 'random-name-by-iterable' : 'doctor' , 'random-name-by-function' : 'within' }, headers = { 'Accept-Language' : '*' , 'Accept-Charset' : 'utf-8' } ) multipart/form-data Entrada from http_request_codegen import generate_http_request_code generate_http_request_code ( language = 'python' , impl = 'requests' , method = 'POST' , url = 'https://github.com/mondeja/http-request-codegen' , headers = { 'Accept-Language' : '*' , 'Accept-Charset' : 'utf-8' }, seed = 4762 , files = { 'fixed-filepath' : '/tmp/foo.txt' , 'random-filepath' : None , 'fixed-filepath-content-type' : ( '/tmp/bar.csv' , 'text/csv' ), 'fixed-filepath-ct-header' : ( '/tmp/bar.json' , 'application/json' , { 'Accept-Charset' : 'utf-8' } ), 'random-filepath-content-type' : ( None , 'text/plain' ), 'random-filepath-ct-header' : ( None , 'text/csv' , { 'Accept-Charset' : 'utf-8' } ) } ) Salida import requests req = requests . post ( 'https://github.com/mondeja/http-request-codegen' , files = { 'fixed-filepath' : ( '/tmp/foo.txt' , open ( '/tmp/foo.txt' , 'rb' ) ), 'random-filepath' : ( '/receive/city.numbers' , open ( '/receive/city.numbers' , 'rb' ) ), 'fixed-filepath-content-type' : ( '/tmp/bar.csv' , open ( '/tmp/bar.csv' , 'rb' ), 'text/csv' ), 'fixed-filepath-ct-header' : ( '/tmp/bar.json' , open ( '/tmp/bar.json' , 'rb' ), 'application/json' , { 'Accept-Charset' : 'utf-8' } ), 'random-filepath-content-type' : ( '/either/few.key' , open ( '/either/few.key' , 'rb' ), 'text/plain' ), 'random-filepath-ct-header' : ( '/increase/strategy.json' , open ( '/increase/strategy.json' , 'rb' ), 'text/csv' , { 'Accept-Charset' : 'utf-8' } ) }, headers = { 'Accept-Language' : '*' , 'Accept-Charset' : 'utf-8' } ) application/json Entrada import fake_module from http_request_codegen import generate_http_request_code generate_http_request_code ( language = 'python' , impl = 'requests' , method = 'POST' , url = 'https://github.com/mondeja/http-request-codegen' , headers = { 'Content-Type' : 'application/json' }, seed = 4762 , parameters = [ { 'name' : 'fixed-value' , 'value' : 3 }, { 'name' : 'dinamic-value-by-iterable' , 'value' : [ 1 , 2 , 3 ] # same as 'values': [1, 2, 3] }, { 'name' : 'dinamic-value-by-function' , 'value' : fake_module . integers_from_1_to_10 }, # Parameter value randomization { 'name' : 'random-values-by-iterable' , 'values' : [ 'foo' , 'bar' , 'baz' ] }, { 'name' : 'random-values-by-function' , 'values' : fake_module . integers_from_1_to_10 }, { 'name' : 'random-values-by-function-path' , 'values' : 'fake_module::integers_from_1_to_10' }, { 'name' : 'random-value-by-faker-provider-function-path' , 'faker' : 'faker.providers.job::job' }, { 'name' : 'random-string' , # by default: random word 'type' : 'str' }, { 'name' : 'random-integer' , 'type' : 'int' , }, { 'name' : 'random-integer-in-range' , 'type' : int , # You can use Python types also 'min' : 2 , 'max' : 5 , }, { 'name' : 'random-float' , 'type' : 'number' , # You can use some type aliases also }, { 'name' : 'random-rounded-float-in-range' , 'type' : float , 'min' : 1.555 , 'max' : 2.555 , 'round' : 3 }, { 'name' : 'random-boolean' , 'type' : bool }, { 'name' : 'random-boolean-nullable' , 'type' : 'boolean' , 'null' : True }, { 'name' : 'random-type' , 'type' : 'random' # random type from availables }, { 'name' : 'random-unique-identifier' , 'type' : 'uuid' }, { 'name' : 'random-id' , # positive integer 'type' : 'id' }, # Parameter name randomization { 'name' : [ 'random-name-from-iterable' , 'random-name-by-iterable' ], 'type' : 'str' , }, { 'name' : fake_module . random_name_by_function , 'type' : 'random' , }, ] ) Salida import requests req = requests . post ( 'https://github.com/mondeja/http-request-codegen' , json = { 'fixed-value' : 3 , 'dinamic-value-by-iterable' : '2' , 'dinamic-value-by-function' : '7' , 'random-values-by-iterable' : 'bar' , 'random-values-by-function' : '7' , 'random-values-by-function-path' : '7' , 'random-value-by-faker-provider-function-path' : 'Statistician' , 'random-string' : 'buy' , 'random-integer' : '61115' , 'random-integer-in-range' : '5' , 'random-float' : '-2210.249383058661' , 'random-rounded-float-in-range' : '2.038' , 'random-boolean' : 'false' , 'random-boolean-nullable' : 'false' , 'random-type' : 'image' , 'random-unique-identifier' : 'ce9f472d5964448d98fcf7a3dd3a5d3c' , 'random-id' : '63326' , 'random-name-by-iterable' : 'give' , 'random-name-by-function' : 'health' }, headers = { 'Content-Type' : 'application/json' } ) text/plain Entrada from http_request_codegen import generate_http_request_code generate_http_request_code ( language = 'python' , impl = 'requests' , method = 'POST' , url = 'https://github.com/mondeja/http-request-codegen' , headers = { 'Content-Type' : 'text/plain' }, seed = 4762 , parameters = [ { 'name' : 'random-values-by-iterable' , 'values' : [ 'foo' , 'bar' , 'baz' ] } ] ) Salida import requests req = requests . post ( 'https://github.com/mondeja/http-request-codegen' , data = 'bar' , headers = { 'Content-Type' : 'text/plain' } ) Bash curl GET Entrada import fake_module from http_request_codegen import generate_http_request_code generate_http_request_code ( language = 'bash' , impl = 'curl' , method = 'GET' , url = 'https://github.com/mondeja/http-request-codegen' , headers = { 'Content-Type' : 'application/json' , 'Accept-Language' : '*' }, seed = 4762 , parameters = [ { 'name' : 'fixed-value' , 'value' : 3 }, { 'name' : 'dinamic-value-by-iterable' , 'value' : [ 1 , 2 , 3 ] # same as 'values': [1, 2, 3] }, { 'name' : 'dinamic-value-by-function' , 'value' : fake_module . integers_from_1_to_10 }, # Parameter value randomization { 'name' : 'random-values-by-iterable' , 'values' : [ 'foo' , 'bar' , 'baz' ] }, { 'name' : 'random-values-by-function' , 'values' : fake_module . integers_from_1_to_10 }, { 'name' : 'random-values-by-function-path' , 'values' : 'fake_module::integers_from_1_to_10' }, { 'name' : 'random-value-by-faker-provider-function-path' , 'faker' : 'faker.providers.job::job' }, { 'name' : 'random-string' , # by default: random word 'type' : 'str' }, { 'name' : 'random-integer' , 'type' : 'int' , }, { 'name' : 'random-integer-in-range' , 'type' : int , # You can use Python types also 'min' : 2 , 'max' : 5 , }, { 'name' : 'random-float' , 'type' : 'number' , # You can use some type aliases also }, { 'name' : 'random-rounded-float-in-range' , 'type' : float , 'min' : 1.555 , 'max' : 2.555 , 'round' : 3 }, { 'name' : 'random-boolean' , 'type' : bool }, { 'name' : 'random-boolean-nullable' , 'type' : 'boolean' , 'null' : True }, { 'name' : 'random-type' , 'type' : 'random' # random type from availables }, { 'name' : 'random-unique-identifier' , 'type' : 'uuid' }, { 'name' : 'random-id' , # positive integer 'type' : 'id' }, # Parameter name randomization { 'name' : [ 'random-name-from-iterable' , 'random-name-by-iterable' ], 'type' : 'str' , }, { 'name' : fake_module . random_name_by_function , 'type' : 'random' , }, ] ) Pasa opciones extra al comando 'curl' en el par\u00e1metro kwargs . Por ejemplo, para guardar la respuesta en un archivo, pasa kwargs={'-o': 'filename.ext'} : curl -o \"filename.ext\" Salida curl \\ -d 'fixed-value=3&dinamic-value-by-iterable=2&dinamic-value-by-function=7&random-values-by-iterable=bar&random-values-by-function=7&random-values-by-function-path=7&random-value-by-faker-provider-function-path=Administrator%2C+charities%2Fvoluntary+organisations&random-string=surface&random-integer=61115&random-integer-in-range=5&random-float=-2210.249383058661&random-rounded-float-in-range=2.038&random-boolean=false&random-boolean-nullable=false&random-type=road&random-unique-identifier=31387ab05be14110acb56166691d1374&random-id=63326&random-name-by-iterable=usually&random-name-by-function=real' \\ -H 'Content-Type: application/json' \\ -H 'Accept-Language: *' \\ https://github.com/mondeja/http-request-codegen POST application/x-www-form-urlencoded Entrada import fake_module from http_request_codegen import generate_http_request_code generate_http_request_code ( language = 'bash' , impl = 'curl' , method = 'POST' , url = 'https://github.com/mondeja/http-request-codegen' , headers = { 'Accept-Language' : '*' , 'Accept-Charset' : 'utf-8' }, seed = 4762 , parameters = [ { 'name' : 'fixed-value' , 'value' : 3 }, { 'name' : 'dinamic-value-by-iterable' , 'value' : [ 1 , 2 , 3 ] # same as 'values': [1, 2, 3] }, { 'name' : 'dinamic-value-by-function' , 'value' : fake_module . integers_from_1_to_10 }, # Parameter value randomization { 'name' : 'random-values-by-iterable' , 'values' : [ 'foo' , 'bar' , 'baz' ] }, { 'name' : 'random-values-by-function' , 'values' : fake_module . integers_from_1_to_10 }, { 'name' : 'random-values-by-function-path' , 'values' : 'fake_module::integers_from_1_to_10' }, { 'name' : 'random-value-by-faker-provider-function-path' , 'faker' : 'faker.providers.job::job' }, { 'name' : 'random-string' , # by default: random word 'type' : 'str' }, { 'name' : 'random-integer' , 'type' : 'int' , }, { 'name' : 'random-integer-in-range' , 'type' : int , # You can use Python types also 'min' : 2 , 'max' : 5 , }, { 'name' : 'random-float' , 'type' : 'number' , # You can use some type aliases also }, { 'name' : 'random-rounded-float-in-range' , 'type' : float , 'min' : 1.555 , 'max' : 2.555 , 'round' : 3 }, { 'name' : 'random-boolean' , 'type' : bool }, { 'name' : 'random-boolean-nullable' , 'type' : 'boolean' , 'null' : True }, { 'name' : 'random-type' , 'type' : 'random' # random type from availables }, { 'name' : 'random-unique-identifier' , 'type' : 'uuid' }, { 'name' : 'random-id' , # positive integer 'type' : 'id' }, # Parameter name randomization { 'name' : [ 'random-name-from-iterable' , 'random-name-by-iterable' ], 'type' : 'str' , }, { 'name' : fake_module . random_name_by_function , 'type' : 'random' , }, ] ) Salida curl \\ -X 'POST' \\ -d 'fixed-value=3&dinamic-value-by-iterable=2&dinamic-value-by-function=7&random-values-by-iterable=bar&random-values-by-function=7&random-values-by-function-path=7&random-value-by-faker-provider-function-path=Designer%2C+textile&random-string=culture&random-integer=61115&random-integer-in-range=5&random-float=-2210.249383058661&random-rounded-float-in-range=2.038&random-boolean=false&random-boolean-nullable=false&random-type=air&random-unique-identifier=522f08111809464b9d2038088d3ffdec&random-id=63326&random-name-by-iterable=though&random-name-by-function=idea' \\ -H 'Accept-Language: *' \\ -H 'Accept-Charset: utf-8' \\ https://github.com/mondeja/http-request-codegen multipart/form-data Entrada from http_request_codegen import generate_http_request_code generate_http_request_code ( language = 'bash' , impl = 'curl' , method = 'POST' , url = 'https://github.com/mondeja/http-request-codegen' , headers = { 'Accept-Language' : '*' , 'Accept-Charset' : 'utf-8' }, seed = 4762 , files = { 'fixed-filepath' : '/tmp/foo.txt' , 'random-filepath' : None , 'fixed-filepath-content-type' : ( '/tmp/bar.csv' , 'text/csv' ), 'fixed-filepath-ct-header' : ( '/tmp/bar.json' , 'application/json' , { 'Accept-Charset' : 'utf-8' } ), 'random-filepath-content-type' : ( None , 'text/plain' ), 'random-filepath-ct-header' : ( None , 'text/csv' , { 'Accept-Charset' : 'utf-8' } ) } ) Salida curl \\ -X 'POST' \\ -F 'fixed-filepath=@/tmp/foo.txt' \\ -F 'random-filepath=@/through/across.txt' \\ -F 'fixed-filepath-content-type=@/tmp/bar.csv' \\ -F 'fixed-filepath-ct-header=@/tmp/bar.json' \\ -F 'random-filepath-content-type=@/south/goal.json' \\ -F 'random-filepath-ct-header=@/again/option.flac' \\ -H 'Accept-Language: *' \\ -H 'Accept-Charset: utf-8' \\ https://github.com/mondeja/http-request-codegen application/json Entrada import fake_module from http_request_codegen import generate_http_request_code generate_http_request_code ( language = 'bash' , impl = 'curl' , method = 'POST' , url = 'https://github.com/mondeja/http-request-codegen' , headers = { 'Content-Type' : 'application/json' }, seed = 4762 , parameters = [ { 'name' : 'fixed-value' , 'value' : 3 }, { 'name' : 'dinamic-value-by-iterable' , 'value' : [ 1 , 2 , 3 ] # same as 'values': [1, 2, 3] }, { 'name' : 'dinamic-value-by-function' , 'value' : fake_module . integers_from_1_to_10 }, # Parameter value randomization { 'name' : 'random-values-by-iterable' , 'values' : [ 'foo' , 'bar' , 'baz' ] }, { 'name' : 'random-values-by-function' , 'values' : fake_module . integers_from_1_to_10 }, { 'name' : 'random-values-by-function-path' , 'values' : 'fake_module::integers_from_1_to_10' }, { 'name' : 'random-value-by-faker-provider-function-path' , 'faker' : 'faker.providers.job::job' }, { 'name' : 'random-string' , # by default: random word 'type' : 'str' }, { 'name' : 'random-integer' , 'type' : 'int' , }, { 'name' : 'random-integer-in-range' , 'type' : int , # You can use Python types also 'min' : 2 , 'max' : 5 , }, { 'name' : 'random-float' , 'type' : 'number' , # You can use some type aliases also }, { 'name' : 'random-rounded-float-in-range' , 'type' : float , 'min' : 1.555 , 'max' : 2.555 , 'round' : 3 }, { 'name' : 'random-boolean' , 'type' : bool }, { 'name' : 'random-boolean-nullable' , 'type' : 'boolean' , 'null' : True }, { 'name' : 'random-type' , 'type' : 'random' # random type from availables }, { 'name' : 'random-unique-identifier' , 'type' : 'uuid' }, { 'name' : 'random-id' , # positive integer 'type' : 'id' }, # Parameter name randomization { 'name' : [ 'random-name-from-iterable' , 'random-name-by-iterable' ], 'type' : 'str' , }, { 'name' : fake_module . random_name_by_function , 'type' : 'random' , }, ] ) Salida curl \\ -X 'POST' \\ -d 'fixed-value=3&dinamic-value-by-iterable=2&dinamic-value-by-function=7&random-values-by-iterable=bar&random-values-by-function=7&random-values-by-function-path=7&random-value-by-faker-provider-function-path=Exhibitions+officer%2C+museum%2Fgallery&random-string=church&random-integer=61115&random-integer-in-range=5&random-float=-2210.249383058661&random-rounded-float-in-range=2.038&random-boolean=false&random-boolean-nullable=false&random-type=against&random-unique-identifier=9e013269fc1b40fa944a2f1b48e49f31&random-id=63326&random-name-by-iterable=music&random-name-by-function=animal' \\ -H 'Content-Type: application/json' \\ https://github.com/mondeja/http-request-codegen text/plain Entrada from http_request_codegen import generate_http_request_code generate_http_request_code ( language = 'bash' , impl = 'curl' , method = 'POST' , url = 'https://github.com/mondeja/http-request-codegen' , headers = { 'Content-Type' : 'text/plain' }, seed = 4762 , parameters = [ { 'name' : 'random-values-by-iterable' , 'values' : [ 'foo' , 'bar' , 'baz' ] } ] ) Salida curl \\ -X 'POST' \\ -d 'random-values-by-iterable=bar' \\ -H 'Content-Type: text/plain' \\ https://github.com/mondeja/http-request-codegen Soporte \u00b6 Javascript fetch GET POST Encabezados \u2705 \u2705 Par\u00e1metros \u2705 \u2705 Localizaci\u00f3n de par\u00e1metros \u2705 \u2705 Semilla de par\u00e1metros \u2705 \u2705 Indentaci\u00f3n personalizada \u2705 \u2705 Personalizaci\u00f3n de caracter de cadena \u2705 \u2705 Renderizado en una l\u00ednea \u2705 \u2705 Inicializaci\u00f3n personalizada \u2705 \u2705 Finalizaci\u00f3n personalizada \u2705 \u2705 M\u00e1ximo ancho de l\u00ednea personalizado \u2705 \u2705 Python requests GET POST Encabezados \u2705 \u2705 Par\u00e1metros \u2705 \u2705 Localizaci\u00f3n de par\u00e1metros \u2705 \u2705 Semilla de par\u00e1metros \u2705 \u2705 Indentaci\u00f3n personalizada \u2705 \u2705 Personalizaci\u00f3n de caracter de cadena \u2705 \u2705 Renderizado en una l\u00ednea \u2705 \u2705 Inicializaci\u00f3n personalizada \u2705 \u2705 Finalizaci\u00f3n personalizada \u2705 \u2705 M\u00e1ximo ancho de l\u00ednea personalizado \u2705 \u2705 Bash curl GET POST Encabezados \u2705 \u2705 Par\u00e1metros \u2705 \u2705 Localizaci\u00f3n de par\u00e1metros \u2705 \u2705 Semilla de par\u00e1metros \u2705 \u2705 Indentaci\u00f3n personalizada \u2705 \u2705 Personalizaci\u00f3n de caracter de cadena \u2705 \u2705 Renderizado en una l\u00ednea \u2705 \u2705 Inicializaci\u00f3n personalizada \u2705 \u2705 Finalizaci\u00f3n personalizada \u2705 \u2705 M\u00e1ximo ancho de l\u00ednea personalizado \u2705 \u2705","title":"Introducci\u00f3n"},{"location":"es/#instalacion","text":"pip pip install http-request-codegen pipenv pipenv install http-request-codegen source git clone https://github.com/mondeja/http-request-codegen.git --depth = 1 cd http-request-codegen python setup.py install development git clone https://github.com/mondeja/http-request-codegen.git cd http-request-codegen pip install -e . [ dev ]","title":"Instalaci\u00f3n"},{"location":"es/#demostracion","text":"Javascript fetch GET Entrada import fake_module from http_request_codegen import generate_http_request_code generate_http_request_code ( language = 'javascript' , impl = 'fetch' , method = 'GET' , url = 'https://github.com/mondeja/http-request-codegen' , headers = { 'Content-Type' : 'application/json' , 'Accept-Language' : '*' }, seed = 4762 , parameters = [ { 'name' : 'fixed-value' , 'value' : 3 }, { 'name' : 'dinamic-value-by-iterable' , 'value' : [ 1 , 2 , 3 ] # same as 'values': [1, 2, 3] }, { 'name' : 'dinamic-value-by-function' , 'value' : fake_module . integers_from_1_to_10 }, # Parameter value randomization { 'name' : 'random-values-by-iterable' , 'values' : [ 'foo' , 'bar' , 'baz' ] }, { 'name' : 'random-values-by-function' , 'values' : fake_module . integers_from_1_to_10 }, { 'name' : 'random-values-by-function-path' , 'values' : 'fake_module::integers_from_1_to_10' }, { 'name' : 'random-value-by-faker-provider-function-path' , 'faker' : 'faker.providers.job::job' }, { 'name' : 'random-string' , # by default: random word 'type' : 'str' }, { 'name' : 'random-integer' , 'type' : 'int' , }, { 'name' : 'random-integer-in-range' , 'type' : int , # You can use Python types also 'min' : 2 , 'max' : 5 , }, { 'name' : 'random-float' , 'type' : 'number' , # You can use some type aliases also }, { 'name' : 'random-rounded-float-in-range' , 'type' : float , 'min' : 1.555 , 'max' : 2.555 , 'round' : 3 }, { 'name' : 'random-boolean' , 'type' : bool }, { 'name' : 'random-boolean-nullable' , 'type' : 'boolean' , 'null' : True }, { 'name' : 'random-type' , 'type' : 'random' # random type from availables }, { 'name' : 'random-unique-identifier' , 'type' : 'uuid' }, { 'name' : 'random-id' , # positive integer 'type' : 'id' }, # Parameter name randomization { 'name' : [ 'random-name-from-iterable' , 'random-name-by-iterable' ], 'type' : 'str' , }, { 'name' : fake_module . random_name_by_function , 'type' : 'random' , }, ] ) Esta implementaci\u00f3n emular\u00e1 a la API fetch de los navegadores por defecto, usando procesamiento de respuestas mediante promesas. Si quieres simular un entorno NodeJS, pasa el par\u00e1metro setup como True y el siguiente trozo de inicializaci\u00f3n ser\u00e1 colocado al principio del c\u00f3digo generado: const fetch = require ( 'node-fetch' ); Para simulaci\u00f3n de importaciones ESM usa setup='import fetch from \\'node-fetch\\';\\n\\n' , por lo que el c\u00f3digo de inicializaci\u00f3n ser\u00e1: import fetch from 'node-fetch' ; Por supuesto, puedes personalizar esta inicializaci\u00f3n para otros entornos. Por ejemplo, hacer un polyfill a la API usando whatwg como m\u00f3dulo ESM usando setup='import \\'whatwg-fetch\\';\\n\\n' : import 'whatwg-fetch' ; Salida fetch ( 'https://github.com/mondeja/http-request-codegen?fixed-value=3&dinamic-value' + '-by-iterable=2&dinamic-value-by-function=7&random-values-by-iterable=bar&' + 'random-values-by-function=7&random-values-by-function-path=7&random-value' + '-by-faker-provider-function-path=Radiation+protection+practitioner&random' + '-string=program&random-integer=61115&random-integer-in-range=5&random-flo' + 'at=-2210.249383058661&random-rounded-float-in-range=2.038&random-boolean=' + 'false&random-boolean-nullable=false&random-type=give&random-unique-identi' + 'fier=f9f75dd406bf477abb6362dbc41aceeb&random-id=63326&random-name-by-iter' + 'able=eat&random-name-by-function=claim' , { headers : { 'Content-Type' : 'application/json' , 'Accept-Language' : '*' } } ). then ( function ( response ) { console . log ( response ); }). catch ( function ( err ) { console . error ( 'Error:' , err ); }); POST application/x-www-form-urlencoded Entrada import fake_module from http_request_codegen import generate_http_request_code generate_http_request_code ( language = 'javascript' , impl = 'fetch' , method = 'POST' , url = 'https://github.com/mondeja/http-request-codegen' , headers = { 'Accept-Language' : '*' , 'Accept-Charset' : 'utf-8' }, seed = 4762 , parameters = [ { 'name' : 'fixed-value' , 'value' : 3 }, { 'name' : 'dinamic-value-by-iterable' , 'value' : [ 1 , 2 , 3 ] # same as 'values': [1, 2, 3] }, { 'name' : 'dinamic-value-by-function' , 'value' : fake_module . integers_from_1_to_10 }, # Parameter value randomization { 'name' : 'random-values-by-iterable' , 'values' : [ 'foo' , 'bar' , 'baz' ] }, { 'name' : 'random-values-by-function' , 'values' : fake_module . integers_from_1_to_10 }, { 'name' : 'random-values-by-function-path' , 'values' : 'fake_module::integers_from_1_to_10' }, { 'name' : 'random-value-by-faker-provider-function-path' , 'faker' : 'faker.providers.job::job' }, { 'name' : 'random-string' , # by default: random word 'type' : 'str' }, { 'name' : 'random-integer' , 'type' : 'int' , }, { 'name' : 'random-integer-in-range' , 'type' : int , # You can use Python types also 'min' : 2 , 'max' : 5 , }, { 'name' : 'random-float' , 'type' : 'number' , # You can use some type aliases also }, { 'name' : 'random-rounded-float-in-range' , 'type' : float , 'min' : 1.555 , 'max' : 2.555 , 'round' : 3 }, { 'name' : 'random-boolean' , 'type' : bool }, { 'name' : 'random-boolean-nullable' , 'type' : 'boolean' , 'null' : True }, { 'name' : 'random-type' , 'type' : 'random' # random type from availables }, { 'name' : 'random-unique-identifier' , 'type' : 'uuid' }, { 'name' : 'random-id' , # positive integer 'type' : 'id' }, # Parameter name randomization { 'name' : [ 'random-name-from-iterable' , 'random-name-by-iterable' ], 'type' : 'str' , }, { 'name' : fake_module . random_name_by_function , 'type' : 'random' , }, ] ) Salida const fetch = require ( 'node-fetch' ); fetch ( 'https://github.com/mondeja/http-request-codegen' , { method : 'POST' , body : new URLSearchParams ({ 'fixed-value' : '3' , 'dinamic-value-by-iterable' : '2' , 'dinamic-value-by-function' : '7' , 'random-values-by-iterable' : 'bar' , 'random-values-by-function' : '7' , 'random-values-by-function-path' : '7' , 'random-value-by-faker-provider-function-path' : 'Paramedic' , 'random-string' : 'police' , 'random-integer' : '61115' , 'random-integer-in-range' : '5' , 'random-float' : '-2210.249383058661' , 'random-rounded-float-in-range' : '2.038' , 'random-boolean' : 'false' , 'random-boolean-nullable' : 'false' , 'random-type' : 'house' , 'random-unique-identifier' : '3a1627210bc5440d8edb6c43fb27e40c' , 'random-id' : '63326' , 'random-name-by-iterable' : 'claim' , 'random-name-by-function' : 'fly' }), headers : { 'Accept-Language' : '*' , 'Accept-Charset' : 'utf-8' } } ). then ( function ( response ) { console . log ( response ); }). catch ( function ( err ) { console . error ( 'Error:' , err ); }); multipart/form-data Entrada from http_request_codegen import generate_http_request_code generate_http_request_code ( language = 'javascript' , impl = 'fetch' , method = 'POST' , url = 'https://github.com/mondeja/http-request-codegen' , headers = { 'Accept-Language' : '*' , 'Accept-Charset' : 'utf-8' }, seed = 4762 , files = { 'fixed-filepath' : '/tmp/foo.txt' , 'random-filepath' : None , 'fixed-filepath-content-type' : ( '/tmp/bar.csv' , 'text/csv' ), 'fixed-filepath-ct-header' : ( '/tmp/bar.json' , 'application/json' , { 'Accept-Charset' : 'utf-8' } ), 'random-filepath-content-type' : ( None , 'text/plain' ), 'random-filepath-ct-header' : ( None , 'text/csv' , { 'Accept-Charset' : 'utf-8' } ) } ) Salida const fs = require ( 'fs' ); const fetch = require ( 'node-fetch' ); const FormData = require ( 'form-data' ); const formData = new FormData (); formData . append ( 'fixed-filepath' , fs . createReadStream ( '/tmp/foo.txt' ), { filename : 'foo.txt' } ); formData . append ( 'random-filepath' , fs . createReadStream ( '/someone/themselves.avi' ), { filename : 'themselves.avi' } ); formData . append ( 'fixed-filepath-content-type' , fs . createReadStream ( '/tmp/bar.csv' ), { filename : 'bar.csv' , contentType : 'text/csv' } ); formData . append ( 'fixed-filepath-ct-header' , fs . createReadStream ( '/tmp/bar.json' ), { filename : 'bar.json' , contentType : 'application/json' } ); formData . append ( 'random-filepath-content-type' , fs . createReadStream ( '/structure/story.tiff' ), { filename : 'story.tiff' , contentType : 'text/plain' } ); formData . append ( 'random-filepath-ct-header' , fs . createReadStream ( '/response/help.json' ), { filename : 'help.json' , contentType : 'text/csv' } ); fetch ( 'https://github.com/mondeja/http-request-codegen' , { method : 'POST' , body : formData , headers : { 'Accept-Language' : '*' , 'Accept-Charset' : 'utf-8' } } ). then ( function ( response ) { console . log ( response ); }). catch ( function ( err ) { console . error ( 'Error:' , err ); }); application/json Entrada import fake_module from http_request_codegen import generate_http_request_code generate_http_request_code ( language = 'javascript' , impl = 'fetch' , method = 'POST' , url = 'https://github.com/mondeja/http-request-codegen' , headers = { 'Content-Type' : 'application/json' }, seed = 4762 , parameters = [ { 'name' : 'fixed-value' , 'value' : 3 }, { 'name' : 'dinamic-value-by-iterable' , 'value' : [ 1 , 2 , 3 ] # same as 'values': [1, 2, 3] }, { 'name' : 'dinamic-value-by-function' , 'value' : fake_module . integers_from_1_to_10 }, # Parameter value randomization { 'name' : 'random-values-by-iterable' , 'values' : [ 'foo' , 'bar' , 'baz' ] }, { 'name' : 'random-values-by-function' , 'values' : fake_module . integers_from_1_to_10 }, { 'name' : 'random-values-by-function-path' , 'values' : 'fake_module::integers_from_1_to_10' }, { 'name' : 'random-value-by-faker-provider-function-path' , 'faker' : 'faker.providers.job::job' }, { 'name' : 'random-string' , # by default: random word 'type' : 'str' }, { 'name' : 'random-integer' , 'type' : 'int' , }, { 'name' : 'random-integer-in-range' , 'type' : int , # You can use Python types also 'min' : 2 , 'max' : 5 , }, { 'name' : 'random-float' , 'type' : 'number' , # You can use some type aliases also }, { 'name' : 'random-rounded-float-in-range' , 'type' : float , 'min' : 1.555 , 'max' : 2.555 , 'round' : 3 }, { 'name' : 'random-boolean' , 'type' : bool }, { 'name' : 'random-boolean-nullable' , 'type' : 'boolean' , 'null' : True }, { 'name' : 'random-type' , 'type' : 'random' # random type from availables }, { 'name' : 'random-unique-identifier' , 'type' : 'uuid' }, { 'name' : 'random-id' , # positive integer 'type' : 'id' }, # Parameter name randomization { 'name' : [ 'random-name-from-iterable' , 'random-name-by-iterable' ], 'type' : 'str' , }, { 'name' : fake_module . random_name_by_function , 'type' : 'random' , }, ] ) Salida const fetch = require ( 'node-fetch' ); fetch ( 'https://github.com/mondeja/http-request-codegen' , { method : 'POST' , body : JSON . stringify ({ 'fixed-value' : '3' , 'dinamic-value-by-iterable' : '2' , 'dinamic-value-by-function' : '7' , 'random-values-by-iterable' : 'bar' , 'random-values-by-function' : '7' , 'random-values-by-function-path' : '7' , 'random-value-by-faker-provider-function-path' : 'Print production planne' + 'r' , 'random-string' : 'land' , 'random-integer' : '61115' , 'random-integer-in-range' : '5' , 'random-float' : '-2210.249383058661' , 'random-rounded-float-in-range' : '2.038' , 'random-boolean' : 'false' , 'random-boolean-nullable' : 'false' , 'random-type' : 'ago' , 'random-unique-identifier' : 'db962bff86af4f4b9ad499b8140e716b' , 'random-id' : '63326' , 'random-name-by-iterable' : 'hot' , 'random-name-by-function' : 'environmental' }), headers : { 'Content-Type' : 'application/json' } } ). then ( function ( response ) { console . log ( response ); }). catch ( function ( err ) { console . error ( 'Error:' , err ); }); text/plain Entrada from http_request_codegen import generate_http_request_code generate_http_request_code ( language = 'javascript' , impl = 'fetch' , method = 'POST' , url = 'https://github.com/mondeja/http-request-codegen' , headers = { 'Content-Type' : 'text/plain' }, seed = 4762 , parameters = [ { 'name' : 'random-values-by-iterable' , 'values' : [ 'foo' , 'bar' , 'baz' ] } ] ) Salida const fetch = require ( 'node-fetch' ); fetch ( 'https://github.com/mondeja/http-request-codegen' , { method : 'POST' , body : 'bar' , headers : { 'Content-Type' : 'text/plain' } } ). then ( function ( response ) { console . log ( response ); }). catch ( function ( err ) { console . error ( 'Error:' , err ); }); Python requests GET Entrada import fake_module from http_request_codegen import generate_http_request_code generate_http_request_code ( language = 'python' , impl = 'requests' , method = 'GET' , url = 'https://github.com/mondeja/http-request-codegen' , headers = { 'Content-Type' : 'application/json' , 'Accept-Language' : '*' }, seed = 4762 , parameters = [ { 'name' : 'fixed-value' , 'value' : 3 }, { 'name' : 'dinamic-value-by-iterable' , 'value' : [ 1 , 2 , 3 ] # same as 'values': [1, 2, 3] }, { 'name' : 'dinamic-value-by-function' , 'value' : fake_module . integers_from_1_to_10 }, # Parameter value randomization { 'name' : 'random-values-by-iterable' , 'values' : [ 'foo' , 'bar' , 'baz' ] }, { 'name' : 'random-values-by-function' , 'values' : fake_module . integers_from_1_to_10 }, { 'name' : 'random-values-by-function-path' , 'values' : 'fake_module::integers_from_1_to_10' }, { 'name' : 'random-value-by-faker-provider-function-path' , 'faker' : 'faker.providers.job::job' }, { 'name' : 'random-string' , # by default: random word 'type' : 'str' }, { 'name' : 'random-integer' , 'type' : 'int' , }, { 'name' : 'random-integer-in-range' , 'type' : int , # You can use Python types also 'min' : 2 , 'max' : 5 , }, { 'name' : 'random-float' , 'type' : 'number' , # You can use some type aliases also }, { 'name' : 'random-rounded-float-in-range' , 'type' : float , 'min' : 1.555 , 'max' : 2.555 , 'round' : 3 }, { 'name' : 'random-boolean' , 'type' : bool }, { 'name' : 'random-boolean-nullable' , 'type' : 'boolean' , 'null' : True }, { 'name' : 'random-type' , 'type' : 'random' # random type from availables }, { 'name' : 'random-unique-identifier' , 'type' : 'uuid' }, { 'name' : 'random-id' , # positive integer 'type' : 'id' }, # Parameter name randomization { 'name' : [ 'random-name-from-iterable' , 'random-name-by-iterable' ], 'type' : 'str' , }, { 'name' : fake_module . random_name_by_function , 'type' : 'random' , }, ] ) Los par\u00e1metros son pasados usando el par\u00e1metro params de la funci\u00f3n requests.get , no a\u00f1adiendo ?foo=bar&... a la URL. Si quieres este comportamiento, construye la URL pasada usando las funciones lazy_name_by_parameter y lazy_value_by_parameter en lugar de usar el argumento parameters . Si quieres importar m\u00e1s m\u00f3dulos en el c\u00f3digo de inicializaci\u00f3n, ten en cuenta que debes proveer import requests en el argumento setup . Por ejemplo, setup='import requests\\nimport foo\\n\\n' renderizar\u00e1 como: import requests import foo requests . get ( '<url>' ... Salida import requests req = requests . get ( 'https://github.com/mondeja/http-request-codegen' , params = { 'fixed-value' : '3' , 'dinamic-value-by-iterable' : '2' , 'dinamic-value-by-function' : '7' , 'random-values-by-iterable' : 'bar' , 'random-values-by-function' : '7' , 'random-values-by-function-path' : '7' , 'random-value-by-faker-provider-function-path' : 'Ergonomist' , 'random-string' : 'top' , 'random-integer' : '61115' , 'random-integer-in-range' : '5' , 'random-float' : '-2210.249383058661' , 'random-rounded-float-in-range' : '2.038' , 'random-boolean' : 'false' , 'random-boolean-nullable' : 'false' , 'random-type' : 'push' , 'random-unique-identifier' : '8632e25293a34491b216494b49d918d3' , 'random-id' : '63326' , 'random-name-by-iterable' : 'much' , 'random-name-by-function' : 'decision' }, headers = { 'Content-Type' : 'application/json' , 'Accept-Language' : '*' } ) POST application/x-www-form-urlencoded Entrada import fake_module from http_request_codegen import generate_http_request_code generate_http_request_code ( language = 'python' , impl = 'requests' , method = 'POST' , url = 'https://github.com/mondeja/http-request-codegen' , headers = { 'Accept-Language' : '*' , 'Accept-Charset' : 'utf-8' }, seed = 4762 , parameters = [ { 'name' : 'fixed-value' , 'value' : 3 }, { 'name' : 'dinamic-value-by-iterable' , 'value' : [ 1 , 2 , 3 ] # same as 'values': [1, 2, 3] }, { 'name' : 'dinamic-value-by-function' , 'value' : fake_module . integers_from_1_to_10 }, # Parameter value randomization { 'name' : 'random-values-by-iterable' , 'values' : [ 'foo' , 'bar' , 'baz' ] }, { 'name' : 'random-values-by-function' , 'values' : fake_module . integers_from_1_to_10 }, { 'name' : 'random-values-by-function-path' , 'values' : 'fake_module::integers_from_1_to_10' }, { 'name' : 'random-value-by-faker-provider-function-path' , 'faker' : 'faker.providers.job::job' }, { 'name' : 'random-string' , # by default: random word 'type' : 'str' }, { 'name' : 'random-integer' , 'type' : 'int' , }, { 'name' : 'random-integer-in-range' , 'type' : int , # You can use Python types also 'min' : 2 , 'max' : 5 , }, { 'name' : 'random-float' , 'type' : 'number' , # You can use some type aliases also }, { 'name' : 'random-rounded-float-in-range' , 'type' : float , 'min' : 1.555 , 'max' : 2.555 , 'round' : 3 }, { 'name' : 'random-boolean' , 'type' : bool }, { 'name' : 'random-boolean-nullable' , 'type' : 'boolean' , 'null' : True }, { 'name' : 'random-type' , 'type' : 'random' # random type from availables }, { 'name' : 'random-unique-identifier' , 'type' : 'uuid' }, { 'name' : 'random-id' , # positive integer 'type' : 'id' }, # Parameter name randomization { 'name' : [ 'random-name-from-iterable' , 'random-name-by-iterable' ], 'type' : 'str' , }, { 'name' : fake_module . random_name_by_function , 'type' : 'random' , }, ] ) Salida import requests req = requests . post ( 'https://github.com/mondeja/http-request-codegen' , data = { 'fixed-value' : '3' , 'dinamic-value-by-iterable' : '2' , 'dinamic-value-by-function' : '7' , 'random-values-by-iterable' : 'bar' , 'random-values-by-function' : '7' , 'random-values-by-function-path' : '7' , 'random-value-by-faker-provider-function-path' : 'Fashion designer' , 'random-string' : 'as' , 'random-integer' : '61115' , 'random-integer-in-range' : '5' , 'random-float' : '-2210.249383058661' , 'random-rounded-float-in-range' : '2.038' , 'random-boolean' : 'false' , 'random-boolean-nullable' : 'false' , 'random-type' : 'machine' , 'random-unique-identifier' : 'b3fdec3a00294b77b7b3e9e45a296883' , 'random-id' : '63326' , 'random-name-by-iterable' : 'doctor' , 'random-name-by-function' : 'within' }, headers = { 'Accept-Language' : '*' , 'Accept-Charset' : 'utf-8' } ) multipart/form-data Entrada from http_request_codegen import generate_http_request_code generate_http_request_code ( language = 'python' , impl = 'requests' , method = 'POST' , url = 'https://github.com/mondeja/http-request-codegen' , headers = { 'Accept-Language' : '*' , 'Accept-Charset' : 'utf-8' }, seed = 4762 , files = { 'fixed-filepath' : '/tmp/foo.txt' , 'random-filepath' : None , 'fixed-filepath-content-type' : ( '/tmp/bar.csv' , 'text/csv' ), 'fixed-filepath-ct-header' : ( '/tmp/bar.json' , 'application/json' , { 'Accept-Charset' : 'utf-8' } ), 'random-filepath-content-type' : ( None , 'text/plain' ), 'random-filepath-ct-header' : ( None , 'text/csv' , { 'Accept-Charset' : 'utf-8' } ) } ) Salida import requests req = requests . post ( 'https://github.com/mondeja/http-request-codegen' , files = { 'fixed-filepath' : ( '/tmp/foo.txt' , open ( '/tmp/foo.txt' , 'rb' ) ), 'random-filepath' : ( '/receive/city.numbers' , open ( '/receive/city.numbers' , 'rb' ) ), 'fixed-filepath-content-type' : ( '/tmp/bar.csv' , open ( '/tmp/bar.csv' , 'rb' ), 'text/csv' ), 'fixed-filepath-ct-header' : ( '/tmp/bar.json' , open ( '/tmp/bar.json' , 'rb' ), 'application/json' , { 'Accept-Charset' : 'utf-8' } ), 'random-filepath-content-type' : ( '/either/few.key' , open ( '/either/few.key' , 'rb' ), 'text/plain' ), 'random-filepath-ct-header' : ( '/increase/strategy.json' , open ( '/increase/strategy.json' , 'rb' ), 'text/csv' , { 'Accept-Charset' : 'utf-8' } ) }, headers = { 'Accept-Language' : '*' , 'Accept-Charset' : 'utf-8' } ) application/json Entrada import fake_module from http_request_codegen import generate_http_request_code generate_http_request_code ( language = 'python' , impl = 'requests' , method = 'POST' , url = 'https://github.com/mondeja/http-request-codegen' , headers = { 'Content-Type' : 'application/json' }, seed = 4762 , parameters = [ { 'name' : 'fixed-value' , 'value' : 3 }, { 'name' : 'dinamic-value-by-iterable' , 'value' : [ 1 , 2 , 3 ] # same as 'values': [1, 2, 3] }, { 'name' : 'dinamic-value-by-function' , 'value' : fake_module . integers_from_1_to_10 }, # Parameter value randomization { 'name' : 'random-values-by-iterable' , 'values' : [ 'foo' , 'bar' , 'baz' ] }, { 'name' : 'random-values-by-function' , 'values' : fake_module . integers_from_1_to_10 }, { 'name' : 'random-values-by-function-path' , 'values' : 'fake_module::integers_from_1_to_10' }, { 'name' : 'random-value-by-faker-provider-function-path' , 'faker' : 'faker.providers.job::job' }, { 'name' : 'random-string' , # by default: random word 'type' : 'str' }, { 'name' : 'random-integer' , 'type' : 'int' , }, { 'name' : 'random-integer-in-range' , 'type' : int , # You can use Python types also 'min' : 2 , 'max' : 5 , }, { 'name' : 'random-float' , 'type' : 'number' , # You can use some type aliases also }, { 'name' : 'random-rounded-float-in-range' , 'type' : float , 'min' : 1.555 , 'max' : 2.555 , 'round' : 3 }, { 'name' : 'random-boolean' , 'type' : bool }, { 'name' : 'random-boolean-nullable' , 'type' : 'boolean' , 'null' : True }, { 'name' : 'random-type' , 'type' : 'random' # random type from availables }, { 'name' : 'random-unique-identifier' , 'type' : 'uuid' }, { 'name' : 'random-id' , # positive integer 'type' : 'id' }, # Parameter name randomization { 'name' : [ 'random-name-from-iterable' , 'random-name-by-iterable' ], 'type' : 'str' , }, { 'name' : fake_module . random_name_by_function , 'type' : 'random' , }, ] ) Salida import requests req = requests . post ( 'https://github.com/mondeja/http-request-codegen' , json = { 'fixed-value' : 3 , 'dinamic-value-by-iterable' : '2' , 'dinamic-value-by-function' : '7' , 'random-values-by-iterable' : 'bar' , 'random-values-by-function' : '7' , 'random-values-by-function-path' : '7' , 'random-value-by-faker-provider-function-path' : 'Statistician' , 'random-string' : 'buy' , 'random-integer' : '61115' , 'random-integer-in-range' : '5' , 'random-float' : '-2210.249383058661' , 'random-rounded-float-in-range' : '2.038' , 'random-boolean' : 'false' , 'random-boolean-nullable' : 'false' , 'random-type' : 'image' , 'random-unique-identifier' : 'ce9f472d5964448d98fcf7a3dd3a5d3c' , 'random-id' : '63326' , 'random-name-by-iterable' : 'give' , 'random-name-by-function' : 'health' }, headers = { 'Content-Type' : 'application/json' } ) text/plain Entrada from http_request_codegen import generate_http_request_code generate_http_request_code ( language = 'python' , impl = 'requests' , method = 'POST' , url = 'https://github.com/mondeja/http-request-codegen' , headers = { 'Content-Type' : 'text/plain' }, seed = 4762 , parameters = [ { 'name' : 'random-values-by-iterable' , 'values' : [ 'foo' , 'bar' , 'baz' ] } ] ) Salida import requests req = requests . post ( 'https://github.com/mondeja/http-request-codegen' , data = 'bar' , headers = { 'Content-Type' : 'text/plain' } ) Bash curl GET Entrada import fake_module from http_request_codegen import generate_http_request_code generate_http_request_code ( language = 'bash' , impl = 'curl' , method = 'GET' , url = 'https://github.com/mondeja/http-request-codegen' , headers = { 'Content-Type' : 'application/json' , 'Accept-Language' : '*' }, seed = 4762 , parameters = [ { 'name' : 'fixed-value' , 'value' : 3 }, { 'name' : 'dinamic-value-by-iterable' , 'value' : [ 1 , 2 , 3 ] # same as 'values': [1, 2, 3] }, { 'name' : 'dinamic-value-by-function' , 'value' : fake_module . integers_from_1_to_10 }, # Parameter value randomization { 'name' : 'random-values-by-iterable' , 'values' : [ 'foo' , 'bar' , 'baz' ] }, { 'name' : 'random-values-by-function' , 'values' : fake_module . integers_from_1_to_10 }, { 'name' : 'random-values-by-function-path' , 'values' : 'fake_module::integers_from_1_to_10' }, { 'name' : 'random-value-by-faker-provider-function-path' , 'faker' : 'faker.providers.job::job' }, { 'name' : 'random-string' , # by default: random word 'type' : 'str' }, { 'name' : 'random-integer' , 'type' : 'int' , }, { 'name' : 'random-integer-in-range' , 'type' : int , # You can use Python types also 'min' : 2 , 'max' : 5 , }, { 'name' : 'random-float' , 'type' : 'number' , # You can use some type aliases also }, { 'name' : 'random-rounded-float-in-range' , 'type' : float , 'min' : 1.555 , 'max' : 2.555 , 'round' : 3 }, { 'name' : 'random-boolean' , 'type' : bool }, { 'name' : 'random-boolean-nullable' , 'type' : 'boolean' , 'null' : True }, { 'name' : 'random-type' , 'type' : 'random' # random type from availables }, { 'name' : 'random-unique-identifier' , 'type' : 'uuid' }, { 'name' : 'random-id' , # positive integer 'type' : 'id' }, # Parameter name randomization { 'name' : [ 'random-name-from-iterable' , 'random-name-by-iterable' ], 'type' : 'str' , }, { 'name' : fake_module . random_name_by_function , 'type' : 'random' , }, ] ) Pasa opciones extra al comando 'curl' en el par\u00e1metro kwargs . Por ejemplo, para guardar la respuesta en un archivo, pasa kwargs={'-o': 'filename.ext'} : curl -o \"filename.ext\" Salida curl \\ -d 'fixed-value=3&dinamic-value-by-iterable=2&dinamic-value-by-function=7&random-values-by-iterable=bar&random-values-by-function=7&random-values-by-function-path=7&random-value-by-faker-provider-function-path=Administrator%2C+charities%2Fvoluntary+organisations&random-string=surface&random-integer=61115&random-integer-in-range=5&random-float=-2210.249383058661&random-rounded-float-in-range=2.038&random-boolean=false&random-boolean-nullable=false&random-type=road&random-unique-identifier=31387ab05be14110acb56166691d1374&random-id=63326&random-name-by-iterable=usually&random-name-by-function=real' \\ -H 'Content-Type: application/json' \\ -H 'Accept-Language: *' \\ https://github.com/mondeja/http-request-codegen POST application/x-www-form-urlencoded Entrada import fake_module from http_request_codegen import generate_http_request_code generate_http_request_code ( language = 'bash' , impl = 'curl' , method = 'POST' , url = 'https://github.com/mondeja/http-request-codegen' , headers = { 'Accept-Language' : '*' , 'Accept-Charset' : 'utf-8' }, seed = 4762 , parameters = [ { 'name' : 'fixed-value' , 'value' : 3 }, { 'name' : 'dinamic-value-by-iterable' , 'value' : [ 1 , 2 , 3 ] # same as 'values': [1, 2, 3] }, { 'name' : 'dinamic-value-by-function' , 'value' : fake_module . integers_from_1_to_10 }, # Parameter value randomization { 'name' : 'random-values-by-iterable' , 'values' : [ 'foo' , 'bar' , 'baz' ] }, { 'name' : 'random-values-by-function' , 'values' : fake_module . integers_from_1_to_10 }, { 'name' : 'random-values-by-function-path' , 'values' : 'fake_module::integers_from_1_to_10' }, { 'name' : 'random-value-by-faker-provider-function-path' , 'faker' : 'faker.providers.job::job' }, { 'name' : 'random-string' , # by default: random word 'type' : 'str' }, { 'name' : 'random-integer' , 'type' : 'int' , }, { 'name' : 'random-integer-in-range' , 'type' : int , # You can use Python types also 'min' : 2 , 'max' : 5 , }, { 'name' : 'random-float' , 'type' : 'number' , # You can use some type aliases also }, { 'name' : 'random-rounded-float-in-range' , 'type' : float , 'min' : 1.555 , 'max' : 2.555 , 'round' : 3 }, { 'name' : 'random-boolean' , 'type' : bool }, { 'name' : 'random-boolean-nullable' , 'type' : 'boolean' , 'null' : True }, { 'name' : 'random-type' , 'type' : 'random' # random type from availables }, { 'name' : 'random-unique-identifier' , 'type' : 'uuid' }, { 'name' : 'random-id' , # positive integer 'type' : 'id' }, # Parameter name randomization { 'name' : [ 'random-name-from-iterable' , 'random-name-by-iterable' ], 'type' : 'str' , }, { 'name' : fake_module . random_name_by_function , 'type' : 'random' , }, ] ) Salida curl \\ -X 'POST' \\ -d 'fixed-value=3&dinamic-value-by-iterable=2&dinamic-value-by-function=7&random-values-by-iterable=bar&random-values-by-function=7&random-values-by-function-path=7&random-value-by-faker-provider-function-path=Designer%2C+textile&random-string=culture&random-integer=61115&random-integer-in-range=5&random-float=-2210.249383058661&random-rounded-float-in-range=2.038&random-boolean=false&random-boolean-nullable=false&random-type=air&random-unique-identifier=522f08111809464b9d2038088d3ffdec&random-id=63326&random-name-by-iterable=though&random-name-by-function=idea' \\ -H 'Accept-Language: *' \\ -H 'Accept-Charset: utf-8' \\ https://github.com/mondeja/http-request-codegen multipart/form-data Entrada from http_request_codegen import generate_http_request_code generate_http_request_code ( language = 'bash' , impl = 'curl' , method = 'POST' , url = 'https://github.com/mondeja/http-request-codegen' , headers = { 'Accept-Language' : '*' , 'Accept-Charset' : 'utf-8' }, seed = 4762 , files = { 'fixed-filepath' : '/tmp/foo.txt' , 'random-filepath' : None , 'fixed-filepath-content-type' : ( '/tmp/bar.csv' , 'text/csv' ), 'fixed-filepath-ct-header' : ( '/tmp/bar.json' , 'application/json' , { 'Accept-Charset' : 'utf-8' } ), 'random-filepath-content-type' : ( None , 'text/plain' ), 'random-filepath-ct-header' : ( None , 'text/csv' , { 'Accept-Charset' : 'utf-8' } ) } ) Salida curl \\ -X 'POST' \\ -F 'fixed-filepath=@/tmp/foo.txt' \\ -F 'random-filepath=@/through/across.txt' \\ -F 'fixed-filepath-content-type=@/tmp/bar.csv' \\ -F 'fixed-filepath-ct-header=@/tmp/bar.json' \\ -F 'random-filepath-content-type=@/south/goal.json' \\ -F 'random-filepath-ct-header=@/again/option.flac' \\ -H 'Accept-Language: *' \\ -H 'Accept-Charset: utf-8' \\ https://github.com/mondeja/http-request-codegen application/json Entrada import fake_module from http_request_codegen import generate_http_request_code generate_http_request_code ( language = 'bash' , impl = 'curl' , method = 'POST' , url = 'https://github.com/mondeja/http-request-codegen' , headers = { 'Content-Type' : 'application/json' }, seed = 4762 , parameters = [ { 'name' : 'fixed-value' , 'value' : 3 }, { 'name' : 'dinamic-value-by-iterable' , 'value' : [ 1 , 2 , 3 ] # same as 'values': [1, 2, 3] }, { 'name' : 'dinamic-value-by-function' , 'value' : fake_module . integers_from_1_to_10 }, # Parameter value randomization { 'name' : 'random-values-by-iterable' , 'values' : [ 'foo' , 'bar' , 'baz' ] }, { 'name' : 'random-values-by-function' , 'values' : fake_module . integers_from_1_to_10 }, { 'name' : 'random-values-by-function-path' , 'values' : 'fake_module::integers_from_1_to_10' }, { 'name' : 'random-value-by-faker-provider-function-path' , 'faker' : 'faker.providers.job::job' }, { 'name' : 'random-string' , # by default: random word 'type' : 'str' }, { 'name' : 'random-integer' , 'type' : 'int' , }, { 'name' : 'random-integer-in-range' , 'type' : int , # You can use Python types also 'min' : 2 , 'max' : 5 , }, { 'name' : 'random-float' , 'type' : 'number' , # You can use some type aliases also }, { 'name' : 'random-rounded-float-in-range' , 'type' : float , 'min' : 1.555 , 'max' : 2.555 , 'round' : 3 }, { 'name' : 'random-boolean' , 'type' : bool }, { 'name' : 'random-boolean-nullable' , 'type' : 'boolean' , 'null' : True }, { 'name' : 'random-type' , 'type' : 'random' # random type from availables }, { 'name' : 'random-unique-identifier' , 'type' : 'uuid' }, { 'name' : 'random-id' , # positive integer 'type' : 'id' }, # Parameter name randomization { 'name' : [ 'random-name-from-iterable' , 'random-name-by-iterable' ], 'type' : 'str' , }, { 'name' : fake_module . random_name_by_function , 'type' : 'random' , }, ] ) Salida curl \\ -X 'POST' \\ -d 'fixed-value=3&dinamic-value-by-iterable=2&dinamic-value-by-function=7&random-values-by-iterable=bar&random-values-by-function=7&random-values-by-function-path=7&random-value-by-faker-provider-function-path=Exhibitions+officer%2C+museum%2Fgallery&random-string=church&random-integer=61115&random-integer-in-range=5&random-float=-2210.249383058661&random-rounded-float-in-range=2.038&random-boolean=false&random-boolean-nullable=false&random-type=against&random-unique-identifier=9e013269fc1b40fa944a2f1b48e49f31&random-id=63326&random-name-by-iterable=music&random-name-by-function=animal' \\ -H 'Content-Type: application/json' \\ https://github.com/mondeja/http-request-codegen text/plain Entrada from http_request_codegen import generate_http_request_code generate_http_request_code ( language = 'bash' , impl = 'curl' , method = 'POST' , url = 'https://github.com/mondeja/http-request-codegen' , headers = { 'Content-Type' : 'text/plain' }, seed = 4762 , parameters = [ { 'name' : 'random-values-by-iterable' , 'values' : [ 'foo' , 'bar' , 'baz' ] } ] ) Salida curl \\ -X 'POST' \\ -d 'random-values-by-iterable=bar' \\ -H 'Content-Type: text/plain' \\ https://github.com/mondeja/http-request-codegen","title":"Demostraci\u00f3n"},{"location":"es/#soporte","text":"Javascript fetch GET POST Encabezados \u2705 \u2705 Par\u00e1metros \u2705 \u2705 Localizaci\u00f3n de par\u00e1metros \u2705 \u2705 Semilla de par\u00e1metros \u2705 \u2705 Indentaci\u00f3n personalizada \u2705 \u2705 Personalizaci\u00f3n de caracter de cadena \u2705 \u2705 Renderizado en una l\u00ednea \u2705 \u2705 Inicializaci\u00f3n personalizada \u2705 \u2705 Finalizaci\u00f3n personalizada \u2705 \u2705 M\u00e1ximo ancho de l\u00ednea personalizado \u2705 \u2705 Python requests GET POST Encabezados \u2705 \u2705 Par\u00e1metros \u2705 \u2705 Localizaci\u00f3n de par\u00e1metros \u2705 \u2705 Semilla de par\u00e1metros \u2705 \u2705 Indentaci\u00f3n personalizada \u2705 \u2705 Personalizaci\u00f3n de caracter de cadena \u2705 \u2705 Renderizado en una l\u00ednea \u2705 \u2705 Inicializaci\u00f3n personalizada \u2705 \u2705 Finalizaci\u00f3n personalizada \u2705 \u2705 M\u00e1ximo ancho de l\u00ednea personalizado \u2705 \u2705 Bash curl GET POST Encabezados \u2705 \u2705 Par\u00e1metros \u2705 \u2705 Localizaci\u00f3n de par\u00e1metros \u2705 \u2705 Semilla de par\u00e1metros \u2705 \u2705 Indentaci\u00f3n personalizada \u2705 \u2705 Personalizaci\u00f3n de caracter de cadena \u2705 \u2705 Renderizado en una l\u00ednea \u2705 \u2705 Inicializaci\u00f3n personalizada \u2705 \u2705 Finalizaci\u00f3n personalizada \u2705 \u2705 M\u00e1ximo ancho de l\u00ednea personalizado \u2705 \u2705","title":"Soporte"},{"location":"es/dev/","text":"Preparaci\u00f3n de entorno de desarrollo \u00b6 Linux/MacOS pip + virtualenv git clone https://github.com/mondeja/http-request-codegen.git python3 -m virtualenv venv . venv/bin/activate python3 -m pip install . [ dev ] pre-commit install Windows pip + virtualenv git clone https://github.com/mondeja/http-request-codegen.git python3 -m virtualenv venv venv\\Scripts\\activate.bat python3 -m pip install .[dev] pre-commit install Comandos de desarrollo \u00b6 Testeo \u00b6 All pytest -sv Coverage pytest -s --cov = http_request_codegen --cov-config = setup.cfg --cov-report = html Doctests pytest -svv --doctest-modules http_request_codegen Linteado \u00b6 pre-commit run --all-files Desarrollando implementaciones \u00b6 Para desarrollar una funci\u00f3n de un m\u00e9todo HTTP para una bilbioteca o un programa, necesitas tener en cuenta todos los par\u00e1metros descritos en la funci\u00f3n generate_http_request_code , pero no los valores aleatorios pasados en el argumento parameters ya que http_request_codegen provee funciones que pueden manejarlos. Argumentos de implementaci\u00f3n \u00b6 Cada funci\u00f3n de implementaci\u00f3n debe contener los siguientes argumentos, que son pasados de la funci\u00f3n de la API generate_http_request_code , por lo que se recomienda que te familiarices con los argumentos de esa funci\u00f3n antes de continuar con esta gu\u00eda porque est\u00e1n bien documentados ah\u00ed: url : \u00fanico agumento posicional de la funci\u00f3n, representa la URL objetivo de la petici\u00f3n. headers : diccionario de encabezados. parameters : lista de objetos de datos de par\u00e1metros. files : diccionario de archivos, s\u00f3lo pasados a peticiones POST, por lo que esta argumento no debe ser definido si el nombre de la funci\u00f3n de implementaci\u00f3n es diferente a post . wrap : ancho m\u00e1ximo del trozo de c\u00f3digo renderizado. indent : indentaci\u00f3n usada en el trozo de c\u00f3digo generado. quote_char : caracter de limitaci\u00f3n de cadenas. setup : trozo de c\u00f3digo colocado al principio de la petici\u00f3n generada. teardown : trozo de c\u00f3digo colocado al final de la petici\u00f3n generada. oneline : si se habilita, la renderizaci\u00f3n del trozo de c\u00f3digo se har\u00e1 en una l\u00ednea. seed : semilla usada generando los valores aleatorios falsos de los par\u00e1metros. locale : idioma usado por la biblioteca faker para localizar los valores aleatorios falseados para los par\u00e1metros. Singularidades de m\u00e9todos \u00b6 POST \u00b6 La mayor\u00eda de implementaciones de m\u00e9todos POST renderizan sus trozos de c\u00f3digo de forma diferente, dependiendo del encabezado Content-Types , incluyendo por defecto algunos de los comportamientos de encabezados Content-Types m\u00e1s utilizados: El comportamiento por defecto, incluso si no lo especificas expl\u00edcitamente en el encabezado Content-Type es la generaci\u00f3n de una petici\u00f3n codificada como application/x-www-form-urlencoded . Si quieres generar una petici\u00f3n codificada como multipart/form-data , necesitas especificar los archivos a enviar usando el argumento files . Si especificas el encabezado Content-Type application/json , los par\u00e1metros enviados ser\u00e1n ajustados de acuerdo a la petici\u00f3n POST codificada como JSON. Si especificas el encabezado Content-Type text/plain , s\u00f3lo puedes enviar un par\u00e1metro y ser\u00e1 ajustado de acuerdo siguiendo la implementaci\u00f3n. Comportamiento de envoltura en una l\u00ednea \u00b6 La primera cosa a tener en cuenta (y la m\u00e1s complicada) es el comportamiento de envoltura (argumento wrap ) renderizando como si oneline=True fuera pasado. La pregunta es: \u00bfpuede un trozo de c\u00f3digo ser renderizado en una l\u00ednea si el largo estimado de la petici\u00f3n es menor que el valor del argumento wrap ? Por ejemplo, peticiones con la biblioteca requests de Python pueden ser renderizadas usando este tipo de c\u00f3digo, en una l\u00ednea: import requests req = requests . get ( 'https://github.com/mondeja/http-request-codegen' ) ...o usando m\u00faltiples l\u00edneas ( wrap es menor que el largo esperado): import requests req = requests . get ( 'https://github.com/mondeja/http-request-codegen' ) Por supuesto, esto tambi\u00e9n afecta a los argumentos parameters , headers y kwargs : import requests req = requests . get ( 'localhost' , params = { 'foo' : 'bar' }, headers = { 'foo' : 'bar' }) ...los cuales pueden ser renderizados en m\u00faltiples l\u00edneas: import requests req = requests . get ( 'localhost' , params = { 'foo' : 'bar' }, headers = { 'foo' : 'bar' } ) Ya que este comportamiento puede depender tanto de los argumentos oneline y wrap , la forma recomendada de implementar esto es calcular el largo de la petici\u00f3n esperada dentro del trozo de c\u00f3digo y, si es mayor o igual al argumento wrap , debe ser renderizada como si oneline=True . Tip Puedes ver un ejemplo de este tipo de implementaci\u00f3n en la funci\u00f3n http_request_codegen.generators.python.requests::get . Pero otras implementaciones podr\u00edan ser renderizadas en m\u00faltiples l\u00edneas sin importar el valor del argumento wrap . Por ejemplo, la implementaci\u00f3n de la API fetch de Javascript siempre renderizar\u00e1 un trozo de c\u00f3digo multil\u00ednea (a no ser que oneline=True sea expl\u00edcitamente definido), ya que la escritura de promesas Javascript en una s\u00f3la l\u00ednea no es una sintaxis com\u00fan y hay muy poco margen para que la petici\u00f3n generada pudiera no tener que ser evuelta dado el valor de envolura por defecto (80 en este caso). El trozo de c\u00f3digo m\u00ednimo razonable en una l\u00ednea para la implementaci\u00f3n fetch de la API Javascript ser\u00eda: fetch ( 'localhost' ). then ( function ( response ) {}). catch ( function ( error ) { console . error ( error )}); ...lo cual excede el valor por defecto del argumento wrap (80). En este tipo de casos, no hay necesidad de calcular el largo de el trozo de c\u00f3digo de la petici\u00f3n antes de construir la salida. Tip Puedes ver un ejemplo de este tipo de implementaci\u00f3n en la funci\u00f3n http_request_codegen.generators.javascript.fetch::get . En el primer caso, necesitas iterar por los argumentos parameters , headers y kwargs para calcular el largo esperado, entonces comparar el largo esperado con el valor del argumento wrap y, si lo alcanza, definir una variable interna para el comportamiento oneline=True . En el segundo, puedes asumir que el c\u00f3digo generado es multil\u00ednea a no ser que oneline=True sea definido expl\u00edcitamente como argumento. Aleatorizando valores \u00b6 La biblioteca provee las funciones lazy_name_by_parameter y lazy_value_by_parameter las cuales retornan el nombre el valor de un par\u00e1metro dada un diccionario de especificaci\u00f3n de par\u00e1metro. Estos deben ser usados para aleatorizar par\u00e1metros de una forma unificada entre implementaciones como se describe en la documentaci\u00f3n de la funci\u00f3n generate_http_request_code . Utilidades de lenguaje/plataforma \u00b6 Puedes crear un m\u00f3dulo _utils.py dentro de un paquete de lenguaje o plataforma para almacenar utilidades que puedan ayudar en el proceso de construcci\u00f3n del trozo de c\u00f3digo, como: Definir la indentaci\u00f3n por defecto para el lenguaje/plataforma (argumento indent ). Definir el valor por defecto de envoltura (argumento wrap ). Definir los caracteres de delimitaci\u00f3n de cadenas (argumento quote_char ). Escapar delimitadores de cadenas de valores (de acuerdo al argumento quote_char dado). Crear funciones de m\u00e1s alto nivel de generaci\u00f3n de c\u00f3digo para el lenguaje/plataforma, como definiciones de cadenas de comportamientos de envoltura, definiciones de diccionarios... Tip Ver los m\u00f3dulos _utils.py actuales de los paquetes de generators como referencia. Creando casos de tests \u00b6 Usa el script scripts/create-impl-test-cases.py para crear casos posibles de generaci\u00f3n de trozos de c\u00f3digo de acuerdo a combinaciones de argumentos. Esto te ayudar\u00e1 desarrollando implementaciones ya que te ahorra la necesidad de ejecutar cada posible combinaci\u00f3n de argumentos. \u00dasalo tal como sigue: rm -rf cases && python3 scripts/create-impl-test-cases.py \\ --language python \\ --implementation requests \\ --method GET \\ --directory cases El comando previo crear\u00e1 un directorio cases/ con un mont\u00f3n de trozos de c\u00f3digo generados, dadas las combinaciones descritas en tests/combinations.py . Cuando hayas revisado manualmente que todos los trozos de c\u00f3digo son generados correctamente, puedes crear un test para la implementaci\u00f3n en tests/test_generators/test_<lang>/test_<impl>/test_<impl>.py , colocando el directorio cases/ en tests/test_generators/test_<lang>/test_<impl>/<METHOD> . Por ejemplo, para el m\u00e9todo GET de la biblioteca requests de Python, el m\u00f3dulo de test estar\u00eda en tests/test_generators/test_python/test_requests/test_requests.py y el directorio cases/ estar\u00eda emplazado en tests/test_generators/test_python/test_requests/GET/ . Tip Puedes usar un m\u00f3dulo de test ya implementado como referencia escribiendo uno para la implementaci\u00f3n.","title":"Desarrollo"},{"location":"es/dev/#preparacion-de-entorno-de-desarrollo","text":"Linux/MacOS pip + virtualenv git clone https://github.com/mondeja/http-request-codegen.git python3 -m virtualenv venv . venv/bin/activate python3 -m pip install . [ dev ] pre-commit install Windows pip + virtualenv git clone https://github.com/mondeja/http-request-codegen.git python3 -m virtualenv venv venv\\Scripts\\activate.bat python3 -m pip install .[dev] pre-commit install","title":"Preparaci\u00f3n de entorno de desarrollo"},{"location":"es/dev/#comandos-de-desarrollo","text":"","title":"Comandos de desarrollo"},{"location":"es/dev/#testeo","text":"All pytest -sv Coverage pytest -s --cov = http_request_codegen --cov-config = setup.cfg --cov-report = html Doctests pytest -svv --doctest-modules http_request_codegen","title":"Testeo"},{"location":"es/dev/#linteado","text":"pre-commit run --all-files","title":"Linteado"},{"location":"es/dev/#desarrollando-implementaciones","text":"Para desarrollar una funci\u00f3n de un m\u00e9todo HTTP para una bilbioteca o un programa, necesitas tener en cuenta todos los par\u00e1metros descritos en la funci\u00f3n generate_http_request_code , pero no los valores aleatorios pasados en el argumento parameters ya que http_request_codegen provee funciones que pueden manejarlos.","title":"Desarrollando implementaciones"},{"location":"es/dev/#argumentos-de-implementacion","text":"Cada funci\u00f3n de implementaci\u00f3n debe contener los siguientes argumentos, que son pasados de la funci\u00f3n de la API generate_http_request_code , por lo que se recomienda que te familiarices con los argumentos de esa funci\u00f3n antes de continuar con esta gu\u00eda porque est\u00e1n bien documentados ah\u00ed: url : \u00fanico agumento posicional de la funci\u00f3n, representa la URL objetivo de la petici\u00f3n. headers : diccionario de encabezados. parameters : lista de objetos de datos de par\u00e1metros. files : diccionario de archivos, s\u00f3lo pasados a peticiones POST, por lo que esta argumento no debe ser definido si el nombre de la funci\u00f3n de implementaci\u00f3n es diferente a post . wrap : ancho m\u00e1ximo del trozo de c\u00f3digo renderizado. indent : indentaci\u00f3n usada en el trozo de c\u00f3digo generado. quote_char : caracter de limitaci\u00f3n de cadenas. setup : trozo de c\u00f3digo colocado al principio de la petici\u00f3n generada. teardown : trozo de c\u00f3digo colocado al final de la petici\u00f3n generada. oneline : si se habilita, la renderizaci\u00f3n del trozo de c\u00f3digo se har\u00e1 en una l\u00ednea. seed : semilla usada generando los valores aleatorios falsos de los par\u00e1metros. locale : idioma usado por la biblioteca faker para localizar los valores aleatorios falseados para los par\u00e1metros.","title":"Argumentos de implementaci\u00f3n"},{"location":"es/dev/#singularidades-de-metodos","text":"","title":"Singularidades de m\u00e9todos"},{"location":"es/dev/#post","text":"La mayor\u00eda de implementaciones de m\u00e9todos POST renderizan sus trozos de c\u00f3digo de forma diferente, dependiendo del encabezado Content-Types , incluyendo por defecto algunos de los comportamientos de encabezados Content-Types m\u00e1s utilizados: El comportamiento por defecto, incluso si no lo especificas expl\u00edcitamente en el encabezado Content-Type es la generaci\u00f3n de una petici\u00f3n codificada como application/x-www-form-urlencoded . Si quieres generar una petici\u00f3n codificada como multipart/form-data , necesitas especificar los archivos a enviar usando el argumento files . Si especificas el encabezado Content-Type application/json , los par\u00e1metros enviados ser\u00e1n ajustados de acuerdo a la petici\u00f3n POST codificada como JSON. Si especificas el encabezado Content-Type text/plain , s\u00f3lo puedes enviar un par\u00e1metro y ser\u00e1 ajustado de acuerdo siguiendo la implementaci\u00f3n.","title":"POST"},{"location":"es/dev/#comportamiento-de-envoltura-en-una-linea","text":"La primera cosa a tener en cuenta (y la m\u00e1s complicada) es el comportamiento de envoltura (argumento wrap ) renderizando como si oneline=True fuera pasado. La pregunta es: \u00bfpuede un trozo de c\u00f3digo ser renderizado en una l\u00ednea si el largo estimado de la petici\u00f3n es menor que el valor del argumento wrap ? Por ejemplo, peticiones con la biblioteca requests de Python pueden ser renderizadas usando este tipo de c\u00f3digo, en una l\u00ednea: import requests req = requests . get ( 'https://github.com/mondeja/http-request-codegen' ) ...o usando m\u00faltiples l\u00edneas ( wrap es menor que el largo esperado): import requests req = requests . get ( 'https://github.com/mondeja/http-request-codegen' ) Por supuesto, esto tambi\u00e9n afecta a los argumentos parameters , headers y kwargs : import requests req = requests . get ( 'localhost' , params = { 'foo' : 'bar' }, headers = { 'foo' : 'bar' }) ...los cuales pueden ser renderizados en m\u00faltiples l\u00edneas: import requests req = requests . get ( 'localhost' , params = { 'foo' : 'bar' }, headers = { 'foo' : 'bar' } ) Ya que este comportamiento puede depender tanto de los argumentos oneline y wrap , la forma recomendada de implementar esto es calcular el largo de la petici\u00f3n esperada dentro del trozo de c\u00f3digo y, si es mayor o igual al argumento wrap , debe ser renderizada como si oneline=True . Tip Puedes ver un ejemplo de este tipo de implementaci\u00f3n en la funci\u00f3n http_request_codegen.generators.python.requests::get . Pero otras implementaciones podr\u00edan ser renderizadas en m\u00faltiples l\u00edneas sin importar el valor del argumento wrap . Por ejemplo, la implementaci\u00f3n de la API fetch de Javascript siempre renderizar\u00e1 un trozo de c\u00f3digo multil\u00ednea (a no ser que oneline=True sea expl\u00edcitamente definido), ya que la escritura de promesas Javascript en una s\u00f3la l\u00ednea no es una sintaxis com\u00fan y hay muy poco margen para que la petici\u00f3n generada pudiera no tener que ser evuelta dado el valor de envolura por defecto (80 en este caso). El trozo de c\u00f3digo m\u00ednimo razonable en una l\u00ednea para la implementaci\u00f3n fetch de la API Javascript ser\u00eda: fetch ( 'localhost' ). then ( function ( response ) {}). catch ( function ( error ) { console . error ( error )}); ...lo cual excede el valor por defecto del argumento wrap (80). En este tipo de casos, no hay necesidad de calcular el largo de el trozo de c\u00f3digo de la petici\u00f3n antes de construir la salida. Tip Puedes ver un ejemplo de este tipo de implementaci\u00f3n en la funci\u00f3n http_request_codegen.generators.javascript.fetch::get . En el primer caso, necesitas iterar por los argumentos parameters , headers y kwargs para calcular el largo esperado, entonces comparar el largo esperado con el valor del argumento wrap y, si lo alcanza, definir una variable interna para el comportamiento oneline=True . En el segundo, puedes asumir que el c\u00f3digo generado es multil\u00ednea a no ser que oneline=True sea definido expl\u00edcitamente como argumento.","title":"Comportamiento de envoltura en una l\u00ednea"},{"location":"es/dev/#aleatorizando-valores","text":"La biblioteca provee las funciones lazy_name_by_parameter y lazy_value_by_parameter las cuales retornan el nombre el valor de un par\u00e1metro dada un diccionario de especificaci\u00f3n de par\u00e1metro. Estos deben ser usados para aleatorizar par\u00e1metros de una forma unificada entre implementaciones como se describe en la documentaci\u00f3n de la funci\u00f3n generate_http_request_code .","title":"Aleatorizando valores"},{"location":"es/dev/#utilidades-de-lenguajeplataforma","text":"Puedes crear un m\u00f3dulo _utils.py dentro de un paquete de lenguaje o plataforma para almacenar utilidades que puedan ayudar en el proceso de construcci\u00f3n del trozo de c\u00f3digo, como: Definir la indentaci\u00f3n por defecto para el lenguaje/plataforma (argumento indent ). Definir el valor por defecto de envoltura (argumento wrap ). Definir los caracteres de delimitaci\u00f3n de cadenas (argumento quote_char ). Escapar delimitadores de cadenas de valores (de acuerdo al argumento quote_char dado). Crear funciones de m\u00e1s alto nivel de generaci\u00f3n de c\u00f3digo para el lenguaje/plataforma, como definiciones de cadenas de comportamientos de envoltura, definiciones de diccionarios... Tip Ver los m\u00f3dulos _utils.py actuales de los paquetes de generators como referencia.","title":"Utilidades de lenguaje/plataforma"},{"location":"es/dev/#creando-casos-de-tests","text":"Usa el script scripts/create-impl-test-cases.py para crear casos posibles de generaci\u00f3n de trozos de c\u00f3digo de acuerdo a combinaciones de argumentos. Esto te ayudar\u00e1 desarrollando implementaciones ya que te ahorra la necesidad de ejecutar cada posible combinaci\u00f3n de argumentos. \u00dasalo tal como sigue: rm -rf cases && python3 scripts/create-impl-test-cases.py \\ --language python \\ --implementation requests \\ --method GET \\ --directory cases El comando previo crear\u00e1 un directorio cases/ con un mont\u00f3n de trozos de c\u00f3digo generados, dadas las combinaciones descritas en tests/combinations.py . Cuando hayas revisado manualmente que todos los trozos de c\u00f3digo son generados correctamente, puedes crear un test para la implementaci\u00f3n en tests/test_generators/test_<lang>/test_<impl>/test_<impl>.py , colocando el directorio cases/ en tests/test_generators/test_<lang>/test_<impl>/<METHOD> . Por ejemplo, para el m\u00e9todo GET de la biblioteca requests de Python, el m\u00f3dulo de test estar\u00eda en tests/test_generators/test_python/test_requests/test_requests.py y el directorio cases/ estar\u00eda emplazado en tests/test_generators/test_python/test_requests/GET/ . Tip Puedes usar un m\u00f3dulo de test ya implementado como referencia escribiendo uno para la implementaci\u00f3n.","title":"Creando casos de tests"},{"location":"es/reference/","text":"API p\u00fablica \u00b6 generate_http_request_code \u00b6 from http_request_codegen import generate_http_request_code Genera un trozo de c\u00f3digo de una petici\u00f3n HTTP para una biblioteca de un lenguaje de programaci\u00f3n dado o una interfaz de l\u00ednea de comandos de un programa, basado en un m\u00e9todo HTTP v\u00e1lido y una especificaci\u00f3n de par\u00e1metros. Hay algunas peculiaridades concernientes a ciertos m\u00e9todos: POST La mayor\u00eda de implementaciones de m\u00e9todos POST renderizan sus trozos de c\u00f3digo diferente, dependiendo del encabezado Content-Types , incluyendo por defecto algunos de los comportamientos seg\u00fan dicho encabezado m\u00e1s usados: El comportamiento por defecto, incluso si no lo especificas expl\u00edcitamente en el encabezado Content-Type es la generaci\u00f3n de una petici\u00f3n codificada como application/x-www-form-urlencoded . Si quieres generar una petici\u00f3n codificada como multipart/form-data , necesitas especificar los archivos a enviar usando el argumento files . Si especificas el encabezado Content-Type application/json , los par\u00e1metros enviados ser\u00e1n ajustados de acuerdo a la petici\u00f3n POST codificada como JSON. Si especificas el encabezado Content-Type text/plain , s\u00f3lo puedes enviar un par\u00e1metro y ser\u00e1 ajustado de acordemente siguiendo la implementaci\u00f3n. Parameters: Name Type Description Default language str Lenguaje de programaci\u00f3n o plataforma del trozo de c\u00f3digo resultante. Ver Soporte para comprobar las plataformas y lenguajes de programaci\u00f3n soportados. None impl str Tipo de implementaci\u00f3n usada para el trozo de c\u00f3digo. Puede ser una biblioteca, un programa o la API de un lenguaje. Ver Soporte para comprobar las implementaciones soportadas por lenguaje. None method str M\u00e9todo HTTP de la petici\u00f3n generada. 'GET' url str, iterable, callable Endpoint URL de la petici\u00f3n generada. Definido como una cadena, la url ser\u00e1 la cadena misma. Definido como un iterable, la url ser\u00e1 seleccionada aleatoriamente del iterable. Soporta recursividad: hasta que una cadena no se seleccione la recursi\u00f3n no se detendr\u00e1. Definido como un invocable, la url ser\u00e1 el valor retornado por el invocable. Soporta recursividad: hasta que una cadena no se seleccione la recursi\u00f3n no se detendr\u00e1. 'http://localhost' headers dict Mapeo de nombres y valores de encabezados. {} parameters list Lista de par\u00e1metros para la petici\u00f3n. Cada par\u00e1metro debe ser un diccionario. Este diccionario define, para cada par\u00e1metro, cual es el nombre del par\u00e1metro y como son generados los valores del par\u00e1metro: name ( str , list , function ): Nombre del par\u00e1metro. Al menos este el atributo names son requeridos. Definido como una cadena, el nombre ser\u00e1 la cadena misma. Definido como un iterable, el nombre ser\u00e1 seleccionado aleatoriamente del iterable. Soporta recursividad: si una cadena no es seleccionada la recursi\u00f3n no se detendr\u00e1. Definido como un invocable, el nombre ser\u00e1 el valor retornado por el invocable. Soporta recursividad: si una cadena no es seleccionada la recursi\u00f3n no se detendr\u00e1. names ( str , list , function ): Nombre del par\u00e1metro. Al menos este o el atributo name son requeridos. Definido como un iterable, el nombre ser\u00e1 seleccionado aleatoriamente del iterable. Soporta recursividad: si una cadena no es seleccionada la recursi\u00f3n no se detendr\u00e1. Definido como una cadena, debe ser un m\u00f3dulo de Python formateado como una ruta siguiendo el formato 'ruta.al.modulo::nombre_de_funcion' y el nombre retornado ser\u00e1 usado como el nombre para el par\u00e1metro, lo que es \u00fatil si elegir un valor aleatorio de una lista no se ajusta a tus necesidades. Definido como un invocable, el nombre ser\u00e1 el valor retornado por el invocable. Soporta recursividad: si una cadena no es seleccionada la recursi\u00f3n no se detendr\u00e1. type ( str , iterable , callable ): Tipo de dato del par\u00e1metro. Si no se define y value , values y faker tampoco lo son, ser\u00e1 considerada como una cadena y el valor del par\u00e1metro ser\u00e1 una palabra aleatoria construida usando la biblioteca faker . Para algunos tipos, otros atributos est\u00e1n soportados dentro del diccionario de par\u00e1metros, documentados si es as\u00ed en cada tipo. Los siguientes tipos de par\u00e1metros seg\u00fan el tipo de dato est\u00e1n soportados como atributos de diccionarios de par\u00e1metros, as\u00ed como sus correspondientes nombres en letras may\u00fasculas: 'str' : Tipo b\u00e1sico de cadena. Puede ser definido con el tipo integrado en Python str o las cadenas 'str' y 'string' . 'int' : Tipo entero b\u00e1sico. Puede ser definido con el tipo integrado en Python int o las cadenas 'int' e 'integer' . Por defecto, ser\u00e1 un entero en el rango -65536 a 65536. Los valores m\u00ednimos y m\u00e1ximos posibles pueden ser definidos con los atributos opcionales min y max . 'float' : Tipo de n\u00famero decimal. Puede ser definido con el tipo de dato integrado en Python float o las cadenas 'float' y number . Por defecto ser\u00e1 en el rango -65536 to 65536. Los valores m\u00e1ximos y m\u00ednimos posibles pueden ser definidos con los atributos de par\u00e1metro opcionales min y max y pueden ser redondeados con la funci\u00f3n integrada en Python round usando el atributo round . 'bool' : Tipo b\u00e1sico booleano. Puede ser definido con el tipo de dato integrado en Python bool o las cadenas 'bool' y 'boolean' . Retorna como valor del par\u00e1metro una de las cadenas 'true' o 'false' . Si pasas el atributo de par\u00e1metro opcional null como True , la cadena 'null' tambi\u00e9n puede ser retornada. 'uuid' : Tipo de identificador \u00fanico. Puede ser definido con el tipo Python uuid.UUID o las cadenas 'uuid' y 'uuid4' . Es un identificador \u00fanico v4 codificado como una cadena hexadecimal. 'id' : B\u00e1sico identificador como clave primaria. Es un entero positivo en el rango 1 a 65536. El valor m\u00e1ximo puede ser definido por el atributo opcional max . 'random' : Tipo aleatorio entre todos los tipos disponibles. Puedes definir una serie de tipos posibles pasando un iterable al atributo opcional de par\u00e1metro types . Definido como un iterable o invocable, el tipo ser\u00e1 seleccionado aleatoriamente desde el iterable, o el valor retornado desde el invocable ser\u00e1 usado. Esto te permite seleccionar un tipo aleatorio de una lista de tipos predefinidos. value ( str , iterable , callable ): Valor del par\u00e1metro. Si no est\u00e1 definido y type , values y faker tampoco lo est\u00e1n, el valor del par\u00e1metro ser\u00e1 una palabra aleatoria constru\u00edda usando la biblioteca faker. Definido como una cadena, el valor ser\u00e1 la cadena misma. Definido como un iterable, el valor ser\u00e1 seleccionado aleatoriamente del iterable. Soporta recursividad: si una cadena no es seleccionada la recursi\u00f3n no se detendr\u00e1. Definido como un invocable, el valor ser\u00e1 retornado del invocable. Soporta recursividad: si una cadena no es seleccionada la recursi\u00f3n no se detendr\u00e1. values ( list , iterable , callable ): Posibles valores para el par\u00e1metro. Definido como un iterable, el valor ser\u00e1 seleccionado aleatoriamente del iterable. Soporta recursividad: si una cadena no es seleccionada la recursi\u00f3n no se detendr\u00e1. Definido como una cadena, debe ser un m\u00f3dulo de Python formateado como una ruta de m\u00f3dulo siguiendo el formato 'ruta.al.modulo::nombre_de_funcion' y el valor retornado ser\u00e1 usado como el valor para el par\u00e1metro, lo cual es \u00fatil si elegir un valor aleatorio de una lista no se ajusta a tus necesidades. Definido como un invocable, el valor ser\u00e1 retornado del invocable. Soporta recursividad: si una cadena no es seleccionada la recursi\u00f3n no se detendr\u00e1. faker ( str , function ): Ruta a m\u00f3dulo formateada al estilo Python hacia una funci\u00f3n de un proveedor Faker usado para construir el valor aleatorio. Puede ser un proveedor est\u00e1ndar, externo o cualquier funci\u00f3n, pero si no es un proveedor, seed y locale no tendr\u00e1n efecto. Definido como una cadena debe seguir el formato 'path.to.provider.module::function' . [] files dict Mapeado de archivos a enviar a la URL. S\u00f3lo tiene efecto para m\u00e9todos POST. Si defines este argumento, el encabezado Content-Type de la petici\u00f3n ser\u00e1 asumido como 'multipart/form-data' , pero s\u00f3lo ser\u00e1 expl\u00edcitamente especificado en el c\u00f3digo generado si la implementaci\u00f3n lo necesita. Cada valor acepta una cadena, None o una tupla: Definido como una cadena, debe ser la ruta al archivo a enviar. Definido como None , la ruta al archivo ser\u00e1 aleatoria usando la funci\u00f3n faker.providers.file::file_path . Definido como una tupla, el primer valor debe ser la ruta del archivo a enviar (si es None ser\u00e1 aleatoria), el segundo valor el tipo de contenido del archivo y el tercer valor un diccionario de encabezados personalizados para el archivo. {} wrap int Ancho m\u00e1ximo del trozo de c\u00f3digo generado. Si se excede, el c\u00f3digo renderizado ser\u00e1 convenientemente formateado en m\u00faltiples l\u00edneas. 80 indent str Cadena de indentaci\u00f3n usada en el c\u00f3digo generado. Si no se define se usar\u00e1 la cadena de indentaci\u00f3n m\u00e1s com\u00fanmente usada para la implementaci\u00f3n. None quote_char str Caracter de puntuaci\u00f3n para cadenas usados en el c\u00f3digo generado. \"'\" setup bool, str Si es True , incluye el c\u00f3digo necesitado por una implementaci\u00f3n para realizar la petici\u00f3n. Podr\u00edan ser importaciones de m\u00f3dulos adicionales o inicializaci\u00f3n de objetos, dependiendo de la implementaci\u00f3n. Puedes personalizar este trozo pasando una cadena con el tr\u00f3zo de c\u00f3digo que quieres incluir. None teardown str Trozo de c\u00f3digo a incluir despu\u00e9s del c\u00f3digo de la petici\u00f3n HTTP. None oneline bool Renderiza el c\u00f3digo en s\u00f3lo una l\u00ednea. False seed int Semilla usada generando valores aleatorios falsos de par\u00e1metros. \u00datil si quieres generar el mismo conjunto de valores entre diferentes trozos de c\u00f3digo. None locale str Local usada por la biblioteca faker para localizar los valores aleatorios falsos para los par\u00e1metros. None Exceptions: Type Description ValueError Valor no es un valor v\u00e1lido en su contexto. TypeError Valores no concuerdan con los tipos soportados para ellos. ImportError Funci\u00f3n-modulo de Python especificada no puede ser importada con \u00e9xito. Returns: Type Description str Trozo de c\u00f3digo de petici\u00f3n HTTP. generate_http_request_md_fenced_code_block \u00b6 from http_request_codegen import generate_http_request_md_fenced_code_block Envuelve la funci\u00f3n generate_http_request_code en un bloque de c\u00f3digo Markdown. Parameters: Name Type Description Default fence_string str Cadena de caracteres que delimita el inicio y el final del bloque de c\u00f3gido. No realiza ninguna comprobaci\u00f3n sobre si la cadena es v\u00e1lida. '```' **kwargs Todos los otros argumentos opcionales son pasados a la funci\u00f3n generate_http_request_code . {} Examples: >>> generate_http_request_md_fenced_code_block ( setup = False ) \"```python \\n req = requests.get('http://localhost') \\n ```\" >>> generate_http_request_md_fenced_code_block ( fence_string = '~~~' , ... setup = False ) \"~~~python \\n req = requests.get('http://localhost') \\n ~~~\" Returns: Type Description str Bloque de c\u00f3digo Markdown con el tr\u00f3zo de c\u00f3digo de la petici\u00f3n dentro. lazy_name_by_parameter \u00b6 from http_request_codegen import lazy_name_by_parameter Dado un diccionario de opciones de par\u00e1metros, retorna el nombre de par\u00e1metro correspondiente construido siguiendo las reglas listadas en la documentaci\u00f3n del argumento parameters de la funci\u00f3n generate_http_request_code . La estrategia de construcci\u00f3n de nombre es comprobar los siguientes atributos en el orden dado: name names Puedes usar esta funci\u00f3n para construir los par\u00e1metros a un nivel m\u00e1s bajo. Esto puede ser usado, por ejemplo, para a\u00f1adir los par\u00e1metros a una URL generando c\u00f3digos de m\u00e9todos GET si una implementaci\u00f3n los a\u00f1ade como argumentos de una funci\u00f3n. Parameters: Name Type Description Default parameter_data dict Datos de especificaci\u00f3n de par\u00e1metro. Estan definidos en las secciones name y names de la documentaci\u00f3n de la funci\u00f3n generate_http_request_code . required seed int Semilla usada aleatorizando nombres. None Exceptions: Type Description ValueError ninguno de los atributos name o name est\u00e1n definidos dentro del diccionario parameter_data . Examples: >>> lazy_name_by_parameter ({ 'name' : 'foo' }) 'foo' >>> result = lazy_name_by_parameter ({ 'names' : [ 'foo' , 'bar' , 'baz' ]}) >>> result in [ 'foo' , 'bar' , 'baz' ] True Returns: Type Description str Nombre de par\u00e1metro. lazy_value_by_parameter \u00b6 from http_request_codegen import lazy_value_by_parameter Dado un diccionario de opciones de par\u00e1metros, retorna el valor correspondiente construido siguiendo las reglas listadas en el argumento parametros de la documentaci\u00f3n de la funci\u00f3n generate_http_request_code . Por ejemplo, dado {'type': int} como entrada, la salida ser\u00e1 un n\u00famero aleatorio como cadena. La estrategia de construcci\u00f3n del valor es comprobar los siguientes atributos en el orden dado: value 'values' 'faker' 'type' Si no se pasan ninguno de los atributos previos ser\u00e1 tratado como si se hubiera pasado {'type': str} , retornando una palabra aleatoria. Puedes usar esta funci\u00f3n para construir los par\u00e1metros a un nivel m\u00e1s bajo. Esto puede ser usado, por ejemplo, para a\u00f1adir los par\u00e1metros a una URL generando c\u00f3digos de m\u00e9todos GET si una implementaci\u00f3n los a\u00f1ade como argumentos de una funci\u00f3n. Parameters: Name Type Description Default parameter_data dict Datos de especificaci\u00f3n de par\u00e1metro. Est\u00e1n definidos en las secciones type , value , values y faker del argumento parameters en la documentaci\u00f3n de la funci\u00f3n generate_http_request_code . required seed int Semilla usada aleatorizando valores. None locale str Local usada por los proveedores de faker . None Examples: >>> lazy_value_by_parameter ({ 'value' : 'foo' }) 'foo' >>> result = lazy_value_by_parameter ({ 'values' : [ 'foo' , 'bar' , 'baz' ]}) >>> result in [ 'foo' , 'bar' , 'baz' ] True >>> result = lazy_value_by_parameter ({ 'type' : 'int' }) >>> result . replace ( '.' , '' , 1 ) . lstrip ( '-' ) . isnumeric () and \\ ... isinstance ( result , str ) True Exceptions: Type Description ImportError el atributo values apunta a un objeto de Python inexsistente. TypeError el valor del atributo 'faker' no contiene una cadena o un objeto de Python invocable, o si el atributo 'type' no soporta el tipo definido. ImportError valor del atributo faker , cuando es pasada como cadena, apunta un objeto de Python inexistente. Returns: Type Description str Valor de par\u00e1metro.","title":"Referencia"},{"location":"es/reference/#api-publica","text":"","title":"API p\u00fablica"},{"location":"es/reference/#generate_http_request_code","text":"from http_request_codegen import generate_http_request_code Genera un trozo de c\u00f3digo de una petici\u00f3n HTTP para una biblioteca de un lenguaje de programaci\u00f3n dado o una interfaz de l\u00ednea de comandos de un programa, basado en un m\u00e9todo HTTP v\u00e1lido y una especificaci\u00f3n de par\u00e1metros. Hay algunas peculiaridades concernientes a ciertos m\u00e9todos: POST La mayor\u00eda de implementaciones de m\u00e9todos POST renderizan sus trozos de c\u00f3digo diferente, dependiendo del encabezado Content-Types , incluyendo por defecto algunos de los comportamientos seg\u00fan dicho encabezado m\u00e1s usados: El comportamiento por defecto, incluso si no lo especificas expl\u00edcitamente en el encabezado Content-Type es la generaci\u00f3n de una petici\u00f3n codificada como application/x-www-form-urlencoded . Si quieres generar una petici\u00f3n codificada como multipart/form-data , necesitas especificar los archivos a enviar usando el argumento files . Si especificas el encabezado Content-Type application/json , los par\u00e1metros enviados ser\u00e1n ajustados de acuerdo a la petici\u00f3n POST codificada como JSON. Si especificas el encabezado Content-Type text/plain , s\u00f3lo puedes enviar un par\u00e1metro y ser\u00e1 ajustado de acordemente siguiendo la implementaci\u00f3n. Parameters: Name Type Description Default language str Lenguaje de programaci\u00f3n o plataforma del trozo de c\u00f3digo resultante. Ver Soporte para comprobar las plataformas y lenguajes de programaci\u00f3n soportados. None impl str Tipo de implementaci\u00f3n usada para el trozo de c\u00f3digo. Puede ser una biblioteca, un programa o la API de un lenguaje. Ver Soporte para comprobar las implementaciones soportadas por lenguaje. None method str M\u00e9todo HTTP de la petici\u00f3n generada. 'GET' url str, iterable, callable Endpoint URL de la petici\u00f3n generada. Definido como una cadena, la url ser\u00e1 la cadena misma. Definido como un iterable, la url ser\u00e1 seleccionada aleatoriamente del iterable. Soporta recursividad: hasta que una cadena no se seleccione la recursi\u00f3n no se detendr\u00e1. Definido como un invocable, la url ser\u00e1 el valor retornado por el invocable. Soporta recursividad: hasta que una cadena no se seleccione la recursi\u00f3n no se detendr\u00e1. 'http://localhost' headers dict Mapeo de nombres y valores de encabezados. {} parameters list Lista de par\u00e1metros para la petici\u00f3n. Cada par\u00e1metro debe ser un diccionario. Este diccionario define, para cada par\u00e1metro, cual es el nombre del par\u00e1metro y como son generados los valores del par\u00e1metro: name ( str , list , function ): Nombre del par\u00e1metro. Al menos este el atributo names son requeridos. Definido como una cadena, el nombre ser\u00e1 la cadena misma. Definido como un iterable, el nombre ser\u00e1 seleccionado aleatoriamente del iterable. Soporta recursividad: si una cadena no es seleccionada la recursi\u00f3n no se detendr\u00e1. Definido como un invocable, el nombre ser\u00e1 el valor retornado por el invocable. Soporta recursividad: si una cadena no es seleccionada la recursi\u00f3n no se detendr\u00e1. names ( str , list , function ): Nombre del par\u00e1metro. Al menos este o el atributo name son requeridos. Definido como un iterable, el nombre ser\u00e1 seleccionado aleatoriamente del iterable. Soporta recursividad: si una cadena no es seleccionada la recursi\u00f3n no se detendr\u00e1. Definido como una cadena, debe ser un m\u00f3dulo de Python formateado como una ruta siguiendo el formato 'ruta.al.modulo::nombre_de_funcion' y el nombre retornado ser\u00e1 usado como el nombre para el par\u00e1metro, lo que es \u00fatil si elegir un valor aleatorio de una lista no se ajusta a tus necesidades. Definido como un invocable, el nombre ser\u00e1 el valor retornado por el invocable. Soporta recursividad: si una cadena no es seleccionada la recursi\u00f3n no se detendr\u00e1. type ( str , iterable , callable ): Tipo de dato del par\u00e1metro. Si no se define y value , values y faker tampoco lo son, ser\u00e1 considerada como una cadena y el valor del par\u00e1metro ser\u00e1 una palabra aleatoria construida usando la biblioteca faker . Para algunos tipos, otros atributos est\u00e1n soportados dentro del diccionario de par\u00e1metros, documentados si es as\u00ed en cada tipo. Los siguientes tipos de par\u00e1metros seg\u00fan el tipo de dato est\u00e1n soportados como atributos de diccionarios de par\u00e1metros, as\u00ed como sus correspondientes nombres en letras may\u00fasculas: 'str' : Tipo b\u00e1sico de cadena. Puede ser definido con el tipo integrado en Python str o las cadenas 'str' y 'string' . 'int' : Tipo entero b\u00e1sico. Puede ser definido con el tipo integrado en Python int o las cadenas 'int' e 'integer' . Por defecto, ser\u00e1 un entero en el rango -65536 a 65536. Los valores m\u00ednimos y m\u00e1ximos posibles pueden ser definidos con los atributos opcionales min y max . 'float' : Tipo de n\u00famero decimal. Puede ser definido con el tipo de dato integrado en Python float o las cadenas 'float' y number . Por defecto ser\u00e1 en el rango -65536 to 65536. Los valores m\u00e1ximos y m\u00ednimos posibles pueden ser definidos con los atributos de par\u00e1metro opcionales min y max y pueden ser redondeados con la funci\u00f3n integrada en Python round usando el atributo round . 'bool' : Tipo b\u00e1sico booleano. Puede ser definido con el tipo de dato integrado en Python bool o las cadenas 'bool' y 'boolean' . Retorna como valor del par\u00e1metro una de las cadenas 'true' o 'false' . Si pasas el atributo de par\u00e1metro opcional null como True , la cadena 'null' tambi\u00e9n puede ser retornada. 'uuid' : Tipo de identificador \u00fanico. Puede ser definido con el tipo Python uuid.UUID o las cadenas 'uuid' y 'uuid4' . Es un identificador \u00fanico v4 codificado como una cadena hexadecimal. 'id' : B\u00e1sico identificador como clave primaria. Es un entero positivo en el rango 1 a 65536. El valor m\u00e1ximo puede ser definido por el atributo opcional max . 'random' : Tipo aleatorio entre todos los tipos disponibles. Puedes definir una serie de tipos posibles pasando un iterable al atributo opcional de par\u00e1metro types . Definido como un iterable o invocable, el tipo ser\u00e1 seleccionado aleatoriamente desde el iterable, o el valor retornado desde el invocable ser\u00e1 usado. Esto te permite seleccionar un tipo aleatorio de una lista de tipos predefinidos. value ( str , iterable , callable ): Valor del par\u00e1metro. Si no est\u00e1 definido y type , values y faker tampoco lo est\u00e1n, el valor del par\u00e1metro ser\u00e1 una palabra aleatoria constru\u00edda usando la biblioteca faker. Definido como una cadena, el valor ser\u00e1 la cadena misma. Definido como un iterable, el valor ser\u00e1 seleccionado aleatoriamente del iterable. Soporta recursividad: si una cadena no es seleccionada la recursi\u00f3n no se detendr\u00e1. Definido como un invocable, el valor ser\u00e1 retornado del invocable. Soporta recursividad: si una cadena no es seleccionada la recursi\u00f3n no se detendr\u00e1. values ( list , iterable , callable ): Posibles valores para el par\u00e1metro. Definido como un iterable, el valor ser\u00e1 seleccionado aleatoriamente del iterable. Soporta recursividad: si una cadena no es seleccionada la recursi\u00f3n no se detendr\u00e1. Definido como una cadena, debe ser un m\u00f3dulo de Python formateado como una ruta de m\u00f3dulo siguiendo el formato 'ruta.al.modulo::nombre_de_funcion' y el valor retornado ser\u00e1 usado como el valor para el par\u00e1metro, lo cual es \u00fatil si elegir un valor aleatorio de una lista no se ajusta a tus necesidades. Definido como un invocable, el valor ser\u00e1 retornado del invocable. Soporta recursividad: si una cadena no es seleccionada la recursi\u00f3n no se detendr\u00e1. faker ( str , function ): Ruta a m\u00f3dulo formateada al estilo Python hacia una funci\u00f3n de un proveedor Faker usado para construir el valor aleatorio. Puede ser un proveedor est\u00e1ndar, externo o cualquier funci\u00f3n, pero si no es un proveedor, seed y locale no tendr\u00e1n efecto. Definido como una cadena debe seguir el formato 'path.to.provider.module::function' . [] files dict Mapeado de archivos a enviar a la URL. S\u00f3lo tiene efecto para m\u00e9todos POST. Si defines este argumento, el encabezado Content-Type de la petici\u00f3n ser\u00e1 asumido como 'multipart/form-data' , pero s\u00f3lo ser\u00e1 expl\u00edcitamente especificado en el c\u00f3digo generado si la implementaci\u00f3n lo necesita. Cada valor acepta una cadena, None o una tupla: Definido como una cadena, debe ser la ruta al archivo a enviar. Definido como None , la ruta al archivo ser\u00e1 aleatoria usando la funci\u00f3n faker.providers.file::file_path . Definido como una tupla, el primer valor debe ser la ruta del archivo a enviar (si es None ser\u00e1 aleatoria), el segundo valor el tipo de contenido del archivo y el tercer valor un diccionario de encabezados personalizados para el archivo. {} wrap int Ancho m\u00e1ximo del trozo de c\u00f3digo generado. Si se excede, el c\u00f3digo renderizado ser\u00e1 convenientemente formateado en m\u00faltiples l\u00edneas. 80 indent str Cadena de indentaci\u00f3n usada en el c\u00f3digo generado. Si no se define se usar\u00e1 la cadena de indentaci\u00f3n m\u00e1s com\u00fanmente usada para la implementaci\u00f3n. None quote_char str Caracter de puntuaci\u00f3n para cadenas usados en el c\u00f3digo generado. \"'\" setup bool, str Si es True , incluye el c\u00f3digo necesitado por una implementaci\u00f3n para realizar la petici\u00f3n. Podr\u00edan ser importaciones de m\u00f3dulos adicionales o inicializaci\u00f3n de objetos, dependiendo de la implementaci\u00f3n. Puedes personalizar este trozo pasando una cadena con el tr\u00f3zo de c\u00f3digo que quieres incluir. None teardown str Trozo de c\u00f3digo a incluir despu\u00e9s del c\u00f3digo de la petici\u00f3n HTTP. None oneline bool Renderiza el c\u00f3digo en s\u00f3lo una l\u00ednea. False seed int Semilla usada generando valores aleatorios falsos de par\u00e1metros. \u00datil si quieres generar el mismo conjunto de valores entre diferentes trozos de c\u00f3digo. None locale str Local usada por la biblioteca faker para localizar los valores aleatorios falsos para los par\u00e1metros. None Exceptions: Type Description ValueError Valor no es un valor v\u00e1lido en su contexto. TypeError Valores no concuerdan con los tipos soportados para ellos. ImportError Funci\u00f3n-modulo de Python especificada no puede ser importada con \u00e9xito. Returns: Type Description str Trozo de c\u00f3digo de petici\u00f3n HTTP.","title":"generate_http_request_code"},{"location":"es/reference/#generate_http_request_md_fenced_code_block","text":"from http_request_codegen import generate_http_request_md_fenced_code_block Envuelve la funci\u00f3n generate_http_request_code en un bloque de c\u00f3digo Markdown. Parameters: Name Type Description Default fence_string str Cadena de caracteres que delimita el inicio y el final del bloque de c\u00f3gido. No realiza ninguna comprobaci\u00f3n sobre si la cadena es v\u00e1lida. '```' **kwargs Todos los otros argumentos opcionales son pasados a la funci\u00f3n generate_http_request_code . {} Examples: >>> generate_http_request_md_fenced_code_block ( setup = False ) \"```python \\n req = requests.get('http://localhost') \\n ```\" >>> generate_http_request_md_fenced_code_block ( fence_string = '~~~' , ... setup = False ) \"~~~python \\n req = requests.get('http://localhost') \\n ~~~\" Returns: Type Description str Bloque de c\u00f3digo Markdown con el tr\u00f3zo de c\u00f3digo de la petici\u00f3n dentro.","title":"generate_http_request_md_fenced_code_block"},{"location":"es/reference/#lazy_name_by_parameter","text":"from http_request_codegen import lazy_name_by_parameter Dado un diccionario de opciones de par\u00e1metros, retorna el nombre de par\u00e1metro correspondiente construido siguiendo las reglas listadas en la documentaci\u00f3n del argumento parameters de la funci\u00f3n generate_http_request_code . La estrategia de construcci\u00f3n de nombre es comprobar los siguientes atributos en el orden dado: name names Puedes usar esta funci\u00f3n para construir los par\u00e1metros a un nivel m\u00e1s bajo. Esto puede ser usado, por ejemplo, para a\u00f1adir los par\u00e1metros a una URL generando c\u00f3digos de m\u00e9todos GET si una implementaci\u00f3n los a\u00f1ade como argumentos de una funci\u00f3n. Parameters: Name Type Description Default parameter_data dict Datos de especificaci\u00f3n de par\u00e1metro. Estan definidos en las secciones name y names de la documentaci\u00f3n de la funci\u00f3n generate_http_request_code . required seed int Semilla usada aleatorizando nombres. None Exceptions: Type Description ValueError ninguno de los atributos name o name est\u00e1n definidos dentro del diccionario parameter_data . Examples: >>> lazy_name_by_parameter ({ 'name' : 'foo' }) 'foo' >>> result = lazy_name_by_parameter ({ 'names' : [ 'foo' , 'bar' , 'baz' ]}) >>> result in [ 'foo' , 'bar' , 'baz' ] True Returns: Type Description str Nombre de par\u00e1metro.","title":"lazy_name_by_parameter"},{"location":"es/reference/#lazy_value_by_parameter","text":"from http_request_codegen import lazy_value_by_parameter Dado un diccionario de opciones de par\u00e1metros, retorna el valor correspondiente construido siguiendo las reglas listadas en el argumento parametros de la documentaci\u00f3n de la funci\u00f3n generate_http_request_code . Por ejemplo, dado {'type': int} como entrada, la salida ser\u00e1 un n\u00famero aleatorio como cadena. La estrategia de construcci\u00f3n del valor es comprobar los siguientes atributos en el orden dado: value 'values' 'faker' 'type' Si no se pasan ninguno de los atributos previos ser\u00e1 tratado como si se hubiera pasado {'type': str} , retornando una palabra aleatoria. Puedes usar esta funci\u00f3n para construir los par\u00e1metros a un nivel m\u00e1s bajo. Esto puede ser usado, por ejemplo, para a\u00f1adir los par\u00e1metros a una URL generando c\u00f3digos de m\u00e9todos GET si una implementaci\u00f3n los a\u00f1ade como argumentos de una funci\u00f3n. Parameters: Name Type Description Default parameter_data dict Datos de especificaci\u00f3n de par\u00e1metro. Est\u00e1n definidos en las secciones type , value , values y faker del argumento parameters en la documentaci\u00f3n de la funci\u00f3n generate_http_request_code . required seed int Semilla usada aleatorizando valores. None locale str Local usada por los proveedores de faker . None Examples: >>> lazy_value_by_parameter ({ 'value' : 'foo' }) 'foo' >>> result = lazy_value_by_parameter ({ 'values' : [ 'foo' , 'bar' , 'baz' ]}) >>> result in [ 'foo' , 'bar' , 'baz' ] True >>> result = lazy_value_by_parameter ({ 'type' : 'int' }) >>> result . replace ( '.' , '' , 1 ) . lstrip ( '-' ) . isnumeric () and \\ ... isinstance ( result , str ) True Exceptions: Type Description ImportError el atributo values apunta a un objeto de Python inexsistente. TypeError el valor del atributo 'faker' no contiene una cadena o un objeto de Python invocable, o si el atributo 'type' no soporta el tipo definido. ImportError valor del atributo faker , cuando es pasada como cadena, apunta un objeto de Python inexistente. Returns: Type Description str Valor de par\u00e1metro.","title":"lazy_value_by_parameter"}]}