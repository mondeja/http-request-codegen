{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Introduction","text":"<p>http-request-codegen generates HTTP request code snippets for different implementations. It's perfect if you want to include examples documenting APIs. Supports the following features:</p> <ul> <li>Request parameters values randomization using multiples strategies:<ul> <li>Random values from iterables and callables.</li> <li>Random values from data types.</li> <li>Random values from Faker providers.</li> <li>Randomization using seeds and localization.</li> </ul> </li> <li>Request headers customization.</li> <li>Request optional arguments by implementation.</li> <li>Custom line wrapping.</li> <li>Custom indentation.</li> <li>Custom quotation characters.</li> <li>Rendering in one line.</li> </ul>  <p>Remember</p> <p>This is not a greater level API across multiple HTTP request libraries, but it is written so that you can generate the most common types of HTTP requests regardless of the implementation.</p>"},{"location":"#installation","title":"Installation","text":"pip <pre><code>pip install http-request-codegen\n</code></pre>  pipenv <pre><code>pipenv install http-request-codegen\n</code></pre>  source <pre><code>git clone https://github.com/mondeja/http-request-codegen.git --depth=1\ncd http-request-codegen\npython setup.py install\n</code></pre>  development <pre><code>git clone https://github.com/mondeja/http-request-codegen.git\ncd http-request-codegen\npip install -e .[dev]\n</code></pre>"},{"location":"#demo","title":"Demo","text":"Javascript fetch GET Input <pre><code>import fake_module\n\nfrom http_request_codegen import generate_http_request_code\n\ngenerate_http_request_code(\n    language='javascript',\n    impl='fetch',\n    method='GET',\n    url='https://github.com/mondeja/http-request-codegen',\n    headers={\n        'Content-Type': 'application/json',\n        'Accept-Language': '*'\n    },\n    seed=2032,\n    parameters=[\n        {\n            'name': 'fixed-value',\n            'value': 3\n        },\n        {\n            'name': 'dinamic-value-by-iterable',\n            'value': [1, 2, 3]  # same as 'values': [1, 2, 3]\n        },\n        {\n            'name': 'dinamic-value-by-function',\n            'value': fake_module.integers_from_1_to_10\n        },\n\n        # Parameter value randomization\n        {\n            'name': 'random-values-by-iterable',\n            'values': ['foo', 'bar', 'baz']\n        },\n        {\n            'name': 'random-values-by-function',\n            'values': fake_module.integers_from_1_to_10\n        },\n        {\n            'name': 'random-values-by-function-path',\n            'values': 'fake_module::integers_from_1_to_10'\n        },\n        {\n            'name': 'random-value-by-faker-provider-function-path',\n            'faker': 'faker.providers.job::job'\n        },\n        {\n            'name': 'random-string',  # by default: random word\n            'type': 'str'\n        },\n        {\n            'name': 'random-integer',\n            'type': 'int',\n        },\n        {\n            'name': 'random-integer-in-range',\n            'type': int,  # You can use Python types also\n            'min': 2,\n            'max': 5,\n        },\n        {\n            'name': 'random-float',\n            'type': 'number',  # You can use some type aliases also\n        },\n        {\n            'name': 'random-rounded-float-in-range',\n            'type': float,\n            'min': 1.555,\n            'max': 2.555,\n            'round': 3\n        },\n        {\n            'name': 'random-boolean',\n            'type': bool\n        },\n        {\n            'name': 'random-boolean-nullable',\n            'type': 'boolean',\n            'null': True\n        },\n        {\n            'name': 'random-type',\n            'type': 'random'  # random type from availables\n        },\n        {\n            'name': 'random-unique-identifier',\n            'type': 'uuid'\n        },\n        {\n            'name': 'random-id',  # positive integer\n            'type': 'id'\n        },\n\n        # Parameter name randomization\n        {\n            'name': ['random-name-from-iterable',\n                     'random-name-by-iterable'],\n            'type': 'str',\n        },\n        {\n            'name': fake_module.random_name_by_function,\n            'type': 'random',\n        },\n    ]\n)\n</code></pre> <p>This implementation will emulate browsers' fetch API by default. using Promises-like response processing.</p> <p>If you want to simulate a NodeJS environment, pass the parameter <code>setup</code> as <code>True</code> and the next initialization snippet will be prepended to the generated code:</p> <pre><code>const fetch = require('node-fetch');\n</code></pre> <p>For ESM imports emulation, use <code>setup='import fetch from \\'node-fetch\\';\\n\\n'</code>, thus the initialization snippet will be:</p> <pre><code>import fetch from 'node-fetch';\n</code></pre> <p>Of course, you can customize this initialization for other environments. For example, polyfill the API using whatwg as ESM module with <code>setup='import \\'whatwg-fetch\\';\\n\\n'</code>:</p> <pre><code>import 'whatwg-fetch';\n</code></pre>  Output <pre><code>fetch(\n  'https://github.com/mondeja/http-request-codegen?fixed-value=3&amp;dinamic-value'\n  + '-by-iterable=1&amp;dinamic-value-by-function=0&amp;random-values-by-iterable=foo&amp;'\n  + 'random-values-by-function=0&amp;random-values-by-function-path=0&amp;random-value'\n  + '-by-faker-provider-function-path=Analytical+chemist&amp;random-string=party&amp;r'\n  + 'andom-integer=-56649&amp;random-integer-in-range=2&amp;random-float=42960.2871424'\n  + '83445&amp;random-rounded-float-in-range=2.383&amp;random-boolean=true&amp;random-bool'\n  + 'ean-nullable=true&amp;random-type=religious&amp;random-unique-identifier=ecccd9c2'\n  + 'a80c4e43a90459d0c91756cc&amp;random-id=4444&amp;random-name-from-iterable=main&amp;ra'\n  + 'ndom-name-from-function=camera',\n  {\n    headers: {\n      'Content-Type': 'application/json',\n      'Accept-Language': '*'\n    }\n  }\n).then(function(response) {\n  console.log(response);\n}).catch(function(err) {\n  console.error('Error:', err);\n});\n</code></pre>    POST application/x-www-form-urlencoded Input <pre><code>import fake_module\n\nfrom http_request_codegen import generate_http_request_code\n\ngenerate_http_request_code(\n    language='javascript',\n    impl='fetch',\n    method='POST',\n    url='https://github.com/mondeja/http-request-codegen',\n    headers={\n        'Accept-Language': '*',\n        'Accept-Charset': 'utf-8'\n    },\n    seed=2032,\n    parameters=[\n        {\n            'name': 'fixed-value',\n            'value': 3\n        },\n        {\n            'name': 'dinamic-value-by-iterable',\n            'value': [1, 2, 3]  # same as 'values': [1, 2, 3]\n        },\n        {\n            'name': 'dinamic-value-by-function',\n            'value': fake_module.integers_from_1_to_10\n        },\n\n        # Parameter value randomization\n        {\n            'name': 'random-values-by-iterable',\n            'values': ['foo', 'bar', 'baz']\n        },\n        {\n            'name': 'random-values-by-function',\n            'values': fake_module.integers_from_1_to_10\n        },\n        {\n            'name': 'random-values-by-function-path',\n            'values': 'fake_module::integers_from_1_to_10'\n        },\n        {\n            'name': 'random-value-by-faker-provider-function-path',\n            'faker': 'faker.providers.job::job'\n        },\n        {\n            'name': 'random-string',  # by default: random word\n            'type': 'str'\n        },\n        {\n            'name': 'random-integer',\n            'type': 'int',\n        },\n        {\n            'name': 'random-integer-in-range',\n            'type': int,  # You can use Python types also\n            'min': 2,\n            'max': 5,\n        },\n        {\n            'name': 'random-float',\n            'type': 'number',  # You can use some type aliases also\n        },\n        {\n            'name': 'random-rounded-float-in-range',\n            'type': float,\n            'min': 1.555,\n            'max': 2.555,\n            'round': 3\n        },\n        {\n            'name': 'random-boolean',\n            'type': bool\n        },\n        {\n            'name': 'random-boolean-nullable',\n            'type': 'boolean',\n            'null': True\n        },\n        {\n            'name': 'random-type',\n            'type': 'random'  # random type from availables\n        },\n        {\n            'name': 'random-unique-identifier',\n            'type': 'uuid'\n        },\n        {\n            'name': 'random-id',  # positive integer\n            'type': 'id'\n        },\n\n        # Parameter name randomization\n        {\n            'name': ['random-name-from-iterable',\n                     'random-name-by-iterable'],\n            'type': 'str',\n        },\n        {\n            'name': fake_module.random_name_by_function,\n            'type': 'random',\n        },\n    ]\n)\n</code></pre>  Output <pre><code>const fetch = require('node-fetch');\n\nfetch(\n  'https://github.com/mondeja/http-request-codegen',\n  {  \n    method: 'POST',\n    body: new URLSearchParams({\n      'fixed-value': '3',\n      'dinamic-value-by-iterable': '1',\n      'dinamic-value-by-function': '0',\n      'random-values-by-iterable': 'foo',\n      'random-values-by-function': '0',\n      'random-values-by-function-path': '0',\n      'random-value-by-faker-provider-function-path': 'Psychologist, education'\n                                                      + 'al',\n      'random-string': 'drive',\n      'random-integer': '-56649',\n      'random-integer-in-range': '2',\n      'random-float': '42960.287142483445',\n      'random-rounded-float-in-range': '2.383',\n      'random-boolean': 'true',\n      'random-boolean-nullable': 'true',\n      'random-type': 'control',\n      'random-unique-identifier': '904413fe28cc4fc0a9b6f671fde19ded',\n      'random-id': '4444',\n      'random-name-from-iterable': 'people',\n      'random-name-from-function': 'realize'\n    }),\n    headers: {\n      'Accept-Language': '*',\n      'Accept-Charset': 'utf-8'\n    }\n  }\n).then(function(response) {\n  console.log(response);\n}).catch(function(err) {\n  console.error('Error:', err);\n});\n</code></pre>    multipart/form-data Input <pre><code>from http_request_codegen import generate_http_request_code\n\ngenerate_http_request_code(\n    language='javascript',\n    impl='fetch',\n    method='POST',\n    url='https://github.com/mondeja/http-request-codegen',\n    headers={\n        'Accept-Language': '*',\n        'Accept-Charset': 'utf-8'\n    },\n    seed=2032,\n    files={\n        'fixed-filepath': '/tmp/foo.txt',\n        'random-filepath': None,\n        'fixed-filepath-content-type': (\n            '/tmp/bar.csv',\n            'text/csv'\n        ),\n        'fixed-filepath-ct-header': (\n            '/tmp/bar.json',\n            'application/json',\n            {'Accept-Charset': 'utf-8'}\n        ),\n        'random-filepath-content-type': (\n            None,\n            'text/plain'\n        ),\n        'random-filepath-ct-header': (\n            None,\n            'text/csv',\n            {'Accept-Charset': 'utf-8'}\n        )\n    }\n)\n</code></pre>  Output <pre><code>const fs = require('fs');\n\nconst fetch = require('node-fetch');\nconst FormData = require('form-data');\n\nconst formData = new FormData();\nformData.append(\n  'fixed-filepath',\n  fs.createReadStream('/tmp/foo.txt'),\n  {\n    filename: 'foo.txt'\n  }\n);\nformData.append(\n  'random-filepath',\n  fs.createReadStream('/simply/stock.doc'),\n  {\n    filename: 'stock.doc'\n  }\n);\nformData.append(\n  'fixed-filepath-content-type',\n  fs.createReadStream('/tmp/bar.csv'),\n  {\n    filename: 'bar.csv',\n    contentType: 'text/csv'\n  }\n);\nformData.append(\n  'fixed-filepath-ct-header',\n  fs.createReadStream('/tmp/bar.json'),\n  {\n    filename: 'bar.json',\n    contentType: 'application/json'\n  }\n);\nformData.append(\n  'random-filepath-content-type',\n  fs.createReadStream('/civil/young.jpg'),\n  {\n    filename: 'young.jpg',\n    contentType: 'text/plain'\n  }\n);\nformData.append(\n  'random-filepath-ct-header',\n  fs.createReadStream('/first/start.tiff'),\n  {\n    filename: 'start.tiff',\n    contentType: 'text/csv'\n  }\n);\n\nfetch(\n  'https://github.com/mondeja/http-request-codegen',\n  {  \n    method: 'POST',\n    body: formData,\n    headers: {\n      'Accept-Language': '*',\n      'Accept-Charset': 'utf-8'\n    }\n  }\n).then(function(response) {\n  console.log(response);\n}).catch(function(err) {\n  console.error('Error:', err);\n});\n</code></pre>    application/json Input <pre><code>import fake_module\n\nfrom http_request_codegen import generate_http_request_code\n\ngenerate_http_request_code(\n    language='javascript',\n    impl='fetch',\n    method='POST',\n    url='https://github.com/mondeja/http-request-codegen',\n    headers={\n        'Content-Type': 'application/json'\n    },\n    seed=2032,\n    parameters=[\n        {\n            'name': 'fixed-value',\n            'value': 3\n        },\n        {\n            'name': 'dinamic-value-by-iterable',\n            'value': [1, 2, 3]  # same as 'values': [1, 2, 3]\n        },\n        {\n            'name': 'dinamic-value-by-function',\n            'value': fake_module.integers_from_1_to_10\n        },\n\n        # Parameter value randomization\n        {\n            'name': 'random-values-by-iterable',\n            'values': ['foo', 'bar', 'baz']\n        },\n        {\n            'name': 'random-values-by-function',\n            'values': fake_module.integers_from_1_to_10\n        },\n        {\n            'name': 'random-values-by-function-path',\n            'values': 'fake_module::integers_from_1_to_10'\n        },\n        {\n            'name': 'random-value-by-faker-provider-function-path',\n            'faker': 'faker.providers.job::job'\n        },\n        {\n            'name': 'random-string',  # by default: random word\n            'type': 'str'\n        },\n        {\n            'name': 'random-integer',\n            'type': 'int',\n        },\n        {\n            'name': 'random-integer-in-range',\n            'type': int,  # You can use Python types also\n            'min': 2,\n            'max': 5,\n        },\n        {\n            'name': 'random-float',\n            'type': 'number',  # You can use some type aliases also\n        },\n        {\n            'name': 'random-rounded-float-in-range',\n            'type': float,\n            'min': 1.555,\n            'max': 2.555,\n            'round': 3\n        },\n        {\n            'name': 'random-boolean',\n            'type': bool\n        },\n        {\n            'name': 'random-boolean-nullable',\n            'type': 'boolean',\n            'null': True\n        },\n        {\n            'name': 'random-type',\n            'type': 'random'  # random type from availables\n        },\n        {\n            'name': 'random-unique-identifier',\n            'type': 'uuid'\n        },\n        {\n            'name': 'random-id',  # positive integer\n            'type': 'id'\n        },\n\n        # Parameter name randomization\n        {\n            'name': ['random-name-from-iterable',\n                     'random-name-by-iterable'],\n            'type': 'str',\n        },\n        {\n            'name': fake_module.random_name_by_function,\n            'type': 'random',\n        },\n    ]\n)\n</code></pre>  Output <pre><code>const fetch = require('node-fetch');\n\nfetch(\n  'https://github.com/mondeja/http-request-codegen',\n  {  \n    method: 'POST',\n    body: JSON.stringify({\n      'fixed-value': '3',\n      'dinamic-value-by-iterable': '1',\n      'dinamic-value-by-function': '0',\n      'random-values-by-iterable': 'foo',\n      'random-values-by-function': '0',\n      'random-values-by-function-path': '0',\n      'random-value-by-faker-provider-function-path': 'Financial controller',\n      'random-string': 'stage',\n      'random-integer': '-56649',\n      'random-integer-in-range': '2',\n      'random-float': '42960.287142483445',\n      'random-rounded-float-in-range': '2.383',\n      'random-boolean': 'true',\n      'random-boolean-nullable': 'true',\n      'random-type': 'speech',\n      'random-unique-identifier': 'bdf7385745384a46ab83c8dabe1eee42',\n      'random-id': '4444',\n      'random-name-from-iterable': 'Republican',\n      'random-name-from-function': 'pay'\n    }),\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  }\n).then(function(response) {\n  console.log(response);\n}).catch(function(err) {\n  console.error('Error:', err);\n});\n</code></pre>    text/plain Input <pre><code>from http_request_codegen import generate_http_request_code\n\ngenerate_http_request_code(\n    language='javascript',\n    impl='fetch',\n    method='POST',\n    url='https://github.com/mondeja/http-request-codegen',\n    headers={\n        'Content-Type': 'text/plain'\n    },\n    seed=2032,\n    parameters=[\n        {\n            'name': 'random-values-by-iterable',\n            'values': ['foo', 'bar', 'baz']\n        }\n    ]\n)\n</code></pre>  Output <pre><code>const fetch = require('node-fetch');\n\nfetch(\n  'https://github.com/mondeja/http-request-codegen',\n  {  \n    method: 'POST',\n    body: 'foo',\n    headers: {\n      'Content-Type': 'text/plain'\n    }\n  }\n).then(function(response) {\n  console.log(response);\n}).catch(function(err) {\n  console.error('Error:', err);\n});\n</code></pre>          Python requests GET Input <pre><code>import fake_module\n\nfrom http_request_codegen import generate_http_request_code\n\ngenerate_http_request_code(\n    language='python',\n    impl='requests',\n    method='GET',\n    url='https://github.com/mondeja/http-request-codegen',\n    headers={\n        'Content-Type': 'application/json',\n        'Accept-Language': '*'\n    },\n    seed=2032,\n    parameters=[\n        {\n            'name': 'fixed-value',\n            'value': 3\n        },\n        {\n            'name': 'dinamic-value-by-iterable',\n            'value': [1, 2, 3]  # same as 'values': [1, 2, 3]\n        },\n        {\n            'name': 'dinamic-value-by-function',\n            'value': fake_module.integers_from_1_to_10\n        },\n\n        # Parameter value randomization\n        {\n            'name': 'random-values-by-iterable',\n            'values': ['foo', 'bar', 'baz']\n        },\n        {\n            'name': 'random-values-by-function',\n            'values': fake_module.integers_from_1_to_10\n        },\n        {\n            'name': 'random-values-by-function-path',\n            'values': 'fake_module::integers_from_1_to_10'\n        },\n        {\n            'name': 'random-value-by-faker-provider-function-path',\n            'faker': 'faker.providers.job::job'\n        },\n        {\n            'name': 'random-string',  # by default: random word\n            'type': 'str'\n        },\n        {\n            'name': 'random-integer',\n            'type': 'int',\n        },\n        {\n            'name': 'random-integer-in-range',\n            'type': int,  # You can use Python types also\n            'min': 2,\n            'max': 5,\n        },\n        {\n            'name': 'random-float',\n            'type': 'number',  # You can use some type aliases also\n        },\n        {\n            'name': 'random-rounded-float-in-range',\n            'type': float,\n            'min': 1.555,\n            'max': 2.555,\n            'round': 3\n        },\n        {\n            'name': 'random-boolean',\n            'type': bool\n        },\n        {\n            'name': 'random-boolean-nullable',\n            'type': 'boolean',\n            'null': True\n        },\n        {\n            'name': 'random-type',\n            'type': 'random'  # random type from availables\n        },\n        {\n            'name': 'random-unique-identifier',\n            'type': 'uuid'\n        },\n        {\n            'name': 'random-id',  # positive integer\n            'type': 'id'\n        },\n\n        # Parameter name randomization\n        {\n            'name': ['random-name-from-iterable',\n                     'random-name-by-iterable'],\n            'type': 'str',\n        },\n        {\n            'name': fake_module.random_name_by_function,\n            'type': 'random',\n        },\n    ]\n)\n</code></pre> <p>Parameters are passed using <code>requests.get</code> function <code>params</code> parameter, not by appending <code>?foo=bar&amp;...</code> to the URL. If you want this behaviour, build the passed URL using <code>lazy_name_by_parameter</code> and <code>lazy_value_by_parameter</code> functions instead of use the <code>parameters</code> argument.</p> <p>If you want to import more modules in the initialization snippet, keep in mind that you must provide <code>import requests</code> line also in the <code>setup</code> argument. For example, <code>setup='import requests\\nimport foo\\n\\n'</code> will render as:</p> <pre><code>import requests\nimport foo\n\nrequests.get('&lt;url&gt;'...\n</code></pre>  Output <pre><code>import requests\n\nreq = requests.get(\n    'https://github.com/mondeja/http-request-codegen',\n    params={\n        'fixed-value': '3',\n        'dinamic-value-by-iterable': '1',\n        'dinamic-value-by-function': '0',\n        'random-values-by-iterable': 'foo',\n        'random-values-by-function': '0',\n        'random-values-by-function-path': '0',\n        'random-value-by-faker-provider-function-path': 'Engineer, energy',\n        'random-string': 'bed',\n        'random-integer': '-56649',\n        'random-integer-in-range': '2',\n        'random-float': '42960.287142483445',\n        'random-rounded-float-in-range': '2.383',\n        'random-boolean': 'true',\n        'random-boolean-nullable': 'true',\n        'random-type': 'political',\n        'random-unique-identifier': 'a19011bf47d04d488b2e14dc23b8deff',\n        'random-id': '4444',\n        'random-name-from-iterable': 'develop',\n        'random-name-from-function': 'stuff'\n    },\n    headers={\n        'Content-Type': 'application/json',\n        'Accept-Language': '*'\n    }\n)\n</code></pre>    POST application/x-www-form-urlencoded Input <pre><code>import fake_module\n\nfrom http_request_codegen import generate_http_request_code\n\ngenerate_http_request_code(\n    language='python',\n    impl='requests',\n    method='POST',\n    url='https://github.com/mondeja/http-request-codegen',\n    headers={\n        'Accept-Language': '*',\n        'Accept-Charset': 'utf-8'\n    },\n    seed=2032,\n    parameters=[\n        {\n            'name': 'fixed-value',\n            'value': 3\n        },\n        {\n            'name': 'dinamic-value-by-iterable',\n            'value': [1, 2, 3]  # same as 'values': [1, 2, 3]\n        },\n        {\n            'name': 'dinamic-value-by-function',\n            'value': fake_module.integers_from_1_to_10\n        },\n\n        # Parameter value randomization\n        {\n            'name': 'random-values-by-iterable',\n            'values': ['foo', 'bar', 'baz']\n        },\n        {\n            'name': 'random-values-by-function',\n            'values': fake_module.integers_from_1_to_10\n        },\n        {\n            'name': 'random-values-by-function-path',\n            'values': 'fake_module::integers_from_1_to_10'\n        },\n        {\n            'name': 'random-value-by-faker-provider-function-path',\n            'faker': 'faker.providers.job::job'\n        },\n        {\n            'name': 'random-string',  # by default: random word\n            'type': 'str'\n        },\n        {\n            'name': 'random-integer',\n            'type': 'int',\n        },\n        {\n            'name': 'random-integer-in-range',\n            'type': int,  # You can use Python types also\n            'min': 2,\n            'max': 5,\n        },\n        {\n            'name': 'random-float',\n            'type': 'number',  # You can use some type aliases also\n        },\n        {\n            'name': 'random-rounded-float-in-range',\n            'type': float,\n            'min': 1.555,\n            'max': 2.555,\n            'round': 3\n        },\n        {\n            'name': 'random-boolean',\n            'type': bool\n        },\n        {\n            'name': 'random-boolean-nullable',\n            'type': 'boolean',\n            'null': True\n        },\n        {\n            'name': 'random-type',\n            'type': 'random'  # random type from availables\n        },\n        {\n            'name': 'random-unique-identifier',\n            'type': 'uuid'\n        },\n        {\n            'name': 'random-id',  # positive integer\n            'type': 'id'\n        },\n\n        # Parameter name randomization\n        {\n            'name': ['random-name-from-iterable',\n                     'random-name-by-iterable'],\n            'type': 'str',\n        },\n        {\n            'name': fake_module.random_name_by_function,\n            'type': 'random',\n        },\n    ]\n)\n</code></pre>  Output <pre><code>import requests\n\nreq = requests.post(\n    'https://github.com/mondeja/http-request-codegen',\n    data={\n        'fixed-value': '3',\n        'dinamic-value-by-iterable': '1',\n        'dinamic-value-by-function': '0',\n        'random-values-by-iterable': 'foo',\n        'random-values-by-function': '0',\n        'random-values-by-function-path': '0',\n        'random-value-by-faker-provider-function-path': ('Community developmen'\n                                                         't worker'),\n        'random-string': 'health',\n        'random-integer': '-56649',\n        'random-integer-in-range': '2',\n        'random-float': '42960.287142483445',\n        'random-rounded-float-in-range': '2.383',\n        'random-boolean': 'true',\n        'random-boolean-nullable': 'true',\n        'random-type': 'group',\n        'random-unique-identifier': '22d6f1b7b2f743c598b01228758794ff',\n        'random-id': '4444',\n        'random-name-from-iterable': 'good',\n        'random-name-from-function': 'decade'\n    },\n    headers={\n        'Accept-Language': '*',\n        'Accept-Charset': 'utf-8'\n    }\n)\n</code></pre>    multipart/form-data Input <pre><code>from http_request_codegen import generate_http_request_code\n\ngenerate_http_request_code(\n    language='python',\n    impl='requests',\n    method='POST',\n    url='https://github.com/mondeja/http-request-codegen',\n    headers={\n        'Accept-Language': '*',\n        'Accept-Charset': 'utf-8'\n    },\n    seed=2032,\n    files={\n        'fixed-filepath': '/tmp/foo.txt',\n        'random-filepath': None,\n        'fixed-filepath-content-type': (\n            '/tmp/bar.csv',\n            'text/csv'\n        ),\n        'fixed-filepath-ct-header': (\n            '/tmp/bar.json',\n            'application/json',\n            {'Accept-Charset': 'utf-8'}\n        ),\n        'random-filepath-content-type': (\n            None,\n            'text/plain'\n        ),\n        'random-filepath-ct-header': (\n            None,\n            'text/csv',\n            {'Accept-Charset': 'utf-8'}\n        )\n    }\n)\n</code></pre>  Output <pre><code>import requests\n\nreq = requests.post(\n    'https://github.com/mondeja/http-request-codegen',\n    files={\n        'fixed-filepath': (\n            '/tmp/foo.txt',\n            open('/tmp/foo.txt', 'rb')\n        ),\n        'random-filepath': (\n            '/right/case.webm',\n            open('/right/case.webm', 'rb')\n        ),\n        'fixed-filepath-content-type': (\n            '/tmp/bar.csv',\n            open('/tmp/bar.csv', 'rb'),\n            'text/csv'\n        ),\n        'fixed-filepath-ct-header': (\n            '/tmp/bar.json',\n            open('/tmp/bar.json', 'rb'),\n            'application/json',\n            {\n                'Accept-Charset': 'utf-8'\n            }\n        ),\n        'random-filepath-content-type': (\n            '/child/natural.wav',\n            open('/child/natural.wav', 'rb'),\n            'text/plain'\n        ),\n        'random-filepath-ct-header': (\n            '/statement/able.ppt',\n            open('/statement/able.ppt', 'rb'),\n            'text/csv',\n            {\n                'Accept-Charset': 'utf-8'\n            }\n        )\n    },\n    headers={\n        'Accept-Language': '*',\n        'Accept-Charset': 'utf-8'\n    }\n)\n</code></pre>    application/json Input <pre><code>import fake_module\n\nfrom http_request_codegen import generate_http_request_code\n\ngenerate_http_request_code(\n    language='python',\n    impl='requests',\n    method='POST',\n    url='https://github.com/mondeja/http-request-codegen',\n    headers={\n        'Content-Type': 'application/json'\n    },\n    seed=2032,\n    parameters=[\n        {\n            'name': 'fixed-value',\n            'value': 3\n        },\n        {\n            'name': 'dinamic-value-by-iterable',\n            'value': [1, 2, 3]  # same as 'values': [1, 2, 3]\n        },\n        {\n            'name': 'dinamic-value-by-function',\n            'value': fake_module.integers_from_1_to_10\n        },\n\n        # Parameter value randomization\n        {\n            'name': 'random-values-by-iterable',\n            'values': ['foo', 'bar', 'baz']\n        },\n        {\n            'name': 'random-values-by-function',\n            'values': fake_module.integers_from_1_to_10\n        },\n        {\n            'name': 'random-values-by-function-path',\n            'values': 'fake_module::integers_from_1_to_10'\n        },\n        {\n            'name': 'random-value-by-faker-provider-function-path',\n            'faker': 'faker.providers.job::job'\n        },\n        {\n            'name': 'random-string',  # by default: random word\n            'type': 'str'\n        },\n        {\n            'name': 'random-integer',\n            'type': 'int',\n        },\n        {\n            'name': 'random-integer-in-range',\n            'type': int,  # You can use Python types also\n            'min': 2,\n            'max': 5,\n        },\n        {\n            'name': 'random-float',\n            'type': 'number',  # You can use some type aliases also\n        },\n        {\n            'name': 'random-rounded-float-in-range',\n            'type': float,\n            'min': 1.555,\n            'max': 2.555,\n            'round': 3\n        },\n        {\n            'name': 'random-boolean',\n            'type': bool\n        },\n        {\n            'name': 'random-boolean-nullable',\n            'type': 'boolean',\n            'null': True\n        },\n        {\n            'name': 'random-type',\n            'type': 'random'  # random type from availables\n        },\n        {\n            'name': 'random-unique-identifier',\n            'type': 'uuid'\n        },\n        {\n            'name': 'random-id',  # positive integer\n            'type': 'id'\n        },\n\n        # Parameter name randomization\n        {\n            'name': ['random-name-from-iterable',\n                     'random-name-by-iterable'],\n            'type': 'str',\n        },\n        {\n            'name': fake_module.random_name_by_function,\n            'type': 'random',\n        },\n    ]\n)\n</code></pre>  Output <pre><code>import requests\n\nreq = requests.post(\n    'https://github.com/mondeja/http-request-codegen',\n    json={\n        'fixed-value': 3,\n        'dinamic-value-by-iterable': '1',\n        'dinamic-value-by-function': '0',\n        'random-values-by-iterable': 'foo',\n        'random-values-by-function': '0',\n        'random-values-by-function-path': '0',\n        'random-value-by-faker-provider-function-path': 'Pharmacologist',\n        'random-string': 'according',\n        'random-integer': '-56649',\n        'random-integer-in-range': '2',\n        'random-float': '42960.287142483445',\n        'random-rounded-float-in-range': '2.383',\n        'random-boolean': 'true',\n        'random-boolean-nullable': 'true',\n        'random-type': 'recent',\n        'random-unique-identifier': '95d9e7b38076410784b1427d964a5334',\n        'random-id': '4444',\n        'random-name-from-iterable': 'society',\n        'random-name-from-function': 'above'\n    },\n    headers={\n        'Content-Type': 'application/json'\n    }\n)\n</code></pre>    text/plain Input <pre><code>from http_request_codegen import generate_http_request_code\n\ngenerate_http_request_code(\n    language='python',\n    impl='requests',\n    method='POST',\n    url='https://github.com/mondeja/http-request-codegen',\n    headers={\n        'Content-Type': 'text/plain'\n    },\n    seed=2032,\n    parameters=[\n        {\n            'name': 'random-values-by-iterable',\n            'values': ['foo', 'bar', 'baz']\n        }\n    ]\n)\n</code></pre>  Output <pre><code>import requests\n\nreq = requests.post(\n    'https://github.com/mondeja/http-request-codegen',\n    data='foo',\n    headers={\n        'Content-Type': 'text/plain'\n    }\n)\n</code></pre>          Bash curl GET Input <pre><code>import fake_module\n\nfrom http_request_codegen import generate_http_request_code\n\ngenerate_http_request_code(\n    language='bash',\n    impl='curl',\n    method='GET',\n    url='https://github.com/mondeja/http-request-codegen',\n    headers={\n        'Content-Type': 'application/json',\n        'Accept-Language': '*'\n    },\n    seed=2032,\n    parameters=[\n        {\n            'name': 'fixed-value',\n            'value': 3\n        },\n        {\n            'name': 'dinamic-value-by-iterable',\n            'value': [1, 2, 3]  # same as 'values': [1, 2, 3]\n        },\n        {\n            'name': 'dinamic-value-by-function',\n            'value': fake_module.integers_from_1_to_10\n        },\n\n        # Parameter value randomization\n        {\n            'name': 'random-values-by-iterable',\n            'values': ['foo', 'bar', 'baz']\n        },\n        {\n            'name': 'random-values-by-function',\n            'values': fake_module.integers_from_1_to_10\n        },\n        {\n            'name': 'random-values-by-function-path',\n            'values': 'fake_module::integers_from_1_to_10'\n        },\n        {\n            'name': 'random-value-by-faker-provider-function-path',\n            'faker': 'faker.providers.job::job'\n        },\n        {\n            'name': 'random-string',  # by default: random word\n            'type': 'str'\n        },\n        {\n            'name': 'random-integer',\n            'type': 'int',\n        },\n        {\n            'name': 'random-integer-in-range',\n            'type': int,  # You can use Python types also\n            'min': 2,\n            'max': 5,\n        },\n        {\n            'name': 'random-float',\n            'type': 'number',  # You can use some type aliases also\n        },\n        {\n            'name': 'random-rounded-float-in-range',\n            'type': float,\n            'min': 1.555,\n            'max': 2.555,\n            'round': 3\n        },\n        {\n            'name': 'random-boolean',\n            'type': bool\n        },\n        {\n            'name': 'random-boolean-nullable',\n            'type': 'boolean',\n            'null': True\n        },\n        {\n            'name': 'random-type',\n            'type': 'random'  # random type from availables\n        },\n        {\n            'name': 'random-unique-identifier',\n            'type': 'uuid'\n        },\n        {\n            'name': 'random-id',  # positive integer\n            'type': 'id'\n        },\n\n        # Parameter name randomization\n        {\n            'name': ['random-name-from-iterable',\n                     'random-name-by-iterable'],\n            'type': 'str',\n        },\n        {\n            'name': fake_module.random_name_by_function,\n            'type': 'random',\n        },\n    ]\n)\n</code></pre> <p>Pass extra options to 'curl' command in <code>kwargs</code> parameter. For example, to save the response in a file, pass <code>kwargs={'-o': 'filename.ext'}</code>:</p> <pre><code>curl -o \"filename.ext\"\n</code></pre>  Output <pre><code>curl \\\n    -d 'fixed-value=3&amp;dinamic-value-by-iterable=1&amp;dinamic-value-by-function=0&amp;random-values-by-iterable=foo&amp;random-values-by-function=0&amp;random-values-by-function-path=0&amp;random-value-by-faker-provider-function-path=Advice+worker&amp;random-string=country&amp;random-integer=-56649&amp;random-integer-in-range=2&amp;random-float=42960.287142483445&amp;random-rounded-float-in-range=2.383&amp;random-boolean=true&amp;random-boolean-nullable=true&amp;random-type=them&amp;random-unique-identifier=34f35b280ca744409c8fe404c28705e7&amp;random-id=4444&amp;random-name-from-iterable=stage&amp;random-name-from-function=develop' \\\n    -H 'Content-Type: application/json' \\\n    -H 'Accept-Language: *' \\\n    https://github.com/mondeja/http-request-codegen\n</code></pre>    POST application/x-www-form-urlencoded Input <pre><code>import fake_module\n\nfrom http_request_codegen import generate_http_request_code\n\ngenerate_http_request_code(\n    language='bash',\n    impl='curl',\n    method='POST',\n    url='https://github.com/mondeja/http-request-codegen',\n    headers={\n        'Accept-Language': '*',\n        'Accept-Charset': 'utf-8'\n    },\n    seed=2032,\n    parameters=[\n        {\n            'name': 'fixed-value',\n            'value': 3\n        },\n        {\n            'name': 'dinamic-value-by-iterable',\n            'value': [1, 2, 3]  # same as 'values': [1, 2, 3]\n        },\n        {\n            'name': 'dinamic-value-by-function',\n            'value': fake_module.integers_from_1_to_10\n        },\n\n        # Parameter value randomization\n        {\n            'name': 'random-values-by-iterable',\n            'values': ['foo', 'bar', 'baz']\n        },\n        {\n            'name': 'random-values-by-function',\n            'values': fake_module.integers_from_1_to_10\n        },\n        {\n            'name': 'random-values-by-function-path',\n            'values': 'fake_module::integers_from_1_to_10'\n        },\n        {\n            'name': 'random-value-by-faker-provider-function-path',\n            'faker': 'faker.providers.job::job'\n        },\n        {\n            'name': 'random-string',  # by default: random word\n            'type': 'str'\n        },\n        {\n            'name': 'random-integer',\n            'type': 'int',\n        },\n        {\n            'name': 'random-integer-in-range',\n            'type': int,  # You can use Python types also\n            'min': 2,\n            'max': 5,\n        },\n        {\n            'name': 'random-float',\n            'type': 'number',  # You can use some type aliases also\n        },\n        {\n            'name': 'random-rounded-float-in-range',\n            'type': float,\n            'min': 1.555,\n            'max': 2.555,\n            'round': 3\n        },\n        {\n            'name': 'random-boolean',\n            'type': bool\n        },\n        {\n            'name': 'random-boolean-nullable',\n            'type': 'boolean',\n            'null': True\n        },\n        {\n            'name': 'random-type',\n            'type': 'random'  # random type from availables\n        },\n        {\n            'name': 'random-unique-identifier',\n            'type': 'uuid'\n        },\n        {\n            'name': 'random-id',  # positive integer\n            'type': 'id'\n        },\n\n        # Parameter name randomization\n        {\n            'name': ['random-name-from-iterable',\n                     'random-name-by-iterable'],\n            'type': 'str',\n        },\n        {\n            'name': fake_module.random_name_by_function,\n            'type': 'random',\n        },\n    ]\n)\n</code></pre>  Output <pre><code>curl \\\n    -X 'POST' \\\n    -d 'fixed-value=3&amp;dinamic-value-by-iterable=1&amp;dinamic-value-by-function=0&amp;random-values-by-iterable=foo&amp;random-values-by-function=0&amp;random-values-by-function-path=0&amp;random-value-by-faker-provider-function-path=Technical+sales+engineer&amp;random-string=cause&amp;random-integer=-56649&amp;random-integer-in-range=2&amp;random-float=42960.287142483445&amp;random-rounded-float-in-range=2.383&amp;random-boolean=true&amp;random-boolean-nullable=true&amp;random-type=within&amp;random-unique-identifier=bc3dd4fd3c6b4ecab7b9759b059f27d9&amp;random-id=4444&amp;random-name-from-iterable=watch&amp;random-name-from-function=pull' \\\n    -H 'Accept-Language: *' \\\n    -H 'Accept-Charset: utf-8' \\\n    https://github.com/mondeja/http-request-codegen\n</code></pre>    multipart/form-data Input <pre><code>from http_request_codegen import generate_http_request_code\n\ngenerate_http_request_code(\n    language='bash',\n    impl='curl',\n    method='POST',\n    url='https://github.com/mondeja/http-request-codegen',\n    headers={\n        'Accept-Language': '*',\n        'Accept-Charset': 'utf-8'\n    },\n    seed=2032,\n    files={\n        'fixed-filepath': '/tmp/foo.txt',\n        'random-filepath': None,\n        'fixed-filepath-content-type': (\n            '/tmp/bar.csv',\n            'text/csv'\n        ),\n        'fixed-filepath-ct-header': (\n            '/tmp/bar.json',\n            'application/json',\n            {'Accept-Charset': 'utf-8'}\n        ),\n        'random-filepath-content-type': (\n            None,\n            'text/plain'\n        ),\n        'random-filepath-ct-header': (\n            None,\n            'text/csv',\n            {'Accept-Charset': 'utf-8'}\n        )\n    }\n)\n</code></pre>  Output <pre><code>curl \\\n    -X 'POST' \\\n    -F 'fixed-filepath=@/tmp/foo.txt' \\\n    -F 'random-filepath=@/hand/nor.gif' \\\n    -F 'fixed-filepath-content-type=@/tmp/bar.csv' \\\n    -F 'fixed-filepath-ct-header=@/tmp/bar.json' \\\n    -F 'random-filepath-content-type=@/move/bring.js' \\\n    -F 'random-filepath-ct-header=@/want/story.avi' \\\n    -H 'Accept-Language: *' \\\n    -H 'Accept-Charset: utf-8' \\\n    https://github.com/mondeja/http-request-codegen\n</code></pre>    application/json Input <pre><code>import fake_module\n\nfrom http_request_codegen import generate_http_request_code\n\ngenerate_http_request_code(\n    language='bash',\n    impl='curl',\n    method='POST',\n    url='https://github.com/mondeja/http-request-codegen',\n    headers={\n        'Content-Type': 'application/json'\n    },\n    seed=2032,\n    parameters=[\n        {\n            'name': 'fixed-value',\n            'value': 3\n        },\n        {\n            'name': 'dinamic-value-by-iterable',\n            'value': [1, 2, 3]  # same as 'values': [1, 2, 3]\n        },\n        {\n            'name': 'dinamic-value-by-function',\n            'value': fake_module.integers_from_1_to_10\n        },\n\n        # Parameter value randomization\n        {\n            'name': 'random-values-by-iterable',\n            'values': ['foo', 'bar', 'baz']\n        },\n        {\n            'name': 'random-values-by-function',\n            'values': fake_module.integers_from_1_to_10\n        },\n        {\n            'name': 'random-values-by-function-path',\n            'values': 'fake_module::integers_from_1_to_10'\n        },\n        {\n            'name': 'random-value-by-faker-provider-function-path',\n            'faker': 'faker.providers.job::job'\n        },\n        {\n            'name': 'random-string',  # by default: random word\n            'type': 'str'\n        },\n        {\n            'name': 'random-integer',\n            'type': 'int',\n        },\n        {\n            'name': 'random-integer-in-range',\n            'type': int,  # You can use Python types also\n            'min': 2,\n            'max': 5,\n        },\n        {\n            'name': 'random-float',\n            'type': 'number',  # You can use some type aliases also\n        },\n        {\n            'name': 'random-rounded-float-in-range',\n            'type': float,\n            'min': 1.555,\n            'max': 2.555,\n            'round': 3\n        },\n        {\n            'name': 'random-boolean',\n            'type': bool\n        },\n        {\n            'name': 'random-boolean-nullable',\n            'type': 'boolean',\n            'null': True\n        },\n        {\n            'name': 'random-type',\n            'type': 'random'  # random type from availables\n        },\n        {\n            'name': 'random-unique-identifier',\n            'type': 'uuid'\n        },\n        {\n            'name': 'random-id',  # positive integer\n            'type': 'id'\n        },\n\n        # Parameter name randomization\n        {\n            'name': ['random-name-from-iterable',\n                     'random-name-by-iterable'],\n            'type': 'str',\n        },\n        {\n            'name': fake_module.random_name_by_function,\n            'type': 'random',\n        },\n    ]\n)\n</code></pre>  Output <pre><code>curl \\\n    -X 'POST' \\\n    -d 'fixed-value=3&amp;dinamic-value-by-iterable=1&amp;dinamic-value-by-function=0&amp;random-values-by-iterable=foo&amp;random-values-by-function=0&amp;random-values-by-function-path=0&amp;random-value-by-faker-provider-function-path=Engineer%2C+structural&amp;random-string=cold&amp;random-integer=-56649&amp;random-integer-in-range=2&amp;random-float=42960.287142483445&amp;random-rounded-float-in-range=2.383&amp;random-boolean=true&amp;random-boolean-nullable=true&amp;random-type=model&amp;random-unique-identifier=c2da52529b124efb818e781f4a0434d5&amp;random-id=4444&amp;random-name-from-iterable=community&amp;random-name-from-function=reason' \\\n    -H 'Content-Type: application/json' \\\n    https://github.com/mondeja/http-request-codegen\n</code></pre>    text/plain Input <pre><code>from http_request_codegen import generate_http_request_code\n\ngenerate_http_request_code(\n    language='bash',\n    impl='curl',\n    method='POST',\n    url='https://github.com/mondeja/http-request-codegen',\n    headers={\n        'Content-Type': 'text/plain'\n    },\n    seed=2032,\n    parameters=[\n        {\n            'name': 'random-values-by-iterable',\n            'values': ['foo', 'bar', 'baz']\n        }\n    ]\n)\n</code></pre>  Output <pre><code>curl \\\n    -X 'POST' \\\n    -d 'random-values-by-iterable=foo' \\\n    -H 'Content-Type: text/plain' \\\n    https://github.com/mondeja/http-request-codegen\n</code></pre>"},{"location":"#support","title":"Support","text":"Javascript fetch     GET POST     Headers \u2705 \u2705   Parameters \u2705 \u2705   Parameters localization \u2705 \u2705   Parameters seed \u2705 \u2705   Custom indentation \u2705 \u2705   Quotation character \u2705 \u2705   One line rendering \u2705 \u2705   Custom initialization \u2705 \u2705   Custom teardown \u2705 \u2705   Line wrapping \u2705 \u2705       Python requests     GET POST     Headers \u2705 \u2705   Parameters \u2705 \u2705   Parameters localization \u2705 \u2705   Parameters seed \u2705 \u2705   Custom indentation \u2705 \u2705   Quotation character \u2705 \u2705   One line rendering \u2705 \u2705   Custom initialization \u2705 \u2705   Custom teardown \u2705 \u2705   Line wrapping \u2705 \u2705       Bash curl     GET POST     Headers \u2705 \u2705   Parameters \u2705 \u2705   Parameters localization \u2705 \u2705   Parameters seed \u2705 \u2705   Custom indentation \u2705 \u2705   Quotation character \u2705 \u2705   One line rendering \u2705 \u2705   Custom initialization \u2705 \u2705   Custom teardown \u2705 \u2705   Line wrapping \u2705 \u2705"},{"location":"dev/","title":"Development","text":""},{"location":"dev/#setup-development-environment","title":"Setup development environment","text":"Linux/MacOS pip + virtualenv <pre><code>git clone https://github.com/mondeja/http-request-codegen.git\npython3 -m virtualenv venv\n. venv/bin/activate\npython3 -m pip install .[dev]\npre-commit install\n</code></pre>    Windows pip + virtualenv <pre><code>git clone https://github.com/mondeja/http-request-codegen.git\npython3 -m virtualenv venv\nvenv\\Scripts\\activate.bat\npython3 -m pip install .[dev]\npre-commit install\n</code></pre>"},{"location":"dev/#development-commands","title":"Development commands","text":""},{"location":"dev/#test","title":"Test","text":"All <pre><code>pytest -sv\n</code></pre>  Coverage <pre><code>pytest -s --cov=http_request_codegen --cov-config=setup.cfg --cov-report=html\n</code></pre>  Doctests <pre><code>pytest -svv --doctest-modules http_request_codegen\n</code></pre>"},{"location":"dev/#lint","title":"Lint","text":"<pre><code>pre-commit run --all-files\n</code></pre>"},{"location":"dev/#developing-implementations","title":"Developing implementations","text":"<p>To develop an HTTP method function for a library or a program, you need to take in accounts all parameters described in <code>generate_http_request_code</code> function, but not the randomized values passed in <code>parameters</code> argument, because <code>http_request_codegen</code> provides functions that can handle these.</p>"},{"location":"dev/#implementation-arguments","title":"Implementation arguments","text":"<p>Each implementation function must contain the following arguments, which are passed from the API function <code>generate_http_request_code</code>, so it's recommended that you familiarize yourself with the arguments of that function before continuing with this guide because they are well documented there:</p> <ul> <li><code>url</code>: unique positional argument of the function, represents the  target URL of the request.</li> <li><code>headers</code>: dictionary of headers.</li> <li><code>parameters</code>: list of parameter data objects.</li> <li><code>files</code>: dictionary of files, only passed to POST requests, so this  should not be defined as argument is the function implementation's name is  different to <code>post</code>.</li> <li><code>wrap</code>: maximum anchor of the rendered code snippet.</li> <li><code>indent</code>: indentation used in the rendered code snippet.</li> <li><code>quote_char</code>: string quotation character.</li> <li><code>setup</code> : code snippet prepended to generated request output.</li> <li><code>teardown</code> : code snippet appended at the end of the generated request  output.</li> <li><code>oneline</code>: if enabled, render the code snippet in one line.</li> <li><code>seed</code>: seed used generating random fake values of parameters.</li> <li><code>locale</code>: locale used by faker library  to localize the faked random values for parameters.</li> </ul>"},{"location":"dev/#method-singularities","title":"Method singularities","text":""},{"location":"dev/#post","title":"POST","text":"<pre><code>    Most POST methods implementations render their code snippets different,\n    depending on *Content-Types* header, including by default some of the\n    most used *Content-Types* header related behaviours:\n\n    - The default behavior, even if you don't specify it explicitly in the\n        *Content-Type* header is the generation of an\n        `application/x-www-form-urlencoded` encoded request.\n    - If you want to generate a ``multipart/form-data`` encoded request,\n        you need to specify the files to sent using the ``files`` argument.\n    - If you specifies the *Content-Type* header `application/json`, the\n        parameters sent will be adjusted according to the JSON encoded POST\n        request.\n    - If you specifies the *Content-Type* header `text/plain`, you can only\n        send one parameter and it will be adjusted accordingly following\n        the implementation.\n</code></pre>"},{"location":"dev/#one-line-wrapping-behaviour","title":"One line wrapping behaviour","text":"<p>The first thing to take in account (and the most complicated one) is the behaviour of wrapping (<code>wrap</code> argument) rendering as if <code>oneline=True</code> is passed. The question is: can a snippet of code be outputted in one line if the estimated length of the request is lower than <code>wrap</code> argument value?</p> <p>For example, Python requests can be rendered using this kind of code, in one line:</p> <pre><code>import requests\n\nreq = requests.get('https://github.com/mondeja/http-request-codegen')\n</code></pre> <p>...or using multiple lines (<code>wrap</code> is lower than expected length):</p> <pre><code>import requests\n\nreq = requests.get(\n  'https://github.com/mondeja/http-request-codegen'\n)\n</code></pre> <p>Of course, this also affects <code>parameters</code>, <code>headers</code> and <code>kwargs</code>:</p> <pre><code>import requests\n\nreq = requests.get('localhost', params={'foo': 'bar'}, headers={'foo': 'bar'})\n</code></pre> <p>...which can be outputted in multiple lines:</p> <pre><code>import requests\n\nreq = requests.get(\n    'localhost',\n    params={'foo': 'bar'},\n    headers={'foo': 'bar'}\n)\n</code></pre> <p>Since this behaviour can depend both <code>oneline</code> and <code>wrap</code> arguments, the recommended way of implement this is to calculate the length of the expected request inside the code snippet, and, if it is greater or equal to <code>wrap</code> argument, must be rendered as if <code>oneline=True</code>.</p>  <p>Tip</p> <p>You can see an example of this type of implementation at <code>http_request_codegen.generators.python.requests::get</code> function.</p>  <p>But other implementations could be rendered in multiples lines regardless the <code>wrap</code> argument value.</p> <p>For example, the Javascript fetch API implementation will output always a multiline code snippet (unless <code>oneline=True</code> is explicitly defined), because the Javascript Promises writing in single line is not a common syntax and there is a little chance that the generated request could not be wrapped given the default wrap value (80 in this case). The minimum reasonable possible code snippet in one line for Javascript fetch API implementation would be:</p> <pre><code>fetch('localhost').then(function(response) {}).catch(function(error) {console.error(error)});\n</code></pre> <p>...which exceeds the default <code>wrap</code> value length (80). In such type of cases, there is no need of calculate the expected generated code snippet request length before build their output.</p>  <p>Tip</p> <p>You can see an example of this type of implementation at <code>http_request_codegen.generators.javascript.fetch::get</code> function.</p>  <p>In the first case, you need to iterate over <code>parameters</code>, <code>headers</code> and <code>kwargs</code> arguments to compute the expected length, then compare the expected length with <code>wrap</code> argument value and, if it reaches it, define an internal <code>oneline=True</code> like behaviour. In the second, you can assume that the generated code is multiline unless <code>oneline=True</code> is explicitly defined as argument.</p>"},{"location":"dev/#randomizing-values","title":"Randomizing values","text":"<p>The library provides the functions <code>lazy_name_by_parameter</code> and <code>lazy_value_by_parameter</code> which returns the name and the value of a parameter given a parameter dictionary specification. These must be used to randomize parameters in a unified way across implementations as described in <code>generate_http_request_code</code> function documentation.</p>"},{"location":"dev/#languageplatform-utilities","title":"Language/platform utilities","text":"<p>You can create an <code>_utils.py</code> module inside a language or platform package to store utilities that could help in the process of building the code snippet, like:</p> <ul> <li>Define default indentation for the language/platform (<code>indent</code> argument).</li> <li>Define default wrapping length value (<code>wrap</code> argument).</li> <li>Define default quotation character/s (<code>quote_char</code> argument).</li> <li>Escape quotes of values (according to given <code>quote_char</code> argument).</li> <li>Create greater level functions of code generation for the language/platform,  such as string definitions with wrapping behaviour, dictionary definitions...</li> </ul>  <p>Tip</p> <p>See current <code>_utils.py</code> modules of <code>generators</code> packages as reference.</p>"},{"location":"dev/#creating-test-cases","title":"Creating test cases","text":"<p>Use the script <code>scripts/create-impl-test-cases.py</code> to create possible generated code snippets cases accordingly to combination of arguments. This will help you developing implementations because saves you the need of execute every possible combination of arguments. Use it as follows:</p> <pre><code>rm -rf cases &amp;&amp; python3 scripts/create-impl-test-cases.py \\\n  --language python \\\n  --implementation requests \\\n  --method GET \\\n  --directory cases\n</code></pre> <p>Previous command will create a <code>cases/</code> directory with a lot of code snippets generated, given the combinations described in <code>tests/combinations.py</code>.</p> <p>When you will have manually revised that all code snippets are generated correctly, you can create a test for the implementation at <code>tests/test_generators/test_&lt;lang&gt;/test_&lt;impl&gt;/test_&lt;impl&gt;.py</code>, placing the <code>cases/</code> directory at <code>tests/test_generators/test_&lt;lang&gt;/test_&lt;impl&gt;/&lt;METHOD&gt;</code>.</p> <p>For example, for Python requests GET method, the test module would be <code>tests/test_generators/test_python/test_requests/test_requests.py</code> and the <code>cases/</code> directory would be placed at <code>tests/test_generators/test_python/test_requests/GET/</code>.</p>  <p>Tip</p> <p>You can use an already implemented test module as a reference to write the one for the implementation.</p>"},{"location":"reference/","title":"Reference","text":""},{"location":"reference/#public-api","title":"Public API","text":""},{"location":"reference/#generate_http_request_code","title":"<code>generate_http_request_code</code>","text":"<pre><code>from http_request_codegen import generate_http_request_code\n</code></pre>   <p>Generates a code snippet of an HTTP request for a library of a given programming language or a CLI of a program, based on a valid HTTP method and a specification of parameters.</p> <p>There are some peculiarities concerning certain methods:</p>  POST <p> Most POST methods implementations render their code snippets different, depending on Content-Types header, including by default some of the most used Content-Types header related behaviours:</p> <ul> <li>The default behavior, even if you don't specify it explicitly in the     Content-Type header is the generation of an     <code>application/x-www-form-urlencoded</code> encoded request.</li> <li>If you want to generate a <code>multipart/form-data</code> encoded request,     you need to specify the files to sent using the <code>files</code> argument.</li> <li>If you specifies the Content-Type header <code>application/json</code>, the     parameters sent will be adjusted according to the JSON encoded POST     request.</li> <li>If you specifies the Content-Type header <code>text/plain</code>, you can only     send one parameter and it will be adjusted accordingly following     the implementation. </li> </ul>  <p>Parameters:</p>    Name Type Description Default     <code>language</code> <code>str</code> <p>Programming language or plataform of the resulting code snippet. See Support to check the supported platforms and programming languages.</p> <code>None</code>   <code>impl</code> <code>str</code> <p>Implementation type used for the code snippet. It can be a library, a program, or a language API. See Support to check the supported implementations by language.</p> <code>None</code>   <code>method</code> <code>str</code> <p>HTTP method of the generated request.</p> <code>'GET'</code>   <code>url</code> <code>str, iterable, callable</code> <p>URL endpoint of the generated request.</p> <ul> <li>Defined as a string, the url will be the string itself.</li> <li>Defined as an iterable, the url will be selected randomly from the iterable. Supports recursivity: until a string is not selected the recursion will not be stopped.</li> <li>Defined as a callable, the url will be the returned value of the callable. Supports recursivity: until a string is returned the recursion will not be stopped.</li> </ul> <code>'http://localhost'</code>   <code>headers</code> <code>dict</code> <p>Mapping of request header names and values.</p> <code>{}</code>   <code>parameters</code> <code>list</code> <p>List of parameters for the request. Each parameter must be a dictionary. This dictionary defines, for each parameter, what is the parameter name and how are the parameters values generated:</p> <ul> <li> <p>name (str, list, function): Parameter name. At least     one of this or <code>names</code> attributes are required.</p> <ul> <li>Defined as a string, the name will be the string itself.</li> <li>Defined as an iterable, the name will be selected randomly from the iterable. Supports recursivity: until a string is not selected the recursion will not be stopped.</li> <li>Defined as a callable, the name will be the returned value of the callable. Supports recursivity: until a string is returned the recursion will not be stopped.</li> </ul> </li> <li> <p>names (str, list, function): Parameter name. At least     one of this or <code>name</code> attributes are required.</p> <ul> <li>Defined as an iterable, the name will be selected randomly from the iterable. Supports recursivity: until a string is not selected the recursion will not be stopped.</li> <li>Defined as a string, must be a Python formatted module path following the format <code>'path.to.module::function'</code> and the return name will be used as the name for the parameter, which is useful if choosing a random value from a list doesn't fit your needs.</li> <li>Defined as a callable, the name will be the returned value of the callable. Supports recursivity: until a string is returned the recursion will not be stopped.</li> </ul> </li> <li> <p>type (str, iterable, callable): Parameter data type.     If not defined and <code>value</code>, <code>values</code> and <code>faker</code> are not     defined, will be considered as a string and the value of the     parameter will be a random word built using faker library. For some types, other     parameter dictionary attributes are supported, documented, if     so, in each type. The following parameter data types are     supported as attributes of parameters dictionaries, as well as     their corresponding names in capital letters:</p> <ul> <li><code>'str'</code>: Basic string type. Can be defined with the Python     builtin type <code>str</code> or the strings <code>'str'</code> and     <code>'string'</code>.</li> <li><code>'int'</code>: Basic integer type. Can be defined with the Python     builtin type <code>int</code>, or the strings <code>'int'</code> and     <code>'integer'</code>. As default will be an integer in the range     -65536 to 65536. The minimum and maximum values can be     defined with <code>min</code> and <code>max</code> parameter optional     attributes.</li> <li><code>'float'</code>: Floating point number type. Can be defined     with the Python builtin type <code>float</code>, or the strings     <code>'float'</code> and <code>number</code>. As default will be in the range     -65536 to 65536. The minimum and maximum values     can be defined with <code>min</code> and <code>max</code> parameter optional     attributes and can be rounded with <code>round</code> Python builtin     function using <code>round</code> parameter optional attribute.</li> <li><code>'bool'</code>: Basic boolean type. Can be defined with the     Python builtin type <code>bool</code>, or the strings <code>'bool'</code>     and <code>'boolean'</code>. Returns as parameter value one of the     strings <code>'true'</code> or <code>'false'</code>. If you pass the optional     parameter attribute <code>null</code> as <code>True</code>, the string     <code>'null'</code> can also be returned.</li> <li><code>'uuid'</code>: Unique identifier type. Can be defined with the     Python type <code>uuid.UUID</code>, or the strings <code>'uuid'</code>     and <code>'uuid4'</code>. It's a unique identifier v4 encoded as     hexadecimal string.</li> <li><code>'id'</code>: Basic integer id. It's a positive integer in the     range 1 to 65536. The maximum value can be defined by     optional <code>max</code> attribute.</li> <li><code>'random'</code>: Random type between the available types. You     can define a set of possible types passing an iterable     to <code>types</code> optional parameter attribute.</li> </ul> <p>Defined as an iterable or callable, the type will be selected randomly from the iterable, or the returned value from the callable will be used. This allows you to select a random type from a list of custom predefined types.</p> </li> <li> <p>value (str, iterable, callable): Parameter value. If     not defined and <code>type</code>, <code>values</code> and <code>faker</code> are not     defined, the value of the parameter will be a random word built     using faker library.</p> <ul> <li>Defined as a string, the value will be the string itself.</li> <li>Defined as an iterable, the value will be selected randomly from the iterable. Supports recursivity: until a string is not selected the recursion will not be stopped.</li> <li>Defined as a callable, the value will be the returned value of the callable. Supports recursivity: until a string is returned the recursion will not be stopped.</li> </ul> </li> <li> <p>values (list, iterable, callable): Possible parameter     values.</p> <ul> <li>Defined as an iterable, the value will be selected randomly from the iterable. Supports recursivity: until a string is not selected the recursion will not be stopped.</li> <li>Defined as a string, must be a Python formatted module path following the format <code>'path.to.module::function'</code> and the return value will be used as the value for the parameter, which is useful if choosing a random value from a list doesn't fit your needs.</li> <li>Defined as a callable, the value will be the returned value of the callable. Supports recursivity: until a string is returned the recursion will not be stopped.</li> </ul> </li> <li> <p>faker (str, function): Python formatted module path to a     function of a Faker provider used to build the value     randomized. Can be a standard, external provider or any     function, but if is not a provider, <code>seed</code> and <code>locale</code>     will not have effect.</p> <ul> <li>Defined as a string must follow the format <code>'path.to.provider.module::function'</code>.</li> </ul> </li> </ul> <code>[]</code>   <code>files</code> <code>dict</code> <p>Mapping of files to send to URL. Only has effect for POST methods. If you define this argument, the <code>Content-Type</code> header of the request will be assumed to be <code>'multipart/form-data'</code>, but only will be explicitly specified in the code generated if the implementation needs it. Each value accepts a string, <code>None</code> or a tuple:</p> <ul> <li>Defined as a string, must be the filepath of the file to be sent.</li> <li>Defined as <code>None</code>, the filepath will be randomized using <code>faker.providers.file::file_path</code> function.</li> <li>Defined as a tuple, the first value must be the filepath of the file to be sent (if <code>None</code> will be a randomized filepath), the second value the content-type of the file and the third a dictionary of custom headers for the file.</li> </ul> <code>{}</code>   <code>wrap</code> <code>int</code> <p>Maximum anchor of the rendered code snippet. If it exceeds it, the rendered code will be conveniently formatted on multiple lines.</p> <code>80</code>   <code>indent</code> <code>str</code> <p>Indentation string used in the generated code. If not defined, the indentation string commonly used in the implementation will be used.</p> <code>None</code>   <code>quote_char</code> <code>str</code> <p>Quotation character for strings used in the generated code.</p> <code>\"'\"</code>   <code>setup</code> <code>bool, str</code> <p>If <code>True</code>, includes the code needed by an implementation to perform the request. Could be imports of additional modules or intialization of objects, depends on implementation. You can customize this snippet passing a string with the code snippet that you want to include.</p> <code>None</code>   <code>teardown</code> <code>str</code> <p>Code snippet to include after the HTTP request code.</p> <code>None</code>   <code>oneline</code> <code>bool</code> <p>Render the code in a single line.</p> <code>False</code>   <code>seed</code> <code>int</code> <p>Seed used generating random fake values of parameters. Useful if you want to generate the same set of values between multiples code snippets.</p> <code>None</code>   <code>locale</code> <code>str</code> <p>Locale used by faker library to localize the faked random values for parameters.</p> <code>None</code>    <p>Exceptions:</p>    Type Description     <code>ValueError</code> <p>Value is not a valid value in their context.</p>   <code>TypeError</code> <p>Values does not complaint with the types supported for it.</p>   <code>ImportError</code> <p>Python module-function path specified can not be imported successfully.</p>    <p>Returns:</p>    Type Description     <code>str</code> <p>HTTP request code snippet.</p>"},{"location":"reference/#generate_http_request_md_fenced_code_block","title":"<code>generate_http_request_md_fenced_code_block</code>","text":"<pre><code>from http_request_codegen import generate_http_request_md_fenced_code_block\n</code></pre>   <p>Wraps <code>generate_http_request_code</code> function result in a Markdown fenced code block.</p> <p>Parameters:</p>    Name Type Description Default     <code>fence_string</code> <code>str</code> <p>Code block fence string used wrapping the code. It does not perform any check about if the fenced string is a \"valid\" markdown code block fence string.</p> <code>'```'</code>   <code>**kwargs</code>  <p>All other optional arguments are passed to <code>generate_http_request_code</code> function.</p> <code>{}</code>    <p>Examples:</p> <pre><code>&gt;&gt;&gt; generate_http_request_md_fenced_code_block(setup=False)\n\"```python\\nreq = requests.get('http://localhost')\\n```\"\n</code></pre> <pre><code>&gt;&gt;&gt; generate_http_request_md_fenced_code_block(fence_string='~~~',\n...                                            setup=False)\n\"~~~python\\nreq = requests.get('http://localhost')\\n~~~\"\n</code></pre> <p>Returns:</p>    Type Description     <code>str</code> <p>Fenced code block with HTTP request code snippet inside.</p>"},{"location":"reference/#lazy_name_by_parameter","title":"<code>lazy_name_by_parameter</code>","text":"<pre><code>from http_request_codegen import lazy_name_by_parameter\n</code></pre>   <p>Given a dictionary of parameter options, returns the corresponding parameter name built following the rules listed in <code>parameters</code> argument of <code>generate_http_request_code</code> function documentation.</p> <p>The strategy of name building is to check next attributes in given order:</p> <ul> <li><code>name</code></li> <li><code>names</code></li> </ul> <p>You can use this function to build the parameters at lower level. This can be used, for example, to append the parameters to an URL generating GET method code snippets if an implementation does by building the parameters as arguments of a function.</p> <p>Parameters:</p>    Name Type Description Default     <code>parameter_data</code> <code>dict</code> <p>Parameter specification data. It's defined at name and names sections of <code>parameters</code> argument of <code>generate_http_request_code</code> function documentation.</p> required   <code>seed</code> <code>int</code> <p>Seed using randomizing names.</p> <code>None</code>    <p>Exceptions:</p>    Type Description     <code>ValueError</code> <p>none of the <code>name</code> or <code>names</code> attributes are defined inside <code>parameter_data</code> dictionary.</p>    <p>Examples:</p> <pre><code>&gt;&gt;&gt; lazy_name_by_parameter({'name': 'foo'})\n'foo'\n</code></pre> <pre><code>&gt;&gt;&gt; result = lazy_name_by_parameter({'names': ['foo', 'bar', 'baz']})\n&gt;&gt;&gt; result in ['foo', 'bar', 'baz']\nTrue\n</code></pre> <p>Returns:</p>    Type Description     <code>str</code> <p>Parameter name.</p>"},{"location":"reference/#lazy_value_by_parameter","title":"<code>lazy_value_by_parameter</code>","text":"<pre><code>from http_request_codegen import lazy_value_by_parameter\n</code></pre>   <p>Given a dictionary of parameter options, returns the corresponding value built following the rules listed in <code>parameters</code> argument of <code>generate_http_request_code</code> function documentation.</p> <p>For example, giving <code>{'type': int}</code> as input, the output will be a random number as string.</p> <p>The strategy of value building is to check next attributes in given order:</p> <ul> <li><code>'value'</code></li> <li><code>'values'</code></li> <li><code>'faker'</code></li> <li><code>'type'</code></li> </ul> <p>If none of the previous attributes are passed will be treated as if <code>{'type': str}</code> has been passed, returning a random word.</p> <p>You can use this function to build the parameters at lower level. This can be used, for example, to append the parameters to an URL generating GET method code snippets if an implementation does by building the parameters as arguments of a function.</p> <p>Parameters:</p>    Name Type Description Default     <code>parameter_data</code> <code>dict</code> <p>Parameter specification data. It's defined at type, value, values and faker sections of <code>parameters</code> argument as is defined at <code>generate_http_request_code</code> function documentation.</p> required   <code>seed</code> <code>int</code> <p>Seed using randomizing values.</p> <code>None</code>   <code>locale</code> <code>str</code> <p>Locale used for <code>faker</code> providers.</p> <code>None</code>    <p>Examples:</p> <pre><code>&gt;&gt;&gt; lazy_value_by_parameter({'value': 'foo'})\n'foo'\n</code></pre> <pre><code>&gt;&gt;&gt; result = lazy_value_by_parameter({'values': ['foo', 'bar', 'baz']})\n&gt;&gt;&gt; result in ['foo', 'bar', 'baz']\nTrue\n</code></pre> <pre><code>&gt;&gt;&gt; result = lazy_value_by_parameter({'type': 'int'})\n&gt;&gt;&gt; result.replace('.', '', 1).lstrip('-').isnumeric() and \\\n...     isinstance(result, str)\nTrue\n</code></pre> <p>Exceptions:</p>    Type Description     <code>ImportError</code> <p><code>'values'</code> attribute value points to an inexistent Python object.</p>   <code>TypeError</code> <p><code>'faker'</code> attribute value does not contains a string or Python callable object, or if the <code>'type'</code> attribute value does not support the defined type.</p>   <code>ImportError</code> <p><code>'faker'</code> attribute value, when passed as string, points to an inexistent Python object.</p>    <p>Returns:</p>    Type Description     <code>str</code> <p>Parameter value.</p>"},{"location":"es/","title":"Introducci\u00f3n","text":"<p>http-request-codegen genera trozos de c\u00f3digo de peticiones HTTP para diferentes implementaciones. Es perfecto si quieres incluir ejemplos documentando APIs. Soporta las siguientes caracter\u00edsticas:</p> <ul> <li>Aleatorizaci\u00f3n de par\u00e1metros de peticiones usando m\u00faltiples estrategias:</li> <li>Valores aleatorios desde iterables y ejecutables.</li> <li>Valores aleatorios seg\u00fan tipo de datos.</li> <li>Valores aleatorios desde proveedores Faker.</li> <li>Aleatorizaci\u00f3n usando semillas y localizaci\u00f3n.</li> <li>Personalizaci\u00f3n de encabezados de peticiones.</li> <li>Argumentos opcionales de peticiones por implementaci\u00f3n.</li> <li>Envoltura de l\u00ednea personalizada.</li> <li>Indentaci\u00f3n personalizada.</li> <li>Personalizaci\u00f3n de caracteres de cadenas.</li> <li>Renderizado en una l\u00ednea.</li> </ul>  <p>Recuerda</p> <p>Esto no es una API de m\u00e1s alto nivel entre muchas bibliotecas de peticiones HTTP, pero est\u00e1 escrita de tal forma que puedes generar los tipos de peticiones HTTP m\u00e1s comunes independientemente de la implementaci\u00f3n.</p>"},{"location":"es/#instalacion","title":"Instalaci\u00f3n","text":"pip <pre><code>pip install http-request-codegen\n</code></pre>  pipenv <pre><code>pipenv install http-request-codegen\n</code></pre>  source <pre><code>git clone https://github.com/mondeja/http-request-codegen.git --depth=1\ncd http-request-codegen\npython setup.py install\n</code></pre>  development <pre><code>git clone https://github.com/mondeja/http-request-codegen.git\ncd http-request-codegen\npip install -e .[dev]\n</code></pre>"},{"location":"es/#demostracion","title":"Demostraci\u00f3n","text":"Javascript fetch GET Entrada <pre><code>import fake_module\n\nfrom http_request_codegen import generate_http_request_code\n\ngenerate_http_request_code(\n    language='javascript',\n    impl='fetch',\n    method='GET',\n    url='https://github.com/mondeja/http-request-codegen',\n    headers={\n        'Content-Type': 'application/json',\n        'Accept-Language': '*'\n    },\n    seed=2032,\n    parameters=[\n        {\n            'name': 'fixed-value',\n            'value': 3\n        },\n        {\n            'name': 'dinamic-value-by-iterable',\n            'value': [1, 2, 3]  # same as 'values': [1, 2, 3]\n        },\n        {\n            'name': 'dinamic-value-by-function',\n            'value': fake_module.integers_from_1_to_10\n        },\n\n        # Parameter value randomization\n        {\n            'name': 'random-values-by-iterable',\n            'values': ['foo', 'bar', 'baz']\n        },\n        {\n            'name': 'random-values-by-function',\n            'values': fake_module.integers_from_1_to_10\n        },\n        {\n            'name': 'random-values-by-function-path',\n            'values': 'fake_module::integers_from_1_to_10'\n        },\n        {\n            'name': 'random-value-by-faker-provider-function-path',\n            'faker': 'faker.providers.job::job'\n        },\n        {\n            'name': 'random-string',  # by default: random word\n            'type': 'str'\n        },\n        {\n            'name': 'random-integer',\n            'type': 'int',\n        },\n        {\n            'name': 'random-integer-in-range',\n            'type': int,  # You can use Python types also\n            'min': 2,\n            'max': 5,\n        },\n        {\n            'name': 'random-float',\n            'type': 'number',  # You can use some type aliases also\n        },\n        {\n            'name': 'random-rounded-float-in-range',\n            'type': float,\n            'min': 1.555,\n            'max': 2.555,\n            'round': 3\n        },\n        {\n            'name': 'random-boolean',\n            'type': bool\n        },\n        {\n            'name': 'random-boolean-nullable',\n            'type': 'boolean',\n            'null': True\n        },\n        {\n            'name': 'random-type',\n            'type': 'random'  # random type from availables\n        },\n        {\n            'name': 'random-unique-identifier',\n            'type': 'uuid'\n        },\n        {\n            'name': 'random-id',  # positive integer\n            'type': 'id'\n        },\n\n        # Parameter name randomization\n        {\n            'name': ['random-name-from-iterable',\n                     'random-name-by-iterable'],\n            'type': 'str',\n        },\n        {\n            'name': fake_module.random_name_by_function,\n            'type': 'random',\n        },\n    ]\n)\n</code></pre> <p>Esta implementaci\u00f3n emular\u00e1 a la API fetch de los navegadores por defecto, usando procesamiento de respuestas mediante promesas.</p> <p>Si quieres simular un entorno NodeJS, pasa el par\u00e1metro <code>setup</code> como <code>True</code> y el siguiente trozo de inicializaci\u00f3n ser\u00e1 colocado al principio del c\u00f3digo generado:</p> <pre><code>const fetch = require('node-fetch');\n</code></pre> <p>Para simulaci\u00f3n de importaciones ESM usa <code>setup='import fetch from \\'node-fetch\\';\\n\\n'</code>, por lo que el c\u00f3digo de inicializaci\u00f3n ser\u00e1:</p> <pre><code>import fetch from 'node-fetch';\n</code></pre> <p>Por supuesto, puedes personalizar esta inicializaci\u00f3n para otros entornos. Por ejemplo, hacer un polyfill a la API usando whatwg como m\u00f3dulo ESM usando <code>setup='import \\'whatwg-fetch\\';\\n\\n'</code>:</p> <pre><code>import 'whatwg-fetch';\n</code></pre>  Salida <pre><code>fetch(\n  'https://github.com/mondeja/http-request-codegen?fixed-value=3&amp;dinamic-value'\n  + '-by-iterable=1&amp;dinamic-value-by-function=0&amp;random-values-by-iterable=foo&amp;'\n  + 'random-values-by-function=0&amp;random-values-by-function-path=0&amp;random-value'\n  + '-by-faker-provider-function-path=Analytical+chemist&amp;random-string=party&amp;r'\n  + 'andom-integer=-56649&amp;random-integer-in-range=2&amp;random-float=42960.2871424'\n  + '83445&amp;random-rounded-float-in-range=2.383&amp;random-boolean=true&amp;random-bool'\n  + 'ean-nullable=true&amp;random-type=religious&amp;random-unique-identifier=ecccd9c2'\n  + 'a80c4e43a90459d0c91756cc&amp;random-id=4444&amp;random-name-from-iterable=main&amp;ra'\n  + 'ndom-name-from-function=camera',\n  {\n    headers: {\n      'Content-Type': 'application/json',\n      'Accept-Language': '*'\n    }\n  }\n).then(function(response) {\n  console.log(response);\n}).catch(function(err) {\n  console.error('Error:', err);\n});\n</code></pre>    POST application/x-www-form-urlencoded Entrada <pre><code>import fake_module\n\nfrom http_request_codegen import generate_http_request_code\n\ngenerate_http_request_code(\n    language='javascript',\n    impl='fetch',\n    method='POST',\n    url='https://github.com/mondeja/http-request-codegen',\n    headers={\n        'Accept-Language': '*',\n        'Accept-Charset': 'utf-8'\n    },\n    seed=2032,\n    parameters=[\n        {\n            'name': 'fixed-value',\n            'value': 3\n        },\n        {\n            'name': 'dinamic-value-by-iterable',\n            'value': [1, 2, 3]  # same as 'values': [1, 2, 3]\n        },\n        {\n            'name': 'dinamic-value-by-function',\n            'value': fake_module.integers_from_1_to_10\n        },\n\n        # Parameter value randomization\n        {\n            'name': 'random-values-by-iterable',\n            'values': ['foo', 'bar', 'baz']\n        },\n        {\n            'name': 'random-values-by-function',\n            'values': fake_module.integers_from_1_to_10\n        },\n        {\n            'name': 'random-values-by-function-path',\n            'values': 'fake_module::integers_from_1_to_10'\n        },\n        {\n            'name': 'random-value-by-faker-provider-function-path',\n            'faker': 'faker.providers.job::job'\n        },\n        {\n            'name': 'random-string',  # by default: random word\n            'type': 'str'\n        },\n        {\n            'name': 'random-integer',\n            'type': 'int',\n        },\n        {\n            'name': 'random-integer-in-range',\n            'type': int,  # You can use Python types also\n            'min': 2,\n            'max': 5,\n        },\n        {\n            'name': 'random-float',\n            'type': 'number',  # You can use some type aliases also\n        },\n        {\n            'name': 'random-rounded-float-in-range',\n            'type': float,\n            'min': 1.555,\n            'max': 2.555,\n            'round': 3\n        },\n        {\n            'name': 'random-boolean',\n            'type': bool\n        },\n        {\n            'name': 'random-boolean-nullable',\n            'type': 'boolean',\n            'null': True\n        },\n        {\n            'name': 'random-type',\n            'type': 'random'  # random type from availables\n        },\n        {\n            'name': 'random-unique-identifier',\n            'type': 'uuid'\n        },\n        {\n            'name': 'random-id',  # positive integer\n            'type': 'id'\n        },\n\n        # Parameter name randomization\n        {\n            'name': ['random-name-from-iterable',\n                     'random-name-by-iterable'],\n            'type': 'str',\n        },\n        {\n            'name': fake_module.random_name_by_function,\n            'type': 'random',\n        },\n    ]\n)\n</code></pre>  Salida <pre><code>const fetch = require('node-fetch');\n\nfetch(\n  'https://github.com/mondeja/http-request-codegen',\n  {  \n    method: 'POST',\n    body: new URLSearchParams({\n      'fixed-value': '3',\n      'dinamic-value-by-iterable': '1',\n      'dinamic-value-by-function': '0',\n      'random-values-by-iterable': 'foo',\n      'random-values-by-function': '0',\n      'random-values-by-function-path': '0',\n      'random-value-by-faker-provider-function-path': 'Psychologist, education'\n                                                      + 'al',\n      'random-string': 'drive',\n      'random-integer': '-56649',\n      'random-integer-in-range': '2',\n      'random-float': '42960.287142483445',\n      'random-rounded-float-in-range': '2.383',\n      'random-boolean': 'true',\n      'random-boolean-nullable': 'true',\n      'random-type': 'control',\n      'random-unique-identifier': '904413fe28cc4fc0a9b6f671fde19ded',\n      'random-id': '4444',\n      'random-name-from-iterable': 'people',\n      'random-name-from-function': 'realize'\n    }),\n    headers: {\n      'Accept-Language': '*',\n      'Accept-Charset': 'utf-8'\n    }\n  }\n).then(function(response) {\n  console.log(response);\n}).catch(function(err) {\n  console.error('Error:', err);\n});\n</code></pre>    multipart/form-data Entrada <pre><code>from http_request_codegen import generate_http_request_code\n\ngenerate_http_request_code(\n    language='javascript',\n    impl='fetch',\n    method='POST',\n    url='https://github.com/mondeja/http-request-codegen',\n    headers={\n        'Accept-Language': '*',\n        'Accept-Charset': 'utf-8'\n    },\n    seed=2032,\n    files={\n        'fixed-filepath': '/tmp/foo.txt',\n        'random-filepath': None,\n        'fixed-filepath-content-type': (\n            '/tmp/bar.csv',\n            'text/csv'\n        ),\n        'fixed-filepath-ct-header': (\n            '/tmp/bar.json',\n            'application/json',\n            {'Accept-Charset': 'utf-8'}\n        ),\n        'random-filepath-content-type': (\n            None,\n            'text/plain'\n        ),\n        'random-filepath-ct-header': (\n            None,\n            'text/csv',\n            {'Accept-Charset': 'utf-8'}\n        )\n    }\n)\n</code></pre>  Salida <pre><code>const fs = require('fs');\n\nconst fetch = require('node-fetch');\nconst FormData = require('form-data');\n\nconst formData = new FormData();\nformData.append(\n  'fixed-filepath',\n  fs.createReadStream('/tmp/foo.txt'),\n  {\n    filename: 'foo.txt'\n  }\n);\nformData.append(\n  'random-filepath',\n  fs.createReadStream('/simply/stock.doc'),\n  {\n    filename: 'stock.doc'\n  }\n);\nformData.append(\n  'fixed-filepath-content-type',\n  fs.createReadStream('/tmp/bar.csv'),\n  {\n    filename: 'bar.csv',\n    contentType: 'text/csv'\n  }\n);\nformData.append(\n  'fixed-filepath-ct-header',\n  fs.createReadStream('/tmp/bar.json'),\n  {\n    filename: 'bar.json',\n    contentType: 'application/json'\n  }\n);\nformData.append(\n  'random-filepath-content-type',\n  fs.createReadStream('/civil/young.jpg'),\n  {\n    filename: 'young.jpg',\n    contentType: 'text/plain'\n  }\n);\nformData.append(\n  'random-filepath-ct-header',\n  fs.createReadStream('/first/start.tiff'),\n  {\n    filename: 'start.tiff',\n    contentType: 'text/csv'\n  }\n);\n\nfetch(\n  'https://github.com/mondeja/http-request-codegen',\n  {  \n    method: 'POST',\n    body: formData,\n    headers: {\n      'Accept-Language': '*',\n      'Accept-Charset': 'utf-8'\n    }\n  }\n).then(function(response) {\n  console.log(response);\n}).catch(function(err) {\n  console.error('Error:', err);\n});\n</code></pre>    application/json Entrada <pre><code>import fake_module\n\nfrom http_request_codegen import generate_http_request_code\n\ngenerate_http_request_code(\n    language='javascript',\n    impl='fetch',\n    method='POST',\n    url='https://github.com/mondeja/http-request-codegen',\n    headers={\n        'Content-Type': 'application/json'\n    },\n    seed=2032,\n    parameters=[\n        {\n            'name': 'fixed-value',\n            'value': 3\n        },\n        {\n            'name': 'dinamic-value-by-iterable',\n            'value': [1, 2, 3]  # same as 'values': [1, 2, 3]\n        },\n        {\n            'name': 'dinamic-value-by-function',\n            'value': fake_module.integers_from_1_to_10\n        },\n\n        # Parameter value randomization\n        {\n            'name': 'random-values-by-iterable',\n            'values': ['foo', 'bar', 'baz']\n        },\n        {\n            'name': 'random-values-by-function',\n            'values': fake_module.integers_from_1_to_10\n        },\n        {\n            'name': 'random-values-by-function-path',\n            'values': 'fake_module::integers_from_1_to_10'\n        },\n        {\n            'name': 'random-value-by-faker-provider-function-path',\n            'faker': 'faker.providers.job::job'\n        },\n        {\n            'name': 'random-string',  # by default: random word\n            'type': 'str'\n        },\n        {\n            'name': 'random-integer',\n            'type': 'int',\n        },\n        {\n            'name': 'random-integer-in-range',\n            'type': int,  # You can use Python types also\n            'min': 2,\n            'max': 5,\n        },\n        {\n            'name': 'random-float',\n            'type': 'number',  # You can use some type aliases also\n        },\n        {\n            'name': 'random-rounded-float-in-range',\n            'type': float,\n            'min': 1.555,\n            'max': 2.555,\n            'round': 3\n        },\n        {\n            'name': 'random-boolean',\n            'type': bool\n        },\n        {\n            'name': 'random-boolean-nullable',\n            'type': 'boolean',\n            'null': True\n        },\n        {\n            'name': 'random-type',\n            'type': 'random'  # random type from availables\n        },\n        {\n            'name': 'random-unique-identifier',\n            'type': 'uuid'\n        },\n        {\n            'name': 'random-id',  # positive integer\n            'type': 'id'\n        },\n\n        # Parameter name randomization\n        {\n            'name': ['random-name-from-iterable',\n                     'random-name-by-iterable'],\n            'type': 'str',\n        },\n        {\n            'name': fake_module.random_name_by_function,\n            'type': 'random',\n        },\n    ]\n)\n</code></pre>  Salida <pre><code>const fetch = require('node-fetch');\n\nfetch(\n  'https://github.com/mondeja/http-request-codegen',\n  {  \n    method: 'POST',\n    body: JSON.stringify({\n      'fixed-value': '3',\n      'dinamic-value-by-iterable': '1',\n      'dinamic-value-by-function': '0',\n      'random-values-by-iterable': 'foo',\n      'random-values-by-function': '0',\n      'random-values-by-function-path': '0',\n      'random-value-by-faker-provider-function-path': 'Financial controller',\n      'random-string': 'stage',\n      'random-integer': '-56649',\n      'random-integer-in-range': '2',\n      'random-float': '42960.287142483445',\n      'random-rounded-float-in-range': '2.383',\n      'random-boolean': 'true',\n      'random-boolean-nullable': 'true',\n      'random-type': 'speech',\n      'random-unique-identifier': 'bdf7385745384a46ab83c8dabe1eee42',\n      'random-id': '4444',\n      'random-name-from-iterable': 'Republican',\n      'random-name-from-function': 'pay'\n    }),\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  }\n).then(function(response) {\n  console.log(response);\n}).catch(function(err) {\n  console.error('Error:', err);\n});\n</code></pre>    text/plain Entrada <pre><code>from http_request_codegen import generate_http_request_code\n\ngenerate_http_request_code(\n    language='javascript',\n    impl='fetch',\n    method='POST',\n    url='https://github.com/mondeja/http-request-codegen',\n    headers={\n        'Content-Type': 'text/plain'\n    },\n    seed=2032,\n    parameters=[\n        {\n            'name': 'random-values-by-iterable',\n            'values': ['foo', 'bar', 'baz']\n        }\n    ]\n)\n</code></pre>  Salida <pre><code>const fetch = require('node-fetch');\n\nfetch(\n  'https://github.com/mondeja/http-request-codegen',\n  {  \n    method: 'POST',\n    body: 'foo',\n    headers: {\n      'Content-Type': 'text/plain'\n    }\n  }\n).then(function(response) {\n  console.log(response);\n}).catch(function(err) {\n  console.error('Error:', err);\n});\n</code></pre>          Python requests GET Entrada <pre><code>import fake_module\n\nfrom http_request_codegen import generate_http_request_code\n\ngenerate_http_request_code(\n    language='python',\n    impl='requests',\n    method='GET',\n    url='https://github.com/mondeja/http-request-codegen',\n    headers={\n        'Content-Type': 'application/json',\n        'Accept-Language': '*'\n    },\n    seed=2032,\n    parameters=[\n        {\n            'name': 'fixed-value',\n            'value': 3\n        },\n        {\n            'name': 'dinamic-value-by-iterable',\n            'value': [1, 2, 3]  # same as 'values': [1, 2, 3]\n        },\n        {\n            'name': 'dinamic-value-by-function',\n            'value': fake_module.integers_from_1_to_10\n        },\n\n        # Parameter value randomization\n        {\n            'name': 'random-values-by-iterable',\n            'values': ['foo', 'bar', 'baz']\n        },\n        {\n            'name': 'random-values-by-function',\n            'values': fake_module.integers_from_1_to_10\n        },\n        {\n            'name': 'random-values-by-function-path',\n            'values': 'fake_module::integers_from_1_to_10'\n        },\n        {\n            'name': 'random-value-by-faker-provider-function-path',\n            'faker': 'faker.providers.job::job'\n        },\n        {\n            'name': 'random-string',  # by default: random word\n            'type': 'str'\n        },\n        {\n            'name': 'random-integer',\n            'type': 'int',\n        },\n        {\n            'name': 'random-integer-in-range',\n            'type': int,  # You can use Python types also\n            'min': 2,\n            'max': 5,\n        },\n        {\n            'name': 'random-float',\n            'type': 'number',  # You can use some type aliases also\n        },\n        {\n            'name': 'random-rounded-float-in-range',\n            'type': float,\n            'min': 1.555,\n            'max': 2.555,\n            'round': 3\n        },\n        {\n            'name': 'random-boolean',\n            'type': bool\n        },\n        {\n            'name': 'random-boolean-nullable',\n            'type': 'boolean',\n            'null': True\n        },\n        {\n            'name': 'random-type',\n            'type': 'random'  # random type from availables\n        },\n        {\n            'name': 'random-unique-identifier',\n            'type': 'uuid'\n        },\n        {\n            'name': 'random-id',  # positive integer\n            'type': 'id'\n        },\n\n        # Parameter name randomization\n        {\n            'name': ['random-name-from-iterable',\n                     'random-name-by-iterable'],\n            'type': 'str',\n        },\n        {\n            'name': fake_module.random_name_by_function,\n            'type': 'random',\n        },\n    ]\n)\n</code></pre> <p>Los par\u00e1metros son pasados usando el par\u00e1metro <code>params</code> de la funci\u00f3n <code>requests.get</code>, no a\u00f1adiendo <code>?foo=bar&amp;...</code> a la URL. Si quieres este comportamiento, construye la URL pasada usando las funciones <code>lazy_name_by_parameter</code> y <code>lazy_value_by_parameter</code> en lugar de usar el argumento <code>parameters</code>.</p> <p>Si quieres importar m\u00e1s m\u00f3dulos en el c\u00f3digo de inicializaci\u00f3n, ten en cuenta que debes proveer  <code>import requests</code> en el argumento <code>setup</code>. Por ejemplo, <code>setup='import requests\\nimport foo\\n\\n'</code> renderizar\u00e1 como:</p> <pre><code>import requests\nimport foo\n\nrequests.get('&lt;url&gt;'...\n</code></pre>  Salida <pre><code>import requests\n\nreq = requests.get(\n    'https://github.com/mondeja/http-request-codegen',\n    params={\n        'fixed-value': '3',\n        'dinamic-value-by-iterable': '1',\n        'dinamic-value-by-function': '0',\n        'random-values-by-iterable': 'foo',\n        'random-values-by-function': '0',\n        'random-values-by-function-path': '0',\n        'random-value-by-faker-provider-function-path': 'Engineer, energy',\n        'random-string': 'bed',\n        'random-integer': '-56649',\n        'random-integer-in-range': '2',\n        'random-float': '42960.287142483445',\n        'random-rounded-float-in-range': '2.383',\n        'random-boolean': 'true',\n        'random-boolean-nullable': 'true',\n        'random-type': 'political',\n        'random-unique-identifier': 'a19011bf47d04d488b2e14dc23b8deff',\n        'random-id': '4444',\n        'random-name-from-iterable': 'develop',\n        'random-name-from-function': 'stuff'\n    },\n    headers={\n        'Content-Type': 'application/json',\n        'Accept-Language': '*'\n    }\n)\n</code></pre>    POST application/x-www-form-urlencoded Entrada <pre><code>import fake_module\n\nfrom http_request_codegen import generate_http_request_code\n\ngenerate_http_request_code(\n    language='python',\n    impl='requests',\n    method='POST',\n    url='https://github.com/mondeja/http-request-codegen',\n    headers={\n        'Accept-Language': '*',\n        'Accept-Charset': 'utf-8'\n    },\n    seed=2032,\n    parameters=[\n        {\n            'name': 'fixed-value',\n            'value': 3\n        },\n        {\n            'name': 'dinamic-value-by-iterable',\n            'value': [1, 2, 3]  # same as 'values': [1, 2, 3]\n        },\n        {\n            'name': 'dinamic-value-by-function',\n            'value': fake_module.integers_from_1_to_10\n        },\n\n        # Parameter value randomization\n        {\n            'name': 'random-values-by-iterable',\n            'values': ['foo', 'bar', 'baz']\n        },\n        {\n            'name': 'random-values-by-function',\n            'values': fake_module.integers_from_1_to_10\n        },\n        {\n            'name': 'random-values-by-function-path',\n            'values': 'fake_module::integers_from_1_to_10'\n        },\n        {\n            'name': 'random-value-by-faker-provider-function-path',\n            'faker': 'faker.providers.job::job'\n        },\n        {\n            'name': 'random-string',  # by default: random word\n            'type': 'str'\n        },\n        {\n            'name': 'random-integer',\n            'type': 'int',\n        },\n        {\n            'name': 'random-integer-in-range',\n            'type': int,  # You can use Python types also\n            'min': 2,\n            'max': 5,\n        },\n        {\n            'name': 'random-float',\n            'type': 'number',  # You can use some type aliases also\n        },\n        {\n            'name': 'random-rounded-float-in-range',\n            'type': float,\n            'min': 1.555,\n            'max': 2.555,\n            'round': 3\n        },\n        {\n            'name': 'random-boolean',\n            'type': bool\n        },\n        {\n            'name': 'random-boolean-nullable',\n            'type': 'boolean',\n            'null': True\n        },\n        {\n            'name': 'random-type',\n            'type': 'random'  # random type from availables\n        },\n        {\n            'name': 'random-unique-identifier',\n            'type': 'uuid'\n        },\n        {\n            'name': 'random-id',  # positive integer\n            'type': 'id'\n        },\n\n        # Parameter name randomization\n        {\n            'name': ['random-name-from-iterable',\n                     'random-name-by-iterable'],\n            'type': 'str',\n        },\n        {\n            'name': fake_module.random_name_by_function,\n            'type': 'random',\n        },\n    ]\n)\n</code></pre>  Salida <pre><code>import requests\n\nreq = requests.post(\n    'https://github.com/mondeja/http-request-codegen',\n    data={\n        'fixed-value': '3',\n        'dinamic-value-by-iterable': '1',\n        'dinamic-value-by-function': '0',\n        'random-values-by-iterable': 'foo',\n        'random-values-by-function': '0',\n        'random-values-by-function-path': '0',\n        'random-value-by-faker-provider-function-path': ('Community developmen'\n                                                         't worker'),\n        'random-string': 'health',\n        'random-integer': '-56649',\n        'random-integer-in-range': '2',\n        'random-float': '42960.287142483445',\n        'random-rounded-float-in-range': '2.383',\n        'random-boolean': 'true',\n        'random-boolean-nullable': 'true',\n        'random-type': 'group',\n        'random-unique-identifier': '22d6f1b7b2f743c598b01228758794ff',\n        'random-id': '4444',\n        'random-name-from-iterable': 'good',\n        'random-name-from-function': 'decade'\n    },\n    headers={\n        'Accept-Language': '*',\n        'Accept-Charset': 'utf-8'\n    }\n)\n</code></pre>    multipart/form-data Entrada <pre><code>from http_request_codegen import generate_http_request_code\n\ngenerate_http_request_code(\n    language='python',\n    impl='requests',\n    method='POST',\n    url='https://github.com/mondeja/http-request-codegen',\n    headers={\n        'Accept-Language': '*',\n        'Accept-Charset': 'utf-8'\n    },\n    seed=2032,\n    files={\n        'fixed-filepath': '/tmp/foo.txt',\n        'random-filepath': None,\n        'fixed-filepath-content-type': (\n            '/tmp/bar.csv',\n            'text/csv'\n        ),\n        'fixed-filepath-ct-header': (\n            '/tmp/bar.json',\n            'application/json',\n            {'Accept-Charset': 'utf-8'}\n        ),\n        'random-filepath-content-type': (\n            None,\n            'text/plain'\n        ),\n        'random-filepath-ct-header': (\n            None,\n            'text/csv',\n            {'Accept-Charset': 'utf-8'}\n        )\n    }\n)\n</code></pre>  Salida <pre><code>import requests\n\nreq = requests.post(\n    'https://github.com/mondeja/http-request-codegen',\n    files={\n        'fixed-filepath': (\n            '/tmp/foo.txt',\n            open('/tmp/foo.txt', 'rb')\n        ),\n        'random-filepath': (\n            '/right/case.webm',\n            open('/right/case.webm', 'rb')\n        ),\n        'fixed-filepath-content-type': (\n            '/tmp/bar.csv',\n            open('/tmp/bar.csv', 'rb'),\n            'text/csv'\n        ),\n        'fixed-filepath-ct-header': (\n            '/tmp/bar.json',\n            open('/tmp/bar.json', 'rb'),\n            'application/json',\n            {\n                'Accept-Charset': 'utf-8'\n            }\n        ),\n        'random-filepath-content-type': (\n            '/child/natural.wav',\n            open('/child/natural.wav', 'rb'),\n            'text/plain'\n        ),\n        'random-filepath-ct-header': (\n            '/statement/able.ppt',\n            open('/statement/able.ppt', 'rb'),\n            'text/csv',\n            {\n                'Accept-Charset': 'utf-8'\n            }\n        )\n    },\n    headers={\n        'Accept-Language': '*',\n        'Accept-Charset': 'utf-8'\n    }\n)\n</code></pre>    application/json Entrada <pre><code>import fake_module\n\nfrom http_request_codegen import generate_http_request_code\n\ngenerate_http_request_code(\n    language='python',\n    impl='requests',\n    method='POST',\n    url='https://github.com/mondeja/http-request-codegen',\n    headers={\n        'Content-Type': 'application/json'\n    },\n    seed=2032,\n    parameters=[\n        {\n            'name': 'fixed-value',\n            'value': 3\n        },\n        {\n            'name': 'dinamic-value-by-iterable',\n            'value': [1, 2, 3]  # same as 'values': [1, 2, 3]\n        },\n        {\n            'name': 'dinamic-value-by-function',\n            'value': fake_module.integers_from_1_to_10\n        },\n\n        # Parameter value randomization\n        {\n            'name': 'random-values-by-iterable',\n            'values': ['foo', 'bar', 'baz']\n        },\n        {\n            'name': 'random-values-by-function',\n            'values': fake_module.integers_from_1_to_10\n        },\n        {\n            'name': 'random-values-by-function-path',\n            'values': 'fake_module::integers_from_1_to_10'\n        },\n        {\n            'name': 'random-value-by-faker-provider-function-path',\n            'faker': 'faker.providers.job::job'\n        },\n        {\n            'name': 'random-string',  # by default: random word\n            'type': 'str'\n        },\n        {\n            'name': 'random-integer',\n            'type': 'int',\n        },\n        {\n            'name': 'random-integer-in-range',\n            'type': int,  # You can use Python types also\n            'min': 2,\n            'max': 5,\n        },\n        {\n            'name': 'random-float',\n            'type': 'number',  # You can use some type aliases also\n        },\n        {\n            'name': 'random-rounded-float-in-range',\n            'type': float,\n            'min': 1.555,\n            'max': 2.555,\n            'round': 3\n        },\n        {\n            'name': 'random-boolean',\n            'type': bool\n        },\n        {\n            'name': 'random-boolean-nullable',\n            'type': 'boolean',\n            'null': True\n        },\n        {\n            'name': 'random-type',\n            'type': 'random'  # random type from availables\n        },\n        {\n            'name': 'random-unique-identifier',\n            'type': 'uuid'\n        },\n        {\n            'name': 'random-id',  # positive integer\n            'type': 'id'\n        },\n\n        # Parameter name randomization\n        {\n            'name': ['random-name-from-iterable',\n                     'random-name-by-iterable'],\n            'type': 'str',\n        },\n        {\n            'name': fake_module.random_name_by_function,\n            'type': 'random',\n        },\n    ]\n)\n</code></pre>  Salida <pre><code>import requests\n\nreq = requests.post(\n    'https://github.com/mondeja/http-request-codegen',\n    json={\n        'fixed-value': 3,\n        'dinamic-value-by-iterable': '1',\n        'dinamic-value-by-function': '0',\n        'random-values-by-iterable': 'foo',\n        'random-values-by-function': '0',\n        'random-values-by-function-path': '0',\n        'random-value-by-faker-provider-function-path': 'Pharmacologist',\n        'random-string': 'according',\n        'random-integer': '-56649',\n        'random-integer-in-range': '2',\n        'random-float': '42960.287142483445',\n        'random-rounded-float-in-range': '2.383',\n        'random-boolean': 'true',\n        'random-boolean-nullable': 'true',\n        'random-type': 'recent',\n        'random-unique-identifier': '95d9e7b38076410784b1427d964a5334',\n        'random-id': '4444',\n        'random-name-from-iterable': 'society',\n        'random-name-from-function': 'above'\n    },\n    headers={\n        'Content-Type': 'application/json'\n    }\n)\n</code></pre>    text/plain Entrada <pre><code>from http_request_codegen import generate_http_request_code\n\ngenerate_http_request_code(\n    language='python',\n    impl='requests',\n    method='POST',\n    url='https://github.com/mondeja/http-request-codegen',\n    headers={\n        'Content-Type': 'text/plain'\n    },\n    seed=2032,\n    parameters=[\n        {\n            'name': 'random-values-by-iterable',\n            'values': ['foo', 'bar', 'baz']\n        }\n    ]\n)\n</code></pre>  Salida <pre><code>import requests\n\nreq = requests.post(\n    'https://github.com/mondeja/http-request-codegen',\n    data='foo',\n    headers={\n        'Content-Type': 'text/plain'\n    }\n)\n</code></pre>          Bash curl GET Entrada <pre><code>import fake_module\n\nfrom http_request_codegen import generate_http_request_code\n\ngenerate_http_request_code(\n    language='bash',\n    impl='curl',\n    method='GET',\n    url='https://github.com/mondeja/http-request-codegen',\n    headers={\n        'Content-Type': 'application/json',\n        'Accept-Language': '*'\n    },\n    seed=2032,\n    parameters=[\n        {\n            'name': 'fixed-value',\n            'value': 3\n        },\n        {\n            'name': 'dinamic-value-by-iterable',\n            'value': [1, 2, 3]  # same as 'values': [1, 2, 3]\n        },\n        {\n            'name': 'dinamic-value-by-function',\n            'value': fake_module.integers_from_1_to_10\n        },\n\n        # Parameter value randomization\n        {\n            'name': 'random-values-by-iterable',\n            'values': ['foo', 'bar', 'baz']\n        },\n        {\n            'name': 'random-values-by-function',\n            'values': fake_module.integers_from_1_to_10\n        },\n        {\n            'name': 'random-values-by-function-path',\n            'values': 'fake_module::integers_from_1_to_10'\n        },\n        {\n            'name': 'random-value-by-faker-provider-function-path',\n            'faker': 'faker.providers.job::job'\n        },\n        {\n            'name': 'random-string',  # by default: random word\n            'type': 'str'\n        },\n        {\n            'name': 'random-integer',\n            'type': 'int',\n        },\n        {\n            'name': 'random-integer-in-range',\n            'type': int,  # You can use Python types also\n            'min': 2,\n            'max': 5,\n        },\n        {\n            'name': 'random-float',\n            'type': 'number',  # You can use some type aliases also\n        },\n        {\n            'name': 'random-rounded-float-in-range',\n            'type': float,\n            'min': 1.555,\n            'max': 2.555,\n            'round': 3\n        },\n        {\n            'name': 'random-boolean',\n            'type': bool\n        },\n        {\n            'name': 'random-boolean-nullable',\n            'type': 'boolean',\n            'null': True\n        },\n        {\n            'name': 'random-type',\n            'type': 'random'  # random type from availables\n        },\n        {\n            'name': 'random-unique-identifier',\n            'type': 'uuid'\n        },\n        {\n            'name': 'random-id',  # positive integer\n            'type': 'id'\n        },\n\n        # Parameter name randomization\n        {\n            'name': ['random-name-from-iterable',\n                     'random-name-by-iterable'],\n            'type': 'str',\n        },\n        {\n            'name': fake_module.random_name_by_function,\n            'type': 'random',\n        },\n    ]\n)\n</code></pre> <p>Pasa opciones extra al comando 'curl' en el par\u00e1metro <code>kwargs</code>. Por ejemplo, para guardar la respuesta en un archivo, pasa <code>kwargs={'-o': 'filename.ext'}</code>:</p> <pre><code>curl -o \"filename.ext\"\n</code></pre>  Salida <pre><code>curl \\\n    -d 'fixed-value=3&amp;dinamic-value-by-iterable=1&amp;dinamic-value-by-function=0&amp;random-values-by-iterable=foo&amp;random-values-by-function=0&amp;random-values-by-function-path=0&amp;random-value-by-faker-provider-function-path=Advice+worker&amp;random-string=country&amp;random-integer=-56649&amp;random-integer-in-range=2&amp;random-float=42960.287142483445&amp;random-rounded-float-in-range=2.383&amp;random-boolean=true&amp;random-boolean-nullable=true&amp;random-type=them&amp;random-unique-identifier=34f35b280ca744409c8fe404c28705e7&amp;random-id=4444&amp;random-name-from-iterable=stage&amp;random-name-from-function=develop' \\\n    -H 'Content-Type: application/json' \\\n    -H 'Accept-Language: *' \\\n    https://github.com/mondeja/http-request-codegen\n</code></pre>    POST application/x-www-form-urlencoded Entrada <pre><code>import fake_module\n\nfrom http_request_codegen import generate_http_request_code\n\ngenerate_http_request_code(\n    language='bash',\n    impl='curl',\n    method='POST',\n    url='https://github.com/mondeja/http-request-codegen',\n    headers={\n        'Accept-Language': '*',\n        'Accept-Charset': 'utf-8'\n    },\n    seed=2032,\n    parameters=[\n        {\n            'name': 'fixed-value',\n            'value': 3\n        },\n        {\n            'name': 'dinamic-value-by-iterable',\n            'value': [1, 2, 3]  # same as 'values': [1, 2, 3]\n        },\n        {\n            'name': 'dinamic-value-by-function',\n            'value': fake_module.integers_from_1_to_10\n        },\n\n        # Parameter value randomization\n        {\n            'name': 'random-values-by-iterable',\n            'values': ['foo', 'bar', 'baz']\n        },\n        {\n            'name': 'random-values-by-function',\n            'values': fake_module.integers_from_1_to_10\n        },\n        {\n            'name': 'random-values-by-function-path',\n            'values': 'fake_module::integers_from_1_to_10'\n        },\n        {\n            'name': 'random-value-by-faker-provider-function-path',\n            'faker': 'faker.providers.job::job'\n        },\n        {\n            'name': 'random-string',  # by default: random word\n            'type': 'str'\n        },\n        {\n            'name': 'random-integer',\n            'type': 'int',\n        },\n        {\n            'name': 'random-integer-in-range',\n            'type': int,  # You can use Python types also\n            'min': 2,\n            'max': 5,\n        },\n        {\n            'name': 'random-float',\n            'type': 'number',  # You can use some type aliases also\n        },\n        {\n            'name': 'random-rounded-float-in-range',\n            'type': float,\n            'min': 1.555,\n            'max': 2.555,\n            'round': 3\n        },\n        {\n            'name': 'random-boolean',\n            'type': bool\n        },\n        {\n            'name': 'random-boolean-nullable',\n            'type': 'boolean',\n            'null': True\n        },\n        {\n            'name': 'random-type',\n            'type': 'random'  # random type from availables\n        },\n        {\n            'name': 'random-unique-identifier',\n            'type': 'uuid'\n        },\n        {\n            'name': 'random-id',  # positive integer\n            'type': 'id'\n        },\n\n        # Parameter name randomization\n        {\n            'name': ['random-name-from-iterable',\n                     'random-name-by-iterable'],\n            'type': 'str',\n        },\n        {\n            'name': fake_module.random_name_by_function,\n            'type': 'random',\n        },\n    ]\n)\n</code></pre>  Salida <pre><code>curl \\\n    -X 'POST' \\\n    -d 'fixed-value=3&amp;dinamic-value-by-iterable=1&amp;dinamic-value-by-function=0&amp;random-values-by-iterable=foo&amp;random-values-by-function=0&amp;random-values-by-function-path=0&amp;random-value-by-faker-provider-function-path=Technical+sales+engineer&amp;random-string=cause&amp;random-integer=-56649&amp;random-integer-in-range=2&amp;random-float=42960.287142483445&amp;random-rounded-float-in-range=2.383&amp;random-boolean=true&amp;random-boolean-nullable=true&amp;random-type=within&amp;random-unique-identifier=bc3dd4fd3c6b4ecab7b9759b059f27d9&amp;random-id=4444&amp;random-name-from-iterable=watch&amp;random-name-from-function=pull' \\\n    -H 'Accept-Language: *' \\\n    -H 'Accept-Charset: utf-8' \\\n    https://github.com/mondeja/http-request-codegen\n</code></pre>    multipart/form-data Entrada <pre><code>from http_request_codegen import generate_http_request_code\n\ngenerate_http_request_code(\n    language='bash',\n    impl='curl',\n    method='POST',\n    url='https://github.com/mondeja/http-request-codegen',\n    headers={\n        'Accept-Language': '*',\n        'Accept-Charset': 'utf-8'\n    },\n    seed=2032,\n    files={\n        'fixed-filepath': '/tmp/foo.txt',\n        'random-filepath': None,\n        'fixed-filepath-content-type': (\n            '/tmp/bar.csv',\n            'text/csv'\n        ),\n        'fixed-filepath-ct-header': (\n            '/tmp/bar.json',\n            'application/json',\n            {'Accept-Charset': 'utf-8'}\n        ),\n        'random-filepath-content-type': (\n            None,\n            'text/plain'\n        ),\n        'random-filepath-ct-header': (\n            None,\n            'text/csv',\n            {'Accept-Charset': 'utf-8'}\n        )\n    }\n)\n</code></pre>  Salida <pre><code>curl \\\n    -X 'POST' \\\n    -F 'fixed-filepath=@/tmp/foo.txt' \\\n    -F 'random-filepath=@/hand/nor.gif' \\\n    -F 'fixed-filepath-content-type=@/tmp/bar.csv' \\\n    -F 'fixed-filepath-ct-header=@/tmp/bar.json' \\\n    -F 'random-filepath-content-type=@/move/bring.js' \\\n    -F 'random-filepath-ct-header=@/want/story.avi' \\\n    -H 'Accept-Language: *' \\\n    -H 'Accept-Charset: utf-8' \\\n    https://github.com/mondeja/http-request-codegen\n</code></pre>    application/json Entrada <pre><code>import fake_module\n\nfrom http_request_codegen import generate_http_request_code\n\ngenerate_http_request_code(\n    language='bash',\n    impl='curl',\n    method='POST',\n    url='https://github.com/mondeja/http-request-codegen',\n    headers={\n        'Content-Type': 'application/json'\n    },\n    seed=2032,\n    parameters=[\n        {\n            'name': 'fixed-value',\n            'value': 3\n        },\n        {\n            'name': 'dinamic-value-by-iterable',\n            'value': [1, 2, 3]  # same as 'values': [1, 2, 3]\n        },\n        {\n            'name': 'dinamic-value-by-function',\n            'value': fake_module.integers_from_1_to_10\n        },\n\n        # Parameter value randomization\n        {\n            'name': 'random-values-by-iterable',\n            'values': ['foo', 'bar', 'baz']\n        },\n        {\n            'name': 'random-values-by-function',\n            'values': fake_module.integers_from_1_to_10\n        },\n        {\n            'name': 'random-values-by-function-path',\n            'values': 'fake_module::integers_from_1_to_10'\n        },\n        {\n            'name': 'random-value-by-faker-provider-function-path',\n            'faker': 'faker.providers.job::job'\n        },\n        {\n            'name': 'random-string',  # by default: random word\n            'type': 'str'\n        },\n        {\n            'name': 'random-integer',\n            'type': 'int',\n        },\n        {\n            'name': 'random-integer-in-range',\n            'type': int,  # You can use Python types also\n            'min': 2,\n            'max': 5,\n        },\n        {\n            'name': 'random-float',\n            'type': 'number',  # You can use some type aliases also\n        },\n        {\n            'name': 'random-rounded-float-in-range',\n            'type': float,\n            'min': 1.555,\n            'max': 2.555,\n            'round': 3\n        },\n        {\n            'name': 'random-boolean',\n            'type': bool\n        },\n        {\n            'name': 'random-boolean-nullable',\n            'type': 'boolean',\n            'null': True\n        },\n        {\n            'name': 'random-type',\n            'type': 'random'  # random type from availables\n        },\n        {\n            'name': 'random-unique-identifier',\n            'type': 'uuid'\n        },\n        {\n            'name': 'random-id',  # positive integer\n            'type': 'id'\n        },\n\n        # Parameter name randomization\n        {\n            'name': ['random-name-from-iterable',\n                     'random-name-by-iterable'],\n            'type': 'str',\n        },\n        {\n            'name': fake_module.random_name_by_function,\n            'type': 'random',\n        },\n    ]\n)\n</code></pre>  Salida <pre><code>curl \\\n    -X 'POST' \\\n    -d 'fixed-value=3&amp;dinamic-value-by-iterable=1&amp;dinamic-value-by-function=0&amp;random-values-by-iterable=foo&amp;random-values-by-function=0&amp;random-values-by-function-path=0&amp;random-value-by-faker-provider-function-path=Engineer%2C+structural&amp;random-string=cold&amp;random-integer=-56649&amp;random-integer-in-range=2&amp;random-float=42960.287142483445&amp;random-rounded-float-in-range=2.383&amp;random-boolean=true&amp;random-boolean-nullable=true&amp;random-type=model&amp;random-unique-identifier=c2da52529b124efb818e781f4a0434d5&amp;random-id=4444&amp;random-name-from-iterable=community&amp;random-name-from-function=reason' \\\n    -H 'Content-Type: application/json' \\\n    https://github.com/mondeja/http-request-codegen\n</code></pre>    text/plain Entrada <pre><code>from http_request_codegen import generate_http_request_code\n\ngenerate_http_request_code(\n    language='bash',\n    impl='curl',\n    method='POST',\n    url='https://github.com/mondeja/http-request-codegen',\n    headers={\n        'Content-Type': 'text/plain'\n    },\n    seed=2032,\n    parameters=[\n        {\n            'name': 'random-values-by-iterable',\n            'values': ['foo', 'bar', 'baz']\n        }\n    ]\n)\n</code></pre>  Salida <pre><code>curl \\\n    -X 'POST' \\\n    -d 'random-values-by-iterable=foo' \\\n    -H 'Content-Type: text/plain' \\\n    https://github.com/mondeja/http-request-codegen\n</code></pre>"},{"location":"es/#soporte","title":"Soporte","text":"Javascript fetch     GET POST     Encabezados \u2705 \u2705   Par\u00e1metros \u2705 \u2705   Localizaci\u00f3n de par\u00e1metros \u2705 \u2705   Semilla de par\u00e1metros \u2705 \u2705   Indentaci\u00f3n personalizada \u2705 \u2705   Personalizaci\u00f3n de caracter de cadena \u2705 \u2705   Renderizado en una l\u00ednea \u2705 \u2705   Inicializaci\u00f3n personalizada \u2705 \u2705   Finalizaci\u00f3n personalizada \u2705 \u2705   M\u00e1ximo ancho de l\u00ednea personalizado \u2705 \u2705       Python requests     GET POST     Encabezados \u2705 \u2705   Par\u00e1metros \u2705 \u2705   Localizaci\u00f3n de par\u00e1metros \u2705 \u2705   Semilla de par\u00e1metros \u2705 \u2705   Indentaci\u00f3n personalizada \u2705 \u2705   Personalizaci\u00f3n de caracter de cadena \u2705 \u2705   Renderizado en una l\u00ednea \u2705 \u2705   Inicializaci\u00f3n personalizada \u2705 \u2705   Finalizaci\u00f3n personalizada \u2705 \u2705   M\u00e1ximo ancho de l\u00ednea personalizado \u2705 \u2705       Bash curl     GET POST     Encabezados \u2705 \u2705   Par\u00e1metros \u2705 \u2705   Localizaci\u00f3n de par\u00e1metros \u2705 \u2705   Semilla de par\u00e1metros \u2705 \u2705   Indentaci\u00f3n personalizada \u2705 \u2705   Personalizaci\u00f3n de caracter de cadena \u2705 \u2705   Renderizado en una l\u00ednea \u2705 \u2705   Inicializaci\u00f3n personalizada \u2705 \u2705   Finalizaci\u00f3n personalizada \u2705 \u2705   M\u00e1ximo ancho de l\u00ednea personalizado \u2705 \u2705"},{"location":"es/dev/","title":"Desarrollo","text":""},{"location":"es/dev/#preparacion-de-entorno-de-desarrollo","title":"Preparaci\u00f3n de entorno de desarrollo","text":"Linux/MacOS pip + virtualenv <pre><code>git clone https://github.com/mondeja/http-request-codegen.git\npython3 -m virtualenv venv\n. venv/bin/activate\npython3 -m pip install .[dev]\npre-commit install\n</code></pre>    Windows pip + virtualenv <pre><code>git clone https://github.com/mondeja/http-request-codegen.git\npython3 -m virtualenv venv\nvenv\\Scripts\\activate.bat\npython3 -m pip install .[dev]\npre-commit install\n</code></pre>"},{"location":"es/dev/#comandos-de-desarrollo","title":"Comandos de desarrollo","text":""},{"location":"es/dev/#testeo","title":"Testeo","text":"All <pre><code>pytest -sv\n</code></pre>  Coverage <pre><code>pytest -s --cov=http_request_codegen --cov-config=setup.cfg --cov-report=html\n</code></pre>  Doctests <pre><code>pytest -svv --doctest-modules http_request_codegen\n</code></pre>"},{"location":"es/dev/#linteado","title":"Linteado","text":"<pre><code>pre-commit run --all-files\n</code></pre>"},{"location":"es/dev/#desarrollando-implementaciones","title":"Desarrollando implementaciones","text":"<p>Para desarrollar una funci\u00f3n de un m\u00e9todo HTTP para una bilbioteca o un programa, necesitas tener en cuenta todos los par\u00e1metros descritos en la funci\u00f3n <code>generate_http_request_code</code>, pero no los valores aleatorios pasados en el argumento <code>parameters</code> ya que <code>http_request_codegen</code> provee funciones que pueden manejarlos.</p>"},{"location":"es/dev/#argumentos-de-implementacion","title":"Argumentos de implementaci\u00f3n","text":"<p>Cada funci\u00f3n de implementaci\u00f3n debe contener los siguientes argumentos, que son pasados de la funci\u00f3n de la API <code>generate_http_request_code</code>, por lo que se recomienda que te familiarices con los argumentos de esa funci\u00f3n antes de continuar con esta gu\u00eda porque est\u00e1n bien documentados ah\u00ed:</p> <ul> <li><code>url</code>: \u00fanico agumento posicional de la funci\u00f3n, representa la URL objetivo de la petici\u00f3n.</li> <li><code>headers</code>: diccionario de encabezados.</li> <li><code>parameters</code>: lista de objetos de datos de par\u00e1metros.</li> <li><code>files</code>: diccionario de archivos, s\u00f3lo pasados a peticiones POST, por lo que esta argumento no debe ser definido si el nombre de la funci\u00f3n de implementaci\u00f3n es diferente a <code>post</code>.</li> <li><code>wrap</code>: ancho m\u00e1ximo del trozo de c\u00f3digo renderizado.</li> <li><code>indent</code>: indentaci\u00f3n usada en el trozo de c\u00f3digo generado.</li> <li><code>quote_char</code>: caracter de limitaci\u00f3n de cadenas.</li> <li><code>setup</code> : trozo de c\u00f3digo colocado al principio de la petici\u00f3n generada.</li> <li><code>teardown</code> : trozo de c\u00f3digo colocado al final de la petici\u00f3n generada.</li> <li><code>oneline</code>: si se habilita, la renderizaci\u00f3n del trozo de c\u00f3digo se har\u00e1 en una l\u00ednea.</li> <li><code>seed</code>: semilla usada generando los valores aleatorios falsos de los par\u00e1metros.</li> <li><code>locale</code>: idioma usado por la biblioteca faker para localizar los valores aleatorios falseados para los par\u00e1metros.</li> </ul>"},{"location":"es/dev/#singularidades-de-metodos","title":"Singularidades de m\u00e9todos","text":""},{"location":"es/dev/#post","title":"POST","text":"<pre><code>    Most POST methods implementations render their code snippets different,\n    depending on *Content-Types* header, including by default some of the\n    most used *Content-Types* header related behaviours:\n\n    - The default behavior, even if you don't specify it explicitly in the\n        *Content-Type* header is the generation of an\n        `application/x-www-form-urlencoded` encoded request.\n    - If you want to generate a ``multipart/form-data`` encoded request,\n        you need to specify the files to sent using the ``files`` argument.\n    - If you specifies the *Content-Type* header `application/json`, the\n        parameters sent will be adjusted according to the JSON encoded POST\n        request.\n    - If you specifies the *Content-Type* header `text/plain`, you can only\n        send one parameter and it will be adjusted accordingly following\n        the implementation.\n</code></pre>"},{"location":"es/dev/#comportamiento-de-envoltura-en-una-linea","title":"Comportamiento de envoltura en una l\u00ednea","text":"<p>La primera cosa a tener en cuenta (y la m\u00e1s complicada) es el comportamiento de envoltura (argumento <code>wrap</code>) renderizando como si <code>oneline=True</code> fuera pasado. La pregunta es: \u00bfpuede un trozo de c\u00f3digo ser renderizado en una l\u00ednea si el largo estimado de la petici\u00f3n es menor que el valor del argumento <code>wrap</code>?</p> <p>Por ejemplo, peticiones con la biblioteca requests de Python pueden ser renderizadas usando este tipo de c\u00f3digo, en una l\u00ednea:</p> <pre><code>import requests\n\nreq = requests.get('https://github.com/mondeja/http-request-codegen')\n</code></pre> <p>...o usando m\u00faltiples l\u00edneas (<code>wrap</code> es menor que el largo esperado):</p> <pre><code>import requests\n\nreq = requests.get(\n  'https://github.com/mondeja/http-request-codegen'\n)\n</code></pre> <p>Por supuesto, esto tambi\u00e9n afecta a los argumentos <code>parameters</code>, <code>headers</code> y <code>kwargs</code>:</p> <pre><code>import requests\n\nreq = requests.get('localhost', params={'foo': 'bar'}, headers={'foo': 'bar'})\n</code></pre> <p>...los cuales pueden ser renderizados en m\u00faltiples l\u00edneas:</p> <pre><code>import requests\n\nreq = requests.get(\n    'localhost',\n    params={'foo': 'bar'},\n    headers={'foo': 'bar'}\n)\n</code></pre> <p>Ya que este comportamiento puede depender tanto de los argumentos <code>oneline</code> y <code>wrap</code>, la forma recomendada de implementar esto es calcular el largo de la petici\u00f3n esperada dentro del trozo de c\u00f3digo y, si es mayor o igual al argumento <code>wrap</code>, debe ser renderizada como si <code>oneline=True</code>.</p>  <p>Tip</p> <p>Puedes ver un ejemplo de este tipo de implementaci\u00f3n en la funci\u00f3n <code>http_request_codegen.generators.python.requests::get</code>.</p>  <p>Pero otras implementaciones podr\u00edan ser renderizadas en m\u00faltiples l\u00edneas sin importar el valor del argumento <code>wrap</code>.</p> <p>Por ejemplo, la implementaci\u00f3n de la API fetch de Javascript siempre renderizar\u00e1 un trozo de c\u00f3digo multil\u00ednea (a no ser que <code>oneline=True</code> sea expl\u00edcitamente definido), ya que la escritura de promesas Javascript en una s\u00f3la l\u00ednea no es una sintaxis com\u00fan y hay muy poco margen para que la petici\u00f3n generada pudiera no tener que ser evuelta dado el valor de envolura por defecto (80 en este caso). El trozo de c\u00f3digo m\u00ednimo razonable en una l\u00ednea para la implementaci\u00f3n fetch de la API Javascript ser\u00eda:</p> <pre><code>fetch('localhost').then(function(response) {}).catch(function(error) {console.error(error)});\n</code></pre> <p>...lo cual excede el valor por defecto del argumento <code>wrap</code> (80). En este tipo de casos, no hay necesidad de calcular el largo de el trozo de c\u00f3digo de la petici\u00f3n antes de construir la salida.</p>  <p>Tip</p> <p>Puedes ver un ejemplo de este tipo de implementaci\u00f3n en la funci\u00f3n <code>http_request_codegen.generators.javascript.fetch::get</code>.</p>  <p>En el primer caso, necesitas iterar por los argumentos <code>parameters</code>, <code>headers</code> y <code>kwargs</code> para calcular el largo esperado, entonces comparar el largo esperado con el valor del argumento <code>wrap</code> y, si lo alcanza, definir una variable interna para el comportamiento <code>oneline=True</code>. En el segundo, puedes asumir que el c\u00f3digo generado es multil\u00ednea a no ser que <code>oneline=True</code> sea definido expl\u00edcitamente como argumento.</p>"},{"location":"es/dev/#aleatorizando-valores","title":"Aleatorizando valores","text":"<p>La biblioteca provee las funciones <code>lazy_name_by_parameter</code> y <code>lazy_value_by_parameter</code> las cuales retornan el nombre el valor de un par\u00e1metro dada un diccionario de especificaci\u00f3n de par\u00e1metro. Estos deben ser usados para aleatorizar par\u00e1metros de una forma unificada entre implementaciones como se describe en la documentaci\u00f3n de la funci\u00f3n <code>generate_http_request_code</code>.</p>"},{"location":"es/dev/#utilidades-de-lenguajeplataforma","title":"Utilidades de lenguaje/plataforma","text":"<p>Puedes crear un m\u00f3dulo <code>_utils.py</code> dentro de un paquete de lenguaje o plataforma para almacenar utilidades que puedan ayudar en el proceso de construcci\u00f3n del trozo de c\u00f3digo, como:</p> <ul> <li>Definir la indentaci\u00f3n por defecto para el lenguaje/plataforma (argumento <code>indent</code>).</li> <li>Definir el valor por defecto de envoltura (argumento <code>wrap</code>).</li> <li>Definir los caracteres de delimitaci\u00f3n de cadenas (argumento <code>quote_char</code>).</li> <li>Escapar delimitadores de cadenas de valores (de acuerdo al argumento <code>quote_char</code> dado).</li> <li>Crear funciones de m\u00e1s alto nivel de generaci\u00f3n de c\u00f3digo para el lenguaje/plataforma, como definiciones de cadenas de comportamientos de envoltura, definiciones de diccionarios...</li> </ul>  <p>Tip</p> <p>Ver los m\u00f3dulos <code>_utils.py</code> actuales de los paquetes de <code>generators</code> como referencia.</p>"},{"location":"es/dev/#creando-casos-de-tests","title":"Creando casos de tests","text":"<p>Usa el script <code>scripts/create-impl-test-cases.py</code> para crear casos posibles de generaci\u00f3n de trozos de c\u00f3digo de acuerdo a combinaciones de argumentos. Esto te ayudar\u00e1 desarrollando implementaciones ya que te ahorra la necesidad de ejecutar cada posible combinaci\u00f3n de argumentos. \u00dasalo tal como sigue:</p> <pre><code>rm -rf cases &amp;&amp; python3 scripts/create-impl-test-cases.py \\\n  --language python \\\n  --implementation requests \\\n  --method GET \\\n  --directory cases\n</code></pre> <p>El comando previo crear\u00e1 un directorio <code>cases/</code> con un mont\u00f3n de trozos de c\u00f3digo generados, dadas las combinaciones descritas en <code>tests/combinations.py</code>.</p> <p>Cuando hayas revisado manualmente que todos los trozos de c\u00f3digo son generados correctamente, puedes crear un test para la implementaci\u00f3n en <code>tests/test_generators/test_&lt;lang&gt;/test_&lt;impl&gt;/test_&lt;impl&gt;.py</code>, colocando el directorio <code>cases/</code> en <code>tests/test_generators/test_&lt;lang&gt;/test_&lt;impl&gt;/&lt;METHOD&gt;</code>.</p> <p>Por ejemplo, para el m\u00e9todo GET de la biblioteca requests de Python, el m\u00f3dulo de test estar\u00eda en <code>tests/test_generators/test_python/test_requests/test_requests.py</code> y el directorio <code>cases/</code> estar\u00eda emplazado en <code>tests/test_generators/test_python/test_requests/GET/</code>.</p>  <p>Tip</p> <p>Puedes usar un m\u00f3dulo de test ya implementado como referencia escribiendo uno para la implementaci\u00f3n.</p>"},{"location":"es/reference/","title":"Referencia","text":""},{"location":"es/reference/#api-publica","title":"API p\u00fablica","text":""},{"location":"es/reference/#generate_http_request_code","title":"<code>generate_http_request_code</code>","text":"<pre><code>from http_request_codegen import generate_http_request_code\n</code></pre>   <p>Genera un trozo de c\u00f3digo de una petici\u00f3n HTTP para una biblioteca de un lenguaje de programaci\u00f3n dado o una interfaz de l\u00ednea de comandos de un programa, basado en un m\u00e9todo HTTP v\u00e1lido y una especificaci\u00f3n de par\u00e1metros.</p> <p>Hay algunas peculiaridades concernientes a ciertos m\u00e9todos:</p>  POST <p> La mayor\u00eda de implementaciones de m\u00e9todos POST renderizan sus trozos de c\u00f3digo diferente, dependiendo del encabezado Content-Types, incluyendo por defecto algunos de los comportamientos seg\u00fan dicho encabezado m\u00e1s usados:</p> <ul> <li>El comportamiento por defecto, incluso si no lo especificas expl\u00edcitamente en el encabezado Content-Type es la generaci\u00f3n de una petici\u00f3n codificada como <code>application/x-www-form-urlencoded</code>.</li> <li>Si quieres generar una petici\u00f3n codificada como <code>multipart/form-data</code>, necesitas especificar los archivos a enviar usando el argumento <code>files</code>.</li> <li>Si especificas el encabezado Content-Type <code>application/json</code>, los par\u00e1metros enviados ser\u00e1n ajustados de acuerdo a la petici\u00f3n POST codificada como JSON.</li> <li>Si especificas el encabezado Content-Type <code>text/plain</code>, s\u00f3lo puedes enviar un par\u00e1metro y ser\u00e1 ajustado de acordemente siguiendo la implementaci\u00f3n. </li> </ul>  <p>Parameters:</p>    Name Type Description Default     <code>language</code> <code>str</code> <p>Lenguaje de programaci\u00f3n o plataforma del trozo de c\u00f3digo resultante. Ver Soporte para comprobar las plataformas y lenguajes de programaci\u00f3n soportados.</p> <code>None</code>   <code>impl</code> <code>str</code> <p>Tipo de implementaci\u00f3n usada para el trozo de c\u00f3digo. Puede ser una biblioteca, un programa o la API de un lenguaje. Ver Soporte para comprobar las implementaciones soportadas por lenguaje.</p> <code>None</code>   <code>method</code> <code>str</code> <p>M\u00e9todo HTTP de la petici\u00f3n generada.</p> <code>'GET'</code>   <code>url</code> <code>str, iterable, callable</code> <p>Endpoint URL de la petici\u00f3n generada.</p> <ul> <li>Definido como una cadena, la url ser\u00e1 la cadena misma.</li> <li>Definido como un iterable, la url ser\u00e1 seleccionada aleatoriamente del iterable. Soporta recursividad: hasta que una cadena no se seleccione la recursi\u00f3n no se detendr\u00e1.</li> <li>Definido como un invocable, la url ser\u00e1 el valor retornado por el invocable. Soporta recursividad: hasta que una cadena no se seleccione la recursi\u00f3n no se detendr\u00e1.</li> </ul> <code>'http://localhost'</code>   <code>headers</code> <code>dict</code> <p>Mapeo de nombres y valores de encabezados.</p> <code>{}</code>   <code>parameters</code> <code>list</code> <p>Lista de par\u00e1metros para la petici\u00f3n. Cada par\u00e1metro debe ser un diccionario. Este diccionario define, para cada par\u00e1metro, cual es el nombre del par\u00e1metro y como son generados los valores del par\u00e1metro:</p> <ul> <li> <p>name (str, list, function): Nombre del par\u00e1metro. Al menos     este el atributo <code>names</code> son requeridos.</p> <ul> <li>Definido como una cadena, el nombre ser\u00e1 la cadena misma.</li> <li>Definido como un iterable, el nombre ser\u00e1 seleccionado aleatoriamente del iterable. Soporta recursividad: si una cadena no es seleccionada la recursi\u00f3n no se detendr\u00e1.</li> <li>Definido como un invocable, el nombre ser\u00e1 el valor retornado por el invocable. Soporta recursividad: si una cadena no es seleccionada la recursi\u00f3n no se detendr\u00e1.</li> </ul> </li> <li> <p>names (str, list, function): Nombre del par\u00e1metro. Al menos     este o el atributo <code>name</code> son requeridos.</p> <ul> <li>Definido como un iterable, el nombre ser\u00e1 seleccionado aleatoriamente del iterable. Soporta recursividad: si una cadena no es seleccionada la recursi\u00f3n no se detendr\u00e1.</li> <li>Definido como una cadena, debe ser un m\u00f3dulo de Python formateado como una ruta siguiendo el formato <code>'ruta.al.modulo::nombre_de_funcion'</code> y el nombre retornado ser\u00e1 usado como el nombre para el par\u00e1metro, lo que es \u00fatil si elegir un valor aleatorio de una lista no se ajusta a tus necesidades.</li> <li>Definido como un invocable, el nombre ser\u00e1 el valor retornado por el invocable. Soporta recursividad: si una cadena no es seleccionada la recursi\u00f3n no se detendr\u00e1.</li> </ul> </li> <li> <p>type (str, iterable, callable): Tipo de dato del par\u00e1metro.    Si no se define y <code>value</code>, <code>values</code> y <code>faker</code> tampoco     lo son, ser\u00e1 considerada como una cadena y el valor del par\u00e1metro ser\u00e1 una palabra aleatoria construida usando la biblioteca faker. Para algunos tipos, otros atributos est\u00e1n soportados dentro del diccionario de par\u00e1metros, documentados si es as\u00ed en cada tipo. Los siguientes tipos de par\u00e1metros seg\u00fan el tipo de dato est\u00e1n soportados como atributos de diccionarios de par\u00e1metros, as\u00ed como sus correspondientes nombres en letras may\u00fasculas:</p> <ul> <li><code>'str'</code>: Tipo b\u00e1sico de cadena. Puede ser definido con el tipo integrado en Python <code>str</code> o las cadenas <code>'str'</code> y     <code>'string'</code>.</li> <li><code>'int'</code>: Tipo entero b\u00e1sico. Puede ser definido con el tipo integrado en Python <code>int</code> o las cadenas <code>'int'</code> e     <code>'integer'</code>. Por defecto, ser\u00e1 un entero en el rango -65536 a 65536. Los valores m\u00ednimos y m\u00e1ximos posibles pueden ser definidos con los atributos opcionales <code>min</code> y <code>max</code>.</li> <li><code>'float'</code>: Tipo de n\u00famero decimal. Puede ser definido con el tipo de dato integrado en Python <code>float</code> o las cadenas <code>'float'</code> y <code>number</code>. Por defecto ser\u00e1 en el rango  -65536 to 65536. Los valores m\u00e1ximos y m\u00ednimos posibles pueden ser definidos con los atributos de par\u00e1metro opcionales <code>min</code> y <code>max</code> y pueden ser redondeados con la funci\u00f3n integrada en Python <code>round</code> usando el atributo <code>round</code>.</li> <li><code>'bool'</code>: Tipo b\u00e1sico booleano. Puede ser definido con el tipo de dato integrado en Python <code>bool</code> o las cadenas <code>'bool'</code> y <code>'boolean'</code>. Retorna como valor del par\u00e1metro una de las cadenas <code>'true'</code> o <code>'false'</code>. Si pasas el atributo de par\u00e1metro opcional <code>null</code> como <code>True</code>, la cadena <code>'null'</code> tambi\u00e9n puede ser retornada.</li> <li><code>'uuid'</code>: Tipo de identificador \u00fanico. Puede ser definido con el tipo Python <code>uuid.UUID</code> o las cadenas <code>'uuid'</code> y <code>'uuid4'</code>. Es un identificador \u00fanico v4 codificado como una cadena hexadecimal.</li> <li><code>'id'</code>: B\u00e1sico identificador como clave primaria. Es un entero positivo en el rango 1 a 65536. El valor m\u00e1ximo puede ser definido por el atributo opcional <code>max</code>.</li> <li><code>'random'</code>: Tipo aleatorio entre todos los tipos disponibles. Puedes definir una serie de tipos posibles pasando un iterable al atributo opcional de par\u00e1metro <code>types</code>.</li> </ul> <p>Definido como un iterable o invocable, el tipo ser\u00e1 seleccionado aleatoriamente desde el iterable, o el valor retornado desde el invocable ser\u00e1 usado. Esto te permite seleccionar un tipo aleatorio de una lista de tipos predefinidos.</p> </li> <li> <p>value (str, iterable, callable): Valor del par\u00e1metro. Si no est\u00e1 definido y <code>type</code>, <code>values</code> y <code>faker</code> tampoco lo est\u00e1n, el valor del par\u00e1metro ser\u00e1 una palabra aleatoria constru\u00edda usando la biblioteca faker.</p> <ul> <li>Definido como una cadena, el valor ser\u00e1 la cadena misma.</li> <li>Definido como un iterable, el valor ser\u00e1 seleccionado aleatoriamente del iterable. Soporta recursividad: si una cadena no es seleccionada la recursi\u00f3n no se detendr\u00e1.</li> <li>Definido como un invocable, el valor ser\u00e1 retornado del invocable. Soporta recursividad: si una cadena no es seleccionada la recursi\u00f3n no se detendr\u00e1.</li> </ul> </li> <li> <p>values (list, iterable, callable): Posibles valores para el par\u00e1metro.</p> <ul> <li>Definido como un iterable, el valor ser\u00e1 seleccionado aleatoriamente del iterable. Soporta recursividad: si una cadena no es seleccionada la recursi\u00f3n no se detendr\u00e1.</li> <li>Definido como una cadena, debe ser un m\u00f3dulo de Python formateado como una ruta de m\u00f3dulo siguiendo el formato <code>'ruta.al.modulo::nombre_de_funcion'</code> y el valor retornado ser\u00e1 usado como el valor para el par\u00e1metro, lo cual es \u00fatil si elegir un valor aleatorio de una lista no se ajusta a tus necesidades.</li> <li>Definido como un invocable, el valor ser\u00e1 retornado del invocable. Soporta recursividad: si una cadena no es seleccionada la recursi\u00f3n no se detendr\u00e1.</li> </ul> </li> <li> <p>faker (str, function): Ruta a m\u00f3dulo formateada al estilo Python hacia una funci\u00f3n de un proveedor Faker usado para construir el valor aleatorio. Puede ser un proveedor est\u00e1ndar, externo o cualquier funci\u00f3n, pero si no es un proveedor, <code>seed</code> y <code>locale</code> no tendr\u00e1n efecto.</p> <ul> <li>Definido como una cadena debe seguir el formato <code>'path.to.provider.module::function'</code>.</li> </ul> </li> </ul> <code>[]</code>   <code>files</code> <code>dict</code> <p>Mapeado de archivos a enviar a la URL. S\u00f3lo tiene efecto para m\u00e9todos POST. Si defines este argumento, el encabezado <code>Content-Type</code> de la petici\u00f3n ser\u00e1 asumido como <code>'multipart/form-data'</code>, pero s\u00f3lo ser\u00e1 expl\u00edcitamente especificado en el c\u00f3digo generado si la implementaci\u00f3n lo necesita. Cada valor acepta una cadena, <code>None</code> o una tupla:</p> <ul> <li>Definido como una cadena, debe ser la ruta al archivo a enviar.</li> <li>Definido como <code>None</code>, la ruta al archivo ser\u00e1 aleatoria usando la funci\u00f3n <code>faker.providers.file::file_path</code>.</li> <li>Definido como una tupla, el primer valor debe ser la ruta del archivo a enviar (si es <code>None</code> ser\u00e1 aleatoria), el segundo valor el tipo de contenido del archivo y el tercer valor un diccionario de encabezados personalizados para el archivo.</li> </ul> <code>{}</code>   <code>wrap</code> <code>int</code> <p>Ancho m\u00e1ximo del trozo de c\u00f3digo generado. Si se excede, el c\u00f3digo renderizado ser\u00e1 convenientemente formateado en m\u00faltiples l\u00edneas.</p> <code>80</code>   <code>indent</code> <code>str</code> <p>Cadena de indentaci\u00f3n usada en el c\u00f3digo generado. Si no se define se usar\u00e1 la cadena de indentaci\u00f3n m\u00e1s com\u00fanmente usada para la implementaci\u00f3n.</p> <code>None</code>   <code>quote_char</code> <code>str</code> <p>Caracter de puntuaci\u00f3n para cadenas usados en el c\u00f3digo generado.</p> <code>\"'\"</code>   <code>setup</code> <code>bool, str</code> <p>Si es <code>True</code>, incluye el c\u00f3digo necesitado por una implementaci\u00f3n para realizar la petici\u00f3n. Podr\u00edan ser importaciones de m\u00f3dulos adicionales o inicializaci\u00f3n de objetos, dependiendo de la implementaci\u00f3n. Puedes personalizar este trozo pasando una cadena con el tr\u00f3zo de c\u00f3digo que quieres incluir.</p> <code>None</code>   <code>teardown</code> <code>str</code> <p>Trozo de c\u00f3digo a incluir despu\u00e9s del c\u00f3digo de la petici\u00f3n HTTP.</p> <code>None</code>   <code>oneline</code> <code>bool</code> <p>Renderiza el c\u00f3digo en s\u00f3lo una l\u00ednea.</p> <code>False</code>   <code>seed</code> <code>int</code> <p>Semilla usada generando valores aleatorios falsos de par\u00e1metros. \u00datil si quieres generar el mismo conjunto de valores entre diferentes trozos de c\u00f3digo.</p> <code>None</code>   <code>locale</code> <code>str</code> <p>Local usada por la biblioteca faker para localizar los valores aleatorios falsos para los par\u00e1metros.</p> <code>None</code>    <p>Exceptions:</p>    Type Description     <code>ValueError</code> <p>Valor no es un valor v\u00e1lido en su contexto.</p>   <code>TypeError</code> <p>Valores no concuerdan con los tipos soportados para ellos.</p>   <code>ImportError</code> <p>Funci\u00f3n-modulo de Python especificada no puede ser importada con \u00e9xito.</p>    <p>Returns:</p>    Type Description     <code>str</code> <p>Trozo de c\u00f3digo de petici\u00f3n HTTP.</p>"},{"location":"es/reference/#generate_http_request_md_fenced_code_block","title":"<code>generate_http_request_md_fenced_code_block</code>","text":"<pre><code>from http_request_codegen import generate_http_request_md_fenced_code_block\n</code></pre>   <p>Envuelve la funci\u00f3n <code>generate_http_request_code</code> en un bloque de c\u00f3digo Markdown.</p> <p>Parameters:</p>    Name Type Description Default     <code>fence_string</code> <code>str</code> <p>Cadena de caracteres que delimita el inicio y el final del bloque de c\u00f3gido. No realiza ninguna comprobaci\u00f3n sobre si la cadena es v\u00e1lida.</p> <code>'```'</code>   <code>**kwargs</code>  <p>Todos los otros argumentos opcionales son pasados a la funci\u00f3n <code>generate_http_request_code</code>.</p> <code>{}</code>    <p>Examples:</p> <pre><code>&gt;&gt;&gt; generate_http_request_md_fenced_code_block(setup=False)\n\"```python\\nreq = requests.get('http://localhost')\\n```\"\n</code></pre> <pre><code>&gt;&gt;&gt; generate_http_request_md_fenced_code_block(fence_string='~~~',\n...                                            setup=False)\n\"~~~python\\nreq = requests.get('http://localhost')\\n~~~\"\n</code></pre> <p>Returns:</p>    Type Description     <code>str</code> <p>Bloque de c\u00f3digo Markdown con el tr\u00f3zo de c\u00f3digo de la petici\u00f3n dentro.</p>"},{"location":"es/reference/#lazy_name_by_parameter","title":"<code>lazy_name_by_parameter</code>","text":"<pre><code>from http_request_codegen import lazy_name_by_parameter\n</code></pre>   <p>Dado un diccionario de opciones de par\u00e1metros, retorna el nombre de par\u00e1metro correspondiente construido siguiendo las reglas listadas en la documentaci\u00f3n del argumento <code>parameters</code> de la funci\u00f3n <code>generate_http_request_code</code>.</p> <p>La estrategia de construcci\u00f3n de nombre es comprobar los siguientes atributos en el orden dado:</p> <ul> <li><code>name</code></li> <li><code>names</code></li> </ul> <p>Puedes usar esta funci\u00f3n para construir los par\u00e1metros a un nivel m\u00e1s bajo. Esto puede ser usado, por ejemplo, para a\u00f1adir los par\u00e1metros a una URL generando c\u00f3digos de m\u00e9todos GET si una implementaci\u00f3n los a\u00f1ade como argumentos de una funci\u00f3n.</p> <p>Parameters:</p>    Name Type Description Default     <code>parameter_data</code> <code>dict</code> <p>Datos de especificaci\u00f3n de par\u00e1metro. Estan definidos en las secciones name y names de la documentaci\u00f3n de la funci\u00f3n <code>generate_http_request_code</code>.</p> required   <code>seed</code> <code>int</code> <p>Semilla usada aleatorizando nombres.</p> <code>None</code>    <p>Exceptions:</p>    Type Description     <code>ValueError</code> <p>ninguno de los atributos <code>name</code> o <code>name</code> est\u00e1n definidos dentro del diccionario <code>parameter_data</code>.</p>    <p>Examples:</p> <pre><code>&gt;&gt;&gt; lazy_name_by_parameter({'name': 'foo'})\n'foo'\n</code></pre> <pre><code>&gt;&gt;&gt; result = lazy_name_by_parameter({'names': ['foo', 'bar', 'baz']})\n&gt;&gt;&gt; result in ['foo', 'bar', 'baz']\nTrue\n</code></pre> <p>Returns:</p>    Type Description     <code>str</code> <p>Nombre de par\u00e1metro.</p>"},{"location":"es/reference/#lazy_value_by_parameter","title":"<code>lazy_value_by_parameter</code>","text":"<pre><code>from http_request_codegen import lazy_value_by_parameter\n</code></pre>   <p>Dado un diccionario de opciones de par\u00e1metros, retorna el valor correspondiente construido siguiendo las reglas listadas en el argumento <code>parametros</code> de la documentaci\u00f3n de la funci\u00f3n <code>generate_http_request_code</code>.</p> <p>Por ejemplo, dado <code>{'type': int}</code> como entrada, la salida ser\u00e1 un n\u00famero aleatorio como cadena.</p> <p>La estrategia de construcci\u00f3n del valor es comprobar los siguientes atributos en el orden dado:</p> <ul> <li><code>value</code></li> <li><code>'values'</code></li> <li><code>'faker'</code></li> <li><code>'type'</code></li> </ul> <p>Si no se pasan ninguno de los atributos previos ser\u00e1 tratado como si se hubiera pasado <code>{'type': str}</code>, retornando una palabra aleatoria.</p> <p>Puedes usar esta funci\u00f3n para construir los par\u00e1metros a un nivel m\u00e1s bajo. Esto puede ser usado, por ejemplo, para a\u00f1adir los par\u00e1metros a una URL generando c\u00f3digos de m\u00e9todos GET si una implementaci\u00f3n los a\u00f1ade como argumentos de una funci\u00f3n.</p> <p>Parameters:</p>    Name Type Description Default     <code>parameter_data</code> <code>dict</code> <p>Datos de especificaci\u00f3n de par\u00e1metro. Est\u00e1n definidos en las secciones type, value, values y faker del argumento <code>parameters</code> en la documentaci\u00f3n de la funci\u00f3n <code>generate_http_request_code</code>.</p> required   <code>seed</code> <code>int</code> <p>Semilla usada aleatorizando valores.</p> <code>None</code>   <code>locale</code> <code>str</code> <p>Local usada por los proveedores de <code>faker</code>.</p> <code>None</code>    <p>Examples:</p> <pre><code>&gt;&gt;&gt; lazy_value_by_parameter({'value': 'foo'})\n'foo'\n</code></pre> <pre><code>&gt;&gt;&gt; result = lazy_value_by_parameter({'values': ['foo', 'bar', 'baz']})\n&gt;&gt;&gt; result in ['foo', 'bar', 'baz']\nTrue\n</code></pre> <pre><code>&gt;&gt;&gt; result = lazy_value_by_parameter({'type': 'int'})\n&gt;&gt;&gt; result.replace('.', '', 1).lstrip('-').isnumeric() and \\\n...     isinstance(result, str)\nTrue\n</code></pre> <p>Exceptions:</p>    Type Description     <code>ImportError</code> <p>el atributo <code>values</code> apunta a un objeto de Python inexsistente.</p>   <code>TypeError</code> <p>el valor del atributo <code>'faker'</code> no contiene una cadena o un objeto de Python invocable, o si el atributo <code>'type'</code> no soporta el tipo definido.</p>   <code>ImportError</code> <p>valor del atributo <code>faker</code>, cuando es pasada como cadena, apunta un objeto de Python inexistente.</p>    <p>Returns:</p>    Type Description     <code>str</code> <p>Valor de par\u00e1metro.</p>"}]}