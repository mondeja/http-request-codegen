{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"http-request-codegen generates HTTP request code snippets for different implementations. It's perfect if you want to include examples documenting APIs. Supports the following features: Request parameters values randomization using multiples strategies: Random values from iterables and callables. Random values from data types. Random values from Faker providers . Randomization using seeds and localization. Request headers customization. Request optional arguments by implementation. Custom line wrapping. Custom indentation. Custom quotation characters. Rendering in one line. Remember This is not a greater level API across multiple HTTP request libraries, but it is written so that you can generate the most common types of HTTP requests regardless of the implementation. Installation \u00b6 pip pip install http-request-codegen pipenv pipenv install http-request-codegen source git clone https://github.com/mondeja/http-request-codegen.git --depth = 1 cd http-request-codegen python setup.py install development git clone https://github.com/mondeja/http-request-codegen.git cd http-request-codegen pip install -e . [ dev ] Demo \u00b6 Python requests GET Input import fake_module from http_request_codegen import generate_http_request_code generate_http_request_code ( language = 'python' , impl = 'requests' , method = 'GET' , url = 'https://github.com/mondeja/http-request-codegen' , headers = { 'Content-Type' : 'application/json' , 'Accept-Language' : '*' }, seed = 3549 , parameters = [ { 'name' : 'fixed-value' , 'value' : 3 }, { 'name' : 'dinamic-value-by-iterable' , 'value' : [ 1 , 2 , 3 ] # same as 'values': [1, 2, 3] }, { 'name' : 'dinamic-value-by-function' , 'value' : fake_module . integers_from_1_to_10 }, # Parameter value randomization { 'name' : 'random-values-by-iterable' , 'values' : [ 'foo' , 'bar' , 'baz' ] }, { 'name' : 'random-values-by-function' , 'values' : fake_module . integers_from_1_to_10 }, { 'name' : 'random-values-by-function-path' , 'values' : 'fake_module::integers_from_1_to_10' }, { 'name' : 'random-value-by-faker-provider-function-path' , 'faker' : 'faker.providers.job::job' }, { 'name' : 'random-string' , # by default: random word 'type' : 'str' }, { 'name' : 'random-integer' , 'type' : 'int' , }, { 'name' : 'random-integer-in-range' , 'type' : int , # You can use Python types also 'min' : 2 , 'max' : 5 , }, { 'name' : 'random-float' , 'type' : 'number' , # You can use some type aliases also }, { 'name' : 'random-rounded-float-in-range' , 'type' : float , 'min' : 1.555 , 'max' : 2.555 , 'round' : 3 }, { 'name' : 'random-boolean' , 'type' : bool }, { 'name' : 'random-boolean-nullable' , 'type' : 'boolean' , 'null' : True }, { 'name' : 'random-type' , 'type' : 'random' # random type from availables }, { 'name' : 'random-unique-identifier' , 'type' : 'uuid' }, { 'name' : 'random-id' , # positive integer 'type' : 'id' }, # Parameter name randomization { 'name' : [ 'random-name-from-iterable' , 'random-name-by-iterable' ], 'type' : 'str' , }, { 'name' : fake_module . random_name_by_function , 'type' : 'random' , }, ] ) Parameters are passed using requests.get function params parameter, not by appending ?foo=bar&... to the URL. If you want this behaviour, build the passed URL using lazy_name_by_parameter and lazy_value_by_parameter functions instead of use the parameters argument. If you want to import more modules in the initialization snippet, keep in mind that you must provide import requests line also in the setup argument. For example, setup='import requests\\nimport foo\\n\\n' will render as: import requests import foo requests . get ( '<url>' ... Output import requests req = requests . get ( 'https://github.com/mondeja/http-request-codegen' , params = { 'fixed-value' : '3' , 'dinamic-value-by-iterable' : '3' , 'dinamic-value-by-function' : '9' , 'random-values-by-iterable' : 'baz' , 'random-values-by-function' : '9' , 'random-values-by-function-path' : '9' , 'random-value-by-faker-provider-function-path' : 'Warehouse manager' , 'random-string' : 'gas' , 'random-integer' : '19824' , 'random-integer-in-range' : '4' , 'random-float' : '15267.672192991231' , 'random-rounded-float-in-range' : '2.171' , 'random-boolean' : 'false' , 'random-boolean-nullable' : 'null' , 'random-type' : 'raise' , 'random-unique-identifier' : '32604605e4aa4fbeb71026b1df3c4087' , 'random-id' : '42681' , 'random-name-by-iterable' : 'tax' , 'random-name-by-function' : 'big' }, headers = { 'Content-Type' : 'application/json' , 'Accept-Language' : '*' } ) POST application/x-www-form-urlencoded Input import fake_module from http_request_codegen import generate_http_request_code generate_http_request_code ( language = 'python' , impl = 'requests' , method = 'POST' , url = 'https://github.com/mondeja/http-request-codegen' , headers = { 'Accept-Language' : '*' , 'Accept-Charset' : 'utf-8' }, seed = 3549 , parameters = [ { 'name' : 'fixed-value' , 'value' : 3 }, { 'name' : 'dinamic-value-by-iterable' , 'value' : [ 1 , 2 , 3 ] # same as 'values': [1, 2, 3] }, { 'name' : 'dinamic-value-by-function' , 'value' : fake_module . integers_from_1_to_10 }, # Parameter value randomization { 'name' : 'random-values-by-iterable' , 'values' : [ 'foo' , 'bar' , 'baz' ] }, { 'name' : 'random-values-by-function' , 'values' : fake_module . integers_from_1_to_10 }, { 'name' : 'random-values-by-function-path' , 'values' : 'fake_module::integers_from_1_to_10' }, { 'name' : 'random-value-by-faker-provider-function-path' , 'faker' : 'faker.providers.job::job' }, { 'name' : 'random-string' , # by default: random word 'type' : 'str' }, { 'name' : 'random-integer' , 'type' : 'int' , }, { 'name' : 'random-integer-in-range' , 'type' : int , # You can use Python types also 'min' : 2 , 'max' : 5 , }, { 'name' : 'random-float' , 'type' : 'number' , # You can use some type aliases also }, { 'name' : 'random-rounded-float-in-range' , 'type' : float , 'min' : 1.555 , 'max' : 2.555 , 'round' : 3 }, { 'name' : 'random-boolean' , 'type' : bool }, { 'name' : 'random-boolean-nullable' , 'type' : 'boolean' , 'null' : True }, { 'name' : 'random-type' , 'type' : 'random' # random type from availables }, { 'name' : 'random-unique-identifier' , 'type' : 'uuid' }, { 'name' : 'random-id' , # positive integer 'type' : 'id' }, # Parameter name randomization { 'name' : [ 'random-name-from-iterable' , 'random-name-by-iterable' ], 'type' : 'str' , }, { 'name' : fake_module . random_name_by_function , 'type' : 'random' , }, ] ) Output import requests req = requests . post ( 'https://github.com/mondeja/http-request-codegen' , data = { 'fixed-value' : '3' , 'dinamic-value-by-iterable' : '3' , 'dinamic-value-by-function' : '9' , 'random-values-by-iterable' : 'baz' , 'random-values-by-function' : '9' , 'random-values-by-function-path' : '9' , 'random-value-by-faker-provider-function-path' : 'Animal technologist' , 'random-string' : 'test' , 'random-integer' : '19824' , 'random-integer-in-range' : '4' , 'random-float' : '15267.672192991231' , 'random-rounded-float-in-range' : '2.171' , 'random-boolean' : 'false' , 'random-boolean-nullable' : 'null' , 'random-type' : 'focus' , 'random-unique-identifier' : '4f7d5765147249bfaf4faf0a96f83160' , 'random-id' : '42681' , 'random-name-by-iterable' : 'suffer' , 'random-name-by-function' : 'carry' }, headers = { 'Accept-Language' : '*' , 'Accept-Charset' : 'utf-8' } ) multipart/form-data Input from http_request_codegen import generate_http_request_code generate_http_request_code ( language = 'python' , impl = 'requests' , method = 'POST' , url = 'https://github.com/mondeja/http-request-codegen' , headers = { 'Accept-Language' : '*' , 'Accept-Charset' : 'utf-8' }, seed = 3549 , files = { 'fixed-filepath' : '/tmp/foo.txt' , 'random-filepath' : None , 'fixed-filepath-content-type' : ( '/tmp/bar.csv' , 'text/csv' ), 'fixed-filepath-ct-header' : ( '/tmp/bar.json' , 'application/json' , { 'Accept-Charset' : 'utf-8' } ), 'random-filepath-content-type' : ( None , 'text/plain' ), 'random-filepath-ct-header' : ( None , 'text/csv' , { 'Accept-Charset' : 'utf-8' } ) } ) Output import requests req = requests . post ( 'https://github.com/mondeja/http-request-codegen' , files = { 'fixed-filepath' : ( '/tmp/foo.txt' , open ( '/tmp/foo.txt' , 'rb' ) ), 'random-filepath' : ( '/top/quickly.odp' , open ( '/top/quickly.odp' , 'rb' ) ), 'fixed-filepath-content-type' : ( '/tmp/bar.csv' , open ( '/tmp/bar.csv' , 'rb' ), 'text/csv' ), 'fixed-filepath-ct-header' : ( '/tmp/bar.json' , open ( '/tmp/bar.json' , 'rb' ), 'application/json' , { 'Accept-Charset' : 'utf-8' } ), 'random-filepath-content-type' : ( '/land/maintain.bmp' , open ( '/land/maintain.bmp' , 'rb' ), 'text/plain' ), 'random-filepath-ct-header' : ( '/every/gas.flac' , open ( '/every/gas.flac' , 'rb' ), 'text/csv' , { 'Accept-Charset' : 'utf-8' } ) }, headers = { 'Accept-Language' : '*' , 'Accept-Charset' : 'utf-8' } ) application/json Input import fake_module from http_request_codegen import generate_http_request_code generate_http_request_code ( language = 'python' , impl = 'requests' , method = 'POST' , url = 'https://github.com/mondeja/http-request-codegen' , headers = { 'Content-Type' : 'application/json' }, seed = 3549 , parameters = [ { 'name' : 'fixed-value' , 'value' : 3 }, { 'name' : 'dinamic-value-by-iterable' , 'value' : [ 1 , 2 , 3 ] # same as 'values': [1, 2, 3] }, { 'name' : 'dinamic-value-by-function' , 'value' : fake_module . integers_from_1_to_10 }, # Parameter value randomization { 'name' : 'random-values-by-iterable' , 'values' : [ 'foo' , 'bar' , 'baz' ] }, { 'name' : 'random-values-by-function' , 'values' : fake_module . integers_from_1_to_10 }, { 'name' : 'random-values-by-function-path' , 'values' : 'fake_module::integers_from_1_to_10' }, { 'name' : 'random-value-by-faker-provider-function-path' , 'faker' : 'faker.providers.job::job' }, { 'name' : 'random-string' , # by default: random word 'type' : 'str' }, { 'name' : 'random-integer' , 'type' : 'int' , }, { 'name' : 'random-integer-in-range' , 'type' : int , # You can use Python types also 'min' : 2 , 'max' : 5 , }, { 'name' : 'random-float' , 'type' : 'number' , # You can use some type aliases also }, { 'name' : 'random-rounded-float-in-range' , 'type' : float , 'min' : 1.555 , 'max' : 2.555 , 'round' : 3 }, { 'name' : 'random-boolean' , 'type' : bool }, { 'name' : 'random-boolean-nullable' , 'type' : 'boolean' , 'null' : True }, { 'name' : 'random-type' , 'type' : 'random' # random type from availables }, { 'name' : 'random-unique-identifier' , 'type' : 'uuid' }, { 'name' : 'random-id' , # positive integer 'type' : 'id' }, # Parameter name randomization { 'name' : [ 'random-name-from-iterable' , 'random-name-by-iterable' ], 'type' : 'str' , }, { 'name' : fake_module . random_name_by_function , 'type' : 'random' , }, ] ) Output import requests req = requests . post ( 'https://github.com/mondeja/http-request-codegen' , json = { 'fixed-value' : 3 , 'dinamic-value-by-iterable' : '3' , 'dinamic-value-by-function' : '9' , 'random-values-by-iterable' : 'baz' , 'random-values-by-function' : '9' , 'random-values-by-function-path' : '9' , 'random-value-by-faker-provider-function-path' : 'Tax inspector' , 'random-string' : 'inside' , 'random-integer' : '19824' , 'random-integer-in-range' : '4' , 'random-float' : '15267.672192991231' , 'random-rounded-float-in-range' : '2.171' , 'random-boolean' : 'false' , 'random-boolean-nullable' : 'null' , 'random-type' : 'report' , 'random-unique-identifier' : 'bd63e28867bf4ce88f94fd0e56978faf' , 'random-id' : '42681' , 'random-name-by-iterable' : 'quality' , 'random-name-by-function' : 'least' }, headers = { 'Content-Type' : 'application/json' } ) text/plain Input from http_request_codegen import generate_http_request_code generate_http_request_code ( language = 'python' , impl = 'requests' , method = 'POST' , url = 'https://github.com/mondeja/http-request-codegen' , headers = { 'Content-Type' : 'text/plain' }, seed = 3549 , parameters = [ { 'name' : 'random-values-by-iterable' , 'values' : [ 'foo' , 'bar' , 'baz' ] } ] ) Output import requests req = requests . post ( 'https://github.com/mondeja/http-request-codegen' , data = 'baz' , headers = { 'Content-Type' : 'text/plain' } ) Bash curl GET Input import fake_module from http_request_codegen import generate_http_request_code generate_http_request_code ( language = 'bash' , impl = 'curl' , method = 'GET' , url = 'https://github.com/mondeja/http-request-codegen' , headers = { 'Content-Type' : 'application/json' , 'Accept-Language' : '*' }, seed = 3549 , parameters = [ { 'name' : 'fixed-value' , 'value' : 3 }, { 'name' : 'dinamic-value-by-iterable' , 'value' : [ 1 , 2 , 3 ] # same as 'values': [1, 2, 3] }, { 'name' : 'dinamic-value-by-function' , 'value' : fake_module . integers_from_1_to_10 }, # Parameter value randomization { 'name' : 'random-values-by-iterable' , 'values' : [ 'foo' , 'bar' , 'baz' ] }, { 'name' : 'random-values-by-function' , 'values' : fake_module . integers_from_1_to_10 }, { 'name' : 'random-values-by-function-path' , 'values' : 'fake_module::integers_from_1_to_10' }, { 'name' : 'random-value-by-faker-provider-function-path' , 'faker' : 'faker.providers.job::job' }, { 'name' : 'random-string' , # by default: random word 'type' : 'str' }, { 'name' : 'random-integer' , 'type' : 'int' , }, { 'name' : 'random-integer-in-range' , 'type' : int , # You can use Python types also 'min' : 2 , 'max' : 5 , }, { 'name' : 'random-float' , 'type' : 'number' , # You can use some type aliases also }, { 'name' : 'random-rounded-float-in-range' , 'type' : float , 'min' : 1.555 , 'max' : 2.555 , 'round' : 3 }, { 'name' : 'random-boolean' , 'type' : bool }, { 'name' : 'random-boolean-nullable' , 'type' : 'boolean' , 'null' : True }, { 'name' : 'random-type' , 'type' : 'random' # random type from availables }, { 'name' : 'random-unique-identifier' , 'type' : 'uuid' }, { 'name' : 'random-id' , # positive integer 'type' : 'id' }, # Parameter name randomization { 'name' : [ 'random-name-from-iterable' , 'random-name-by-iterable' ], 'type' : 'str' , }, { 'name' : fake_module . random_name_by_function , 'type' : 'random' , }, ] ) Pass extra options to 'curl' command in kwargs parameter. For example, to save the response in a file, pass kwargs={'-o': 'filename.ext'} : curl -o \"filename.ext\" Output curl \\ -d 'fixed-value=3&dinamic-value-by-iterable=3&dinamic-value-by-function=9&random-values-by-iterable=baz&random-values-by-function=9&random-values-by-function-path=9&random-value-by-faker-provider-function-path=Media+buyer&random-string=policy&random-integer=19824&random-integer-in-range=4&random-float=15267.672192991231&random-rounded-float-in-range=2.171&random-boolean=false&random-boolean-nullable=null&random-type=simply&random-unique-identifier=41eb16d52b184a71a256a0efe46365a7&random-id=42681&random-name-by-iterable=time&random-name-by-function=ago' \\ -H 'Content-Type: application/json' \\ -H 'Accept-Language: *' \\ https://github.com/mondeja/http-request-codegen POST application/x-www-form-urlencoded Input import fake_module from http_request_codegen import generate_http_request_code generate_http_request_code ( language = 'bash' , impl = 'curl' , method = 'POST' , url = 'https://github.com/mondeja/http-request-codegen' , headers = { 'Accept-Language' : '*' , 'Accept-Charset' : 'utf-8' }, seed = 3549 , parameters = [ { 'name' : 'fixed-value' , 'value' : 3 }, { 'name' : 'dinamic-value-by-iterable' , 'value' : [ 1 , 2 , 3 ] # same as 'values': [1, 2, 3] }, { 'name' : 'dinamic-value-by-function' , 'value' : fake_module . integers_from_1_to_10 }, # Parameter value randomization { 'name' : 'random-values-by-iterable' , 'values' : [ 'foo' , 'bar' , 'baz' ] }, { 'name' : 'random-values-by-function' , 'values' : fake_module . integers_from_1_to_10 }, { 'name' : 'random-values-by-function-path' , 'values' : 'fake_module::integers_from_1_to_10' }, { 'name' : 'random-value-by-faker-provider-function-path' , 'faker' : 'faker.providers.job::job' }, { 'name' : 'random-string' , # by default: random word 'type' : 'str' }, { 'name' : 'random-integer' , 'type' : 'int' , }, { 'name' : 'random-integer-in-range' , 'type' : int , # You can use Python types also 'min' : 2 , 'max' : 5 , }, { 'name' : 'random-float' , 'type' : 'number' , # You can use some type aliases also }, { 'name' : 'random-rounded-float-in-range' , 'type' : float , 'min' : 1.555 , 'max' : 2.555 , 'round' : 3 }, { 'name' : 'random-boolean' , 'type' : bool }, { 'name' : 'random-boolean-nullable' , 'type' : 'boolean' , 'null' : True }, { 'name' : 'random-type' , 'type' : 'random' # random type from availables }, { 'name' : 'random-unique-identifier' , 'type' : 'uuid' }, { 'name' : 'random-id' , # positive integer 'type' : 'id' }, # Parameter name randomization { 'name' : [ 'random-name-from-iterable' , 'random-name-by-iterable' ], 'type' : 'str' , }, { 'name' : fake_module . random_name_by_function , 'type' : 'random' , }, ] ) Output curl \\ -X 'POST' \\ -d 'fixed-value=3&dinamic-value-by-iterable=3&dinamic-value-by-function=9&random-values-by-iterable=baz&random-values-by-function=9&random-values-by-function-path=9&random-value-by-faker-provider-function-path=Surveyor%2C+building&random-string=various&random-integer=19824&random-integer-in-range=4&random-float=15267.672192991231&random-rounded-float-in-range=2.171&random-boolean=false&random-boolean-nullable=null&random-type=continue&random-unique-identifier=e2bbe15848d549ff818a60859333e584&random-id=42681&random-name-by-iterable=role&random-name-by-function=fund' \\ -H 'Accept-Language: *' \\ -H 'Accept-Charset: utf-8' \\ https://github.com/mondeja/http-request-codegen multipart/form-data Input from http_request_codegen import generate_http_request_code generate_http_request_code ( language = 'bash' , impl = 'curl' , method = 'POST' , url = 'https://github.com/mondeja/http-request-codegen' , headers = { 'Accept-Language' : '*' , 'Accept-Charset' : 'utf-8' }, seed = 3549 , files = { 'fixed-filepath' : '/tmp/foo.txt' , 'random-filepath' : None , 'fixed-filepath-content-type' : ( '/tmp/bar.csv' , 'text/csv' ), 'fixed-filepath-ct-header' : ( '/tmp/bar.json' , 'application/json' , { 'Accept-Charset' : 'utf-8' } ), 'random-filepath-content-type' : ( None , 'text/plain' ), 'random-filepath-ct-header' : ( None , 'text/csv' , { 'Accept-Charset' : 'utf-8' } ) } ) Output curl \\ -X 'POST' \\ -F 'fixed-filepath=@/tmp/foo.txt' \\ -F 'random-filepath=@/teacher/as.gif' \\ -F 'fixed-filepath-content-type=@/tmp/bar.csv' \\ -F 'fixed-filepath-ct-header=@/tmp/bar.json' \\ -F 'random-filepath-content-type=@/which/church.css' \\ -F 'random-filepath-ct-header=@/final/response.csv' \\ -H 'Accept-Language: *' \\ -H 'Accept-Charset: utf-8' \\ https://github.com/mondeja/http-request-codegen application/json Input import fake_module from http_request_codegen import generate_http_request_code generate_http_request_code ( language = 'bash' , impl = 'curl' , method = 'POST' , url = 'https://github.com/mondeja/http-request-codegen' , headers = { 'Content-Type' : 'application/json' }, seed = 3549 , parameters = [ { 'name' : 'fixed-value' , 'value' : 3 }, { 'name' : 'dinamic-value-by-iterable' , 'value' : [ 1 , 2 , 3 ] # same as 'values': [1, 2, 3] }, { 'name' : 'dinamic-value-by-function' , 'value' : fake_module . integers_from_1_to_10 }, # Parameter value randomization { 'name' : 'random-values-by-iterable' , 'values' : [ 'foo' , 'bar' , 'baz' ] }, { 'name' : 'random-values-by-function' , 'values' : fake_module . integers_from_1_to_10 }, { 'name' : 'random-values-by-function-path' , 'values' : 'fake_module::integers_from_1_to_10' }, { 'name' : 'random-value-by-faker-provider-function-path' , 'faker' : 'faker.providers.job::job' }, { 'name' : 'random-string' , # by default: random word 'type' : 'str' }, { 'name' : 'random-integer' , 'type' : 'int' , }, { 'name' : 'random-integer-in-range' , 'type' : int , # You can use Python types also 'min' : 2 , 'max' : 5 , }, { 'name' : 'random-float' , 'type' : 'number' , # You can use some type aliases also }, { 'name' : 'random-rounded-float-in-range' , 'type' : float , 'min' : 1.555 , 'max' : 2.555 , 'round' : 3 }, { 'name' : 'random-boolean' , 'type' : bool }, { 'name' : 'random-boolean-nullable' , 'type' : 'boolean' , 'null' : True }, { 'name' : 'random-type' , 'type' : 'random' # random type from availables }, { 'name' : 'random-unique-identifier' , 'type' : 'uuid' }, { 'name' : 'random-id' , # positive integer 'type' : 'id' }, # Parameter name randomization { 'name' : [ 'random-name-from-iterable' , 'random-name-by-iterable' ], 'type' : 'str' , }, { 'name' : fake_module . random_name_by_function , 'type' : 'random' , }, ] ) Output curl \\ -X 'POST' \\ -d 'fixed-value=3&dinamic-value-by-iterable=3&dinamic-value-by-function=9&random-values-by-iterable=baz&random-values-by-function=9&random-values-by-function-path=9&random-value-by-faker-provider-function-path=Comptroller&random-string=nature&random-integer=19824&random-integer-in-range=4&random-float=15267.672192991231&random-rounded-float-in-range=2.171&random-boolean=false&random-boolean-nullable=null&random-type=general&random-unique-identifier=002cab7390c84a179bd802fe044cbeb6&random-id=42681&random-name-by-iterable=sea&random-name-by-function=only' \\ -H 'Content-Type: application/json' \\ https://github.com/mondeja/http-request-codegen text/plain Input from http_request_codegen import generate_http_request_code generate_http_request_code ( language = 'bash' , impl = 'curl' , method = 'POST' , url = 'https://github.com/mondeja/http-request-codegen' , headers = { 'Content-Type' : 'text/plain' }, seed = 3549 , parameters = [ { 'name' : 'random-values-by-iterable' , 'values' : [ 'foo' , 'bar' , 'baz' ] } ] ) Output curl \\ -X 'POST' \\ -d 'random-values-by-iterable=baz' \\ -H 'Content-Type: text/plain' \\ https://github.com/mondeja/http-request-codegen Javascript fetch GET Input import fake_module from http_request_codegen import generate_http_request_code generate_http_request_code ( language = 'javascript' , impl = 'fetch' , method = 'GET' , url = 'https://github.com/mondeja/http-request-codegen' , headers = { 'Content-Type' : 'application/json' , 'Accept-Language' : '*' }, seed = 3549 , parameters = [ { 'name' : 'fixed-value' , 'value' : 3 }, { 'name' : 'dinamic-value-by-iterable' , 'value' : [ 1 , 2 , 3 ] # same as 'values': [1, 2, 3] }, { 'name' : 'dinamic-value-by-function' , 'value' : fake_module . integers_from_1_to_10 }, # Parameter value randomization { 'name' : 'random-values-by-iterable' , 'values' : [ 'foo' , 'bar' , 'baz' ] }, { 'name' : 'random-values-by-function' , 'values' : fake_module . integers_from_1_to_10 }, { 'name' : 'random-values-by-function-path' , 'values' : 'fake_module::integers_from_1_to_10' }, { 'name' : 'random-value-by-faker-provider-function-path' , 'faker' : 'faker.providers.job::job' }, { 'name' : 'random-string' , # by default: random word 'type' : 'str' }, { 'name' : 'random-integer' , 'type' : 'int' , }, { 'name' : 'random-integer-in-range' , 'type' : int , # You can use Python types also 'min' : 2 , 'max' : 5 , }, { 'name' : 'random-float' , 'type' : 'number' , # You can use some type aliases also }, { 'name' : 'random-rounded-float-in-range' , 'type' : float , 'min' : 1.555 , 'max' : 2.555 , 'round' : 3 }, { 'name' : 'random-boolean' , 'type' : bool }, { 'name' : 'random-boolean-nullable' , 'type' : 'boolean' , 'null' : True }, { 'name' : 'random-type' , 'type' : 'random' # random type from availables }, { 'name' : 'random-unique-identifier' , 'type' : 'uuid' }, { 'name' : 'random-id' , # positive integer 'type' : 'id' }, # Parameter name randomization { 'name' : [ 'random-name-from-iterable' , 'random-name-by-iterable' ], 'type' : 'str' , }, { 'name' : fake_module . random_name_by_function , 'type' : 'random' , }, ] ) This implementation will emulate browsers' fetch API by default. using Promises-like response processing. If you want to simulate a NodeJS environment, pass the parameter setup as True and the next initialization snippet will be prepended to the generated code: const fetch = require ( 'node-fetch' ); For ESM imports emulation, use setup='import fetch from \\'node-fetch\\';\\n\\n' , thus the initialization snippet will be: import fetch from 'node-fetch' ; Of course, you can customize this initialization for other environments. For example, polyfill the API using whatwg as ESM module with setup='import \\'whatwg-fetch\\';\\n\\n' : import 'whatwg-fetch' ; Output fetch ( 'https://github.com/mondeja/http-request-codegen?fixed-value=3&dinamic-value' + '-by-iterable=3&dinamic-value-by-function=9&random-values-by-iterable=baz&' + 'random-values-by-function=9&random-values-by-function-path=9&random-value' + '-by-faker-provider-function-path=Commissioning+editor&random-string=seek&' + 'random-integer=19824&random-integer-in-range=4&random-float=15267.6721929' + '91231&random-rounded-float-in-range=2.171&random-boolean=false&random-boo' + 'lean-nullable=null&random-type=author&random-unique-identifier=693f10b184' + 'af451da6d4175ab730b1f2&random-id=42681&random-name-by-iterable=teach&rand' + 'om-name-by-function=north' , { headers : { 'Content-Type' : 'application/json' , 'Accept-Language' : '*' } } ). then ( function ( response ) { console . log ( response ); }). catch ( function ( err ) { console . error ( 'Error:' , err ); }); POST application/x-www-form-urlencoded Input import fake_module from http_request_codegen import generate_http_request_code generate_http_request_code ( language = 'javascript' , impl = 'fetch' , method = 'POST' , url = 'https://github.com/mondeja/http-request-codegen' , headers = { 'Accept-Language' : '*' , 'Accept-Charset' : 'utf-8' }, seed = 3549 , parameters = [ { 'name' : 'fixed-value' , 'value' : 3 }, { 'name' : 'dinamic-value-by-iterable' , 'value' : [ 1 , 2 , 3 ] # same as 'values': [1, 2, 3] }, { 'name' : 'dinamic-value-by-function' , 'value' : fake_module . integers_from_1_to_10 }, # Parameter value randomization { 'name' : 'random-values-by-iterable' , 'values' : [ 'foo' , 'bar' , 'baz' ] }, { 'name' : 'random-values-by-function' , 'values' : fake_module . integers_from_1_to_10 }, { 'name' : 'random-values-by-function-path' , 'values' : 'fake_module::integers_from_1_to_10' }, { 'name' : 'random-value-by-faker-provider-function-path' , 'faker' : 'faker.providers.job::job' }, { 'name' : 'random-string' , # by default: random word 'type' : 'str' }, { 'name' : 'random-integer' , 'type' : 'int' , }, { 'name' : 'random-integer-in-range' , 'type' : int , # You can use Python types also 'min' : 2 , 'max' : 5 , }, { 'name' : 'random-float' , 'type' : 'number' , # You can use some type aliases also }, { 'name' : 'random-rounded-float-in-range' , 'type' : float , 'min' : 1.555 , 'max' : 2.555 , 'round' : 3 }, { 'name' : 'random-boolean' , 'type' : bool }, { 'name' : 'random-boolean-nullable' , 'type' : 'boolean' , 'null' : True }, { 'name' : 'random-type' , 'type' : 'random' # random type from availables }, { 'name' : 'random-unique-identifier' , 'type' : 'uuid' }, { 'name' : 'random-id' , # positive integer 'type' : 'id' }, # Parameter name randomization { 'name' : [ 'random-name-from-iterable' , 'random-name-by-iterable' ], 'type' : 'str' , }, { 'name' : fake_module . random_name_by_function , 'type' : 'random' , }, ] ) Output const fetch = require ( 'node-fetch' ); fetch ( 'https://github.com/mondeja/http-request-codegen' , { method : 'POST' , body : new URLSearchParams ({ 'fixed-value' : '3' , 'dinamic-value-by-iterable' : '3' , 'dinamic-value-by-function' : '9' , 'random-values-by-iterable' : 'baz' , 'random-values-by-function' : '9' , 'random-values-by-function-path' : '9' , 'random-value-by-faker-provider-function-path' : 'Lecturer, higher educat' + 'ion' , 'random-string' : 'whatever' , 'random-integer' : '19824' , 'random-integer-in-range' : '4' , 'random-float' : '15267.672192991231' , 'random-rounded-float-in-range' : '2.171' , 'random-boolean' : 'false' , 'random-boolean-nullable' : 'null' , 'random-type' : 'close' , 'random-unique-identifier' : '25f131366a4244bd9f095e2645d12ed3' , 'random-id' : '42681' , 'random-name-by-iterable' : 'affect' , 'random-name-by-function' : 'employee' }), headers : { 'Accept-Language' : '*' , 'Accept-Charset' : 'utf-8' } } ). then ( function ( response ) { console . log ( response ); }). catch ( function ( err ) { console . error ( 'Error:' , err ); }); multipart/form-data Input from http_request_codegen import generate_http_request_code generate_http_request_code ( language = 'javascript' , impl = 'fetch' , method = 'POST' , url = 'https://github.com/mondeja/http-request-codegen' , headers = { 'Accept-Language' : '*' , 'Accept-Charset' : 'utf-8' }, seed = 3549 , files = { 'fixed-filepath' : '/tmp/foo.txt' , 'random-filepath' : None , 'fixed-filepath-content-type' : ( '/tmp/bar.csv' , 'text/csv' ), 'fixed-filepath-ct-header' : ( '/tmp/bar.json' , 'application/json' , { 'Accept-Charset' : 'utf-8' } ), 'random-filepath-content-type' : ( None , 'text/plain' ), 'random-filepath-ct-header' : ( None , 'text/csv' , { 'Accept-Charset' : 'utf-8' } ) } ) Output const fs = require ( 'fs' ); const fetch = require ( 'node-fetch' ); const FormData = require ( 'form-data' ); const formData = new FormData (); formData . append ( 'fixed-filepath' , fs . createReadStream ( '/tmp/foo.txt' ), { filename : 'foo.txt' } ); formData . append ( 'random-filepath' , fs . createReadStream ( '/plan/design.gif' ), { filename : 'design.gif' } ); formData . append ( 'fixed-filepath-content-type' , fs . createReadStream ( '/tmp/bar.csv' ), { filename : 'bar.csv' , contentType : 'text/csv' } ); formData . append ( 'fixed-filepath-ct-header' , fs . createReadStream ( '/tmp/bar.json' ), { filename : 'bar.json' , contentType : 'application/json' } ); formData . append ( 'random-filepath-content-type' , fs . createReadStream ( '/large/discussion.bmp' ), { filename : 'discussion.bmp' , contentType : 'text/plain' } ); formData . append ( 'random-filepath-ct-header' , fs . createReadStream ( '/live/doctor.flac' ), { filename : 'doctor.flac' , contentType : 'text/csv' } ); fetch ( 'https://github.com/mondeja/http-request-codegen' , { method : 'POST' , body : formData , headers : { 'Accept-Language' : '*' , 'Accept-Charset' : 'utf-8' } } ). then ( function ( response ) { console . log ( response ); }). catch ( function ( err ) { console . error ( 'Error:' , err ); }); application/json Input import fake_module from http_request_codegen import generate_http_request_code generate_http_request_code ( language = 'javascript' , impl = 'fetch' , method = 'POST' , url = 'https://github.com/mondeja/http-request-codegen' , headers = { 'Content-Type' : 'application/json' }, seed = 3549 , parameters = [ { 'name' : 'fixed-value' , 'value' : 3 }, { 'name' : 'dinamic-value-by-iterable' , 'value' : [ 1 , 2 , 3 ] # same as 'values': [1, 2, 3] }, { 'name' : 'dinamic-value-by-function' , 'value' : fake_module . integers_from_1_to_10 }, # Parameter value randomization { 'name' : 'random-values-by-iterable' , 'values' : [ 'foo' , 'bar' , 'baz' ] }, { 'name' : 'random-values-by-function' , 'values' : fake_module . integers_from_1_to_10 }, { 'name' : 'random-values-by-function-path' , 'values' : 'fake_module::integers_from_1_to_10' }, { 'name' : 'random-value-by-faker-provider-function-path' , 'faker' : 'faker.providers.job::job' }, { 'name' : 'random-string' , # by default: random word 'type' : 'str' }, { 'name' : 'random-integer' , 'type' : 'int' , }, { 'name' : 'random-integer-in-range' , 'type' : int , # You can use Python types also 'min' : 2 , 'max' : 5 , }, { 'name' : 'random-float' , 'type' : 'number' , # You can use some type aliases also }, { 'name' : 'random-rounded-float-in-range' , 'type' : float , 'min' : 1.555 , 'max' : 2.555 , 'round' : 3 }, { 'name' : 'random-boolean' , 'type' : bool }, { 'name' : 'random-boolean-nullable' , 'type' : 'boolean' , 'null' : True }, { 'name' : 'random-type' , 'type' : 'random' # random type from availables }, { 'name' : 'random-unique-identifier' , 'type' : 'uuid' }, { 'name' : 'random-id' , # positive integer 'type' : 'id' }, # Parameter name randomization { 'name' : [ 'random-name-from-iterable' , 'random-name-by-iterable' ], 'type' : 'str' , }, { 'name' : fake_module . random_name_by_function , 'type' : 'random' , }, ] ) Output const fetch = require ( 'node-fetch' ); fetch ( 'https://github.com/mondeja/http-request-codegen' , { method : 'POST' , body : JSON . stringify ({ 'fixed-value' : '3' , 'dinamic-value-by-iterable' : '3' , 'dinamic-value-by-function' : '9' , 'random-values-by-iterable' : 'baz' , 'random-values-by-function' : '9' , 'random-values-by-function-path' : '9' , 'random-value-by-faker-provider-function-path' : 'Press sub' , 'random-string' : 'consumer' , 'random-integer' : '19824' , 'random-integer-in-range' : '4' , 'random-float' : '15267.672192991231' , 'random-rounded-float-in-range' : '2.171' , 'random-boolean' : 'false' , 'random-boolean-nullable' : 'null' , 'random-type' : 'example' , 'random-unique-identifier' : 'e50eadc2b048489f97feb9c3ddd216b8' , 'random-id' : '42681' , 'random-name-by-iterable' : 'speak' , 'random-name-by-function' : 'officer' }), headers : { 'Content-Type' : 'application/json' } } ). then ( function ( response ) { console . log ( response ); }). catch ( function ( err ) { console . error ( 'Error:' , err ); }); text/plain Input from http_request_codegen import generate_http_request_code generate_http_request_code ( language = 'javascript' , impl = 'fetch' , method = 'POST' , url = 'https://github.com/mondeja/http-request-codegen' , headers = { 'Content-Type' : 'text/plain' }, seed = 3549 , parameters = [ { 'name' : 'random-values-by-iterable' , 'values' : [ 'foo' , 'bar' , 'baz' ] } ] ) Output const fetch = require ( 'node-fetch' ); fetch ( 'https://github.com/mondeja/http-request-codegen' , { method : 'POST' , body : 'baz' , headers : { 'Content-Type' : 'text/plain' } } ). then ( function ( response ) { console . log ( response ); }). catch ( function ( err ) { console . error ( 'Error:' , err ); }); Support \u00b6 Python requests GET POST Headers \u2705 \u2705 Parameters \u2705 \u2705 Parameters localization \u2705 \u2705 Parameters seed \u2705 \u2705 Custom indentation \u2705 \u2705 Quotation character \u2705 \u2705 One line rendering \u2705 \u2705 Custom initialization \u2705 \u2705 Custom teardown \u2705 \u2705 Line wrapping \u2705 \u2705 Bash curl GET POST Headers \u2705 \u2705 Parameters \u2705 \u2705 Parameters localization \u2705 \u2705 Parameters seed \u2705 \u2705 Custom indentation \u2705 \u2705 Quotation character \u2705 \u2705 One line rendering \u2705 \u2705 Custom initialization \u2705 \u2705 Custom teardown \u2705 \u2705 Line wrapping \u2705 \u2705 Javascript fetch GET POST Headers \u2705 \u2705 Parameters \u2705 \u2705 Parameters localization \u2705 \u2705 Parameters seed \u2705 \u2705 Custom indentation \u2705 \u2705 Quotation character \u2705 \u2705 One line rendering \u2705 \u2705 Custom initialization \u2705 \u2705 Custom teardown \u2705 \u2705 Line wrapping \u2705 \u2705","title":"Introduction"},{"location":"#installation","text":"pip pip install http-request-codegen pipenv pipenv install http-request-codegen source git clone https://github.com/mondeja/http-request-codegen.git --depth = 1 cd http-request-codegen python setup.py install development git clone https://github.com/mondeja/http-request-codegen.git cd http-request-codegen pip install -e . [ dev ]","title":"Installation"},{"location":"#demo","text":"Python requests GET Input import fake_module from http_request_codegen import generate_http_request_code generate_http_request_code ( language = 'python' , impl = 'requests' , method = 'GET' , url = 'https://github.com/mondeja/http-request-codegen' , headers = { 'Content-Type' : 'application/json' , 'Accept-Language' : '*' }, seed = 3549 , parameters = [ { 'name' : 'fixed-value' , 'value' : 3 }, { 'name' : 'dinamic-value-by-iterable' , 'value' : [ 1 , 2 , 3 ] # same as 'values': [1, 2, 3] }, { 'name' : 'dinamic-value-by-function' , 'value' : fake_module . integers_from_1_to_10 }, # Parameter value randomization { 'name' : 'random-values-by-iterable' , 'values' : [ 'foo' , 'bar' , 'baz' ] }, { 'name' : 'random-values-by-function' , 'values' : fake_module . integers_from_1_to_10 }, { 'name' : 'random-values-by-function-path' , 'values' : 'fake_module::integers_from_1_to_10' }, { 'name' : 'random-value-by-faker-provider-function-path' , 'faker' : 'faker.providers.job::job' }, { 'name' : 'random-string' , # by default: random word 'type' : 'str' }, { 'name' : 'random-integer' , 'type' : 'int' , }, { 'name' : 'random-integer-in-range' , 'type' : int , # You can use Python types also 'min' : 2 , 'max' : 5 , }, { 'name' : 'random-float' , 'type' : 'number' , # You can use some type aliases also }, { 'name' : 'random-rounded-float-in-range' , 'type' : float , 'min' : 1.555 , 'max' : 2.555 , 'round' : 3 }, { 'name' : 'random-boolean' , 'type' : bool }, { 'name' : 'random-boolean-nullable' , 'type' : 'boolean' , 'null' : True }, { 'name' : 'random-type' , 'type' : 'random' # random type from availables }, { 'name' : 'random-unique-identifier' , 'type' : 'uuid' }, { 'name' : 'random-id' , # positive integer 'type' : 'id' }, # Parameter name randomization { 'name' : [ 'random-name-from-iterable' , 'random-name-by-iterable' ], 'type' : 'str' , }, { 'name' : fake_module . random_name_by_function , 'type' : 'random' , }, ] ) Parameters are passed using requests.get function params parameter, not by appending ?foo=bar&... to the URL. If you want this behaviour, build the passed URL using lazy_name_by_parameter and lazy_value_by_parameter functions instead of use the parameters argument. If you want to import more modules in the initialization snippet, keep in mind that you must provide import requests line also in the setup argument. For example, setup='import requests\\nimport foo\\n\\n' will render as: import requests import foo requests . get ( '<url>' ... Output import requests req = requests . get ( 'https://github.com/mondeja/http-request-codegen' , params = { 'fixed-value' : '3' , 'dinamic-value-by-iterable' : '3' , 'dinamic-value-by-function' : '9' , 'random-values-by-iterable' : 'baz' , 'random-values-by-function' : '9' , 'random-values-by-function-path' : '9' , 'random-value-by-faker-provider-function-path' : 'Warehouse manager' , 'random-string' : 'gas' , 'random-integer' : '19824' , 'random-integer-in-range' : '4' , 'random-float' : '15267.672192991231' , 'random-rounded-float-in-range' : '2.171' , 'random-boolean' : 'false' , 'random-boolean-nullable' : 'null' , 'random-type' : 'raise' , 'random-unique-identifier' : '32604605e4aa4fbeb71026b1df3c4087' , 'random-id' : '42681' , 'random-name-by-iterable' : 'tax' , 'random-name-by-function' : 'big' }, headers = { 'Content-Type' : 'application/json' , 'Accept-Language' : '*' } ) POST application/x-www-form-urlencoded Input import fake_module from http_request_codegen import generate_http_request_code generate_http_request_code ( language = 'python' , impl = 'requests' , method = 'POST' , url = 'https://github.com/mondeja/http-request-codegen' , headers = { 'Accept-Language' : '*' , 'Accept-Charset' : 'utf-8' }, seed = 3549 , parameters = [ { 'name' : 'fixed-value' , 'value' : 3 }, { 'name' : 'dinamic-value-by-iterable' , 'value' : [ 1 , 2 , 3 ] # same as 'values': [1, 2, 3] }, { 'name' : 'dinamic-value-by-function' , 'value' : fake_module . integers_from_1_to_10 }, # Parameter value randomization { 'name' : 'random-values-by-iterable' , 'values' : [ 'foo' , 'bar' , 'baz' ] }, { 'name' : 'random-values-by-function' , 'values' : fake_module . integers_from_1_to_10 }, { 'name' : 'random-values-by-function-path' , 'values' : 'fake_module::integers_from_1_to_10' }, { 'name' : 'random-value-by-faker-provider-function-path' , 'faker' : 'faker.providers.job::job' }, { 'name' : 'random-string' , # by default: random word 'type' : 'str' }, { 'name' : 'random-integer' , 'type' : 'int' , }, { 'name' : 'random-integer-in-range' , 'type' : int , # You can use Python types also 'min' : 2 , 'max' : 5 , }, { 'name' : 'random-float' , 'type' : 'number' , # You can use some type aliases also }, { 'name' : 'random-rounded-float-in-range' , 'type' : float , 'min' : 1.555 , 'max' : 2.555 , 'round' : 3 }, { 'name' : 'random-boolean' , 'type' : bool }, { 'name' : 'random-boolean-nullable' , 'type' : 'boolean' , 'null' : True }, { 'name' : 'random-type' , 'type' : 'random' # random type from availables }, { 'name' : 'random-unique-identifier' , 'type' : 'uuid' }, { 'name' : 'random-id' , # positive integer 'type' : 'id' }, # Parameter name randomization { 'name' : [ 'random-name-from-iterable' , 'random-name-by-iterable' ], 'type' : 'str' , }, { 'name' : fake_module . random_name_by_function , 'type' : 'random' , }, ] ) Output import requests req = requests . post ( 'https://github.com/mondeja/http-request-codegen' , data = { 'fixed-value' : '3' , 'dinamic-value-by-iterable' : '3' , 'dinamic-value-by-function' : '9' , 'random-values-by-iterable' : 'baz' , 'random-values-by-function' : '9' , 'random-values-by-function-path' : '9' , 'random-value-by-faker-provider-function-path' : 'Animal technologist' , 'random-string' : 'test' , 'random-integer' : '19824' , 'random-integer-in-range' : '4' , 'random-float' : '15267.672192991231' , 'random-rounded-float-in-range' : '2.171' , 'random-boolean' : 'false' , 'random-boolean-nullable' : 'null' , 'random-type' : 'focus' , 'random-unique-identifier' : '4f7d5765147249bfaf4faf0a96f83160' , 'random-id' : '42681' , 'random-name-by-iterable' : 'suffer' , 'random-name-by-function' : 'carry' }, headers = { 'Accept-Language' : '*' , 'Accept-Charset' : 'utf-8' } ) multipart/form-data Input from http_request_codegen import generate_http_request_code generate_http_request_code ( language = 'python' , impl = 'requests' , method = 'POST' , url = 'https://github.com/mondeja/http-request-codegen' , headers = { 'Accept-Language' : '*' , 'Accept-Charset' : 'utf-8' }, seed = 3549 , files = { 'fixed-filepath' : '/tmp/foo.txt' , 'random-filepath' : None , 'fixed-filepath-content-type' : ( '/tmp/bar.csv' , 'text/csv' ), 'fixed-filepath-ct-header' : ( '/tmp/bar.json' , 'application/json' , { 'Accept-Charset' : 'utf-8' } ), 'random-filepath-content-type' : ( None , 'text/plain' ), 'random-filepath-ct-header' : ( None , 'text/csv' , { 'Accept-Charset' : 'utf-8' } ) } ) Output import requests req = requests . post ( 'https://github.com/mondeja/http-request-codegen' , files = { 'fixed-filepath' : ( '/tmp/foo.txt' , open ( '/tmp/foo.txt' , 'rb' ) ), 'random-filepath' : ( '/top/quickly.odp' , open ( '/top/quickly.odp' , 'rb' ) ), 'fixed-filepath-content-type' : ( '/tmp/bar.csv' , open ( '/tmp/bar.csv' , 'rb' ), 'text/csv' ), 'fixed-filepath-ct-header' : ( '/tmp/bar.json' , open ( '/tmp/bar.json' , 'rb' ), 'application/json' , { 'Accept-Charset' : 'utf-8' } ), 'random-filepath-content-type' : ( '/land/maintain.bmp' , open ( '/land/maintain.bmp' , 'rb' ), 'text/plain' ), 'random-filepath-ct-header' : ( '/every/gas.flac' , open ( '/every/gas.flac' , 'rb' ), 'text/csv' , { 'Accept-Charset' : 'utf-8' } ) }, headers = { 'Accept-Language' : '*' , 'Accept-Charset' : 'utf-8' } ) application/json Input import fake_module from http_request_codegen import generate_http_request_code generate_http_request_code ( language = 'python' , impl = 'requests' , method = 'POST' , url = 'https://github.com/mondeja/http-request-codegen' , headers = { 'Content-Type' : 'application/json' }, seed = 3549 , parameters = [ { 'name' : 'fixed-value' , 'value' : 3 }, { 'name' : 'dinamic-value-by-iterable' , 'value' : [ 1 , 2 , 3 ] # same as 'values': [1, 2, 3] }, { 'name' : 'dinamic-value-by-function' , 'value' : fake_module . integers_from_1_to_10 }, # Parameter value randomization { 'name' : 'random-values-by-iterable' , 'values' : [ 'foo' , 'bar' , 'baz' ] }, { 'name' : 'random-values-by-function' , 'values' : fake_module . integers_from_1_to_10 }, { 'name' : 'random-values-by-function-path' , 'values' : 'fake_module::integers_from_1_to_10' }, { 'name' : 'random-value-by-faker-provider-function-path' , 'faker' : 'faker.providers.job::job' }, { 'name' : 'random-string' , # by default: random word 'type' : 'str' }, { 'name' : 'random-integer' , 'type' : 'int' , }, { 'name' : 'random-integer-in-range' , 'type' : int , # You can use Python types also 'min' : 2 , 'max' : 5 , }, { 'name' : 'random-float' , 'type' : 'number' , # You can use some type aliases also }, { 'name' : 'random-rounded-float-in-range' , 'type' : float , 'min' : 1.555 , 'max' : 2.555 , 'round' : 3 }, { 'name' : 'random-boolean' , 'type' : bool }, { 'name' : 'random-boolean-nullable' , 'type' : 'boolean' , 'null' : True }, { 'name' : 'random-type' , 'type' : 'random' # random type from availables }, { 'name' : 'random-unique-identifier' , 'type' : 'uuid' }, { 'name' : 'random-id' , # positive integer 'type' : 'id' }, # Parameter name randomization { 'name' : [ 'random-name-from-iterable' , 'random-name-by-iterable' ], 'type' : 'str' , }, { 'name' : fake_module . random_name_by_function , 'type' : 'random' , }, ] ) Output import requests req = requests . post ( 'https://github.com/mondeja/http-request-codegen' , json = { 'fixed-value' : 3 , 'dinamic-value-by-iterable' : '3' , 'dinamic-value-by-function' : '9' , 'random-values-by-iterable' : 'baz' , 'random-values-by-function' : '9' , 'random-values-by-function-path' : '9' , 'random-value-by-faker-provider-function-path' : 'Tax inspector' , 'random-string' : 'inside' , 'random-integer' : '19824' , 'random-integer-in-range' : '4' , 'random-float' : '15267.672192991231' , 'random-rounded-float-in-range' : '2.171' , 'random-boolean' : 'false' , 'random-boolean-nullable' : 'null' , 'random-type' : 'report' , 'random-unique-identifier' : 'bd63e28867bf4ce88f94fd0e56978faf' , 'random-id' : '42681' , 'random-name-by-iterable' : 'quality' , 'random-name-by-function' : 'least' }, headers = { 'Content-Type' : 'application/json' } ) text/plain Input from http_request_codegen import generate_http_request_code generate_http_request_code ( language = 'python' , impl = 'requests' , method = 'POST' , url = 'https://github.com/mondeja/http-request-codegen' , headers = { 'Content-Type' : 'text/plain' }, seed = 3549 , parameters = [ { 'name' : 'random-values-by-iterable' , 'values' : [ 'foo' , 'bar' , 'baz' ] } ] ) Output import requests req = requests . post ( 'https://github.com/mondeja/http-request-codegen' , data = 'baz' , headers = { 'Content-Type' : 'text/plain' } ) Bash curl GET Input import fake_module from http_request_codegen import generate_http_request_code generate_http_request_code ( language = 'bash' , impl = 'curl' , method = 'GET' , url = 'https://github.com/mondeja/http-request-codegen' , headers = { 'Content-Type' : 'application/json' , 'Accept-Language' : '*' }, seed = 3549 , parameters = [ { 'name' : 'fixed-value' , 'value' : 3 }, { 'name' : 'dinamic-value-by-iterable' , 'value' : [ 1 , 2 , 3 ] # same as 'values': [1, 2, 3] }, { 'name' : 'dinamic-value-by-function' , 'value' : fake_module . integers_from_1_to_10 }, # Parameter value randomization { 'name' : 'random-values-by-iterable' , 'values' : [ 'foo' , 'bar' , 'baz' ] }, { 'name' : 'random-values-by-function' , 'values' : fake_module . integers_from_1_to_10 }, { 'name' : 'random-values-by-function-path' , 'values' : 'fake_module::integers_from_1_to_10' }, { 'name' : 'random-value-by-faker-provider-function-path' , 'faker' : 'faker.providers.job::job' }, { 'name' : 'random-string' , # by default: random word 'type' : 'str' }, { 'name' : 'random-integer' , 'type' : 'int' , }, { 'name' : 'random-integer-in-range' , 'type' : int , # You can use Python types also 'min' : 2 , 'max' : 5 , }, { 'name' : 'random-float' , 'type' : 'number' , # You can use some type aliases also }, { 'name' : 'random-rounded-float-in-range' , 'type' : float , 'min' : 1.555 , 'max' : 2.555 , 'round' : 3 }, { 'name' : 'random-boolean' , 'type' : bool }, { 'name' : 'random-boolean-nullable' , 'type' : 'boolean' , 'null' : True }, { 'name' : 'random-type' , 'type' : 'random' # random type from availables }, { 'name' : 'random-unique-identifier' , 'type' : 'uuid' }, { 'name' : 'random-id' , # positive integer 'type' : 'id' }, # Parameter name randomization { 'name' : [ 'random-name-from-iterable' , 'random-name-by-iterable' ], 'type' : 'str' , }, { 'name' : fake_module . random_name_by_function , 'type' : 'random' , }, ] ) Pass extra options to 'curl' command in kwargs parameter. For example, to save the response in a file, pass kwargs={'-o': 'filename.ext'} : curl -o \"filename.ext\" Output curl \\ -d 'fixed-value=3&dinamic-value-by-iterable=3&dinamic-value-by-function=9&random-values-by-iterable=baz&random-values-by-function=9&random-values-by-function-path=9&random-value-by-faker-provider-function-path=Media+buyer&random-string=policy&random-integer=19824&random-integer-in-range=4&random-float=15267.672192991231&random-rounded-float-in-range=2.171&random-boolean=false&random-boolean-nullable=null&random-type=simply&random-unique-identifier=41eb16d52b184a71a256a0efe46365a7&random-id=42681&random-name-by-iterable=time&random-name-by-function=ago' \\ -H 'Content-Type: application/json' \\ -H 'Accept-Language: *' \\ https://github.com/mondeja/http-request-codegen POST application/x-www-form-urlencoded Input import fake_module from http_request_codegen import generate_http_request_code generate_http_request_code ( language = 'bash' , impl = 'curl' , method = 'POST' , url = 'https://github.com/mondeja/http-request-codegen' , headers = { 'Accept-Language' : '*' , 'Accept-Charset' : 'utf-8' }, seed = 3549 , parameters = [ { 'name' : 'fixed-value' , 'value' : 3 }, { 'name' : 'dinamic-value-by-iterable' , 'value' : [ 1 , 2 , 3 ] # same as 'values': [1, 2, 3] }, { 'name' : 'dinamic-value-by-function' , 'value' : fake_module . integers_from_1_to_10 }, # Parameter value randomization { 'name' : 'random-values-by-iterable' , 'values' : [ 'foo' , 'bar' , 'baz' ] }, { 'name' : 'random-values-by-function' , 'values' : fake_module . integers_from_1_to_10 }, { 'name' : 'random-values-by-function-path' , 'values' : 'fake_module::integers_from_1_to_10' }, { 'name' : 'random-value-by-faker-provider-function-path' , 'faker' : 'faker.providers.job::job' }, { 'name' : 'random-string' , # by default: random word 'type' : 'str' }, { 'name' : 'random-integer' , 'type' : 'int' , }, { 'name' : 'random-integer-in-range' , 'type' : int , # You can use Python types also 'min' : 2 , 'max' : 5 , }, { 'name' : 'random-float' , 'type' : 'number' , # You can use some type aliases also }, { 'name' : 'random-rounded-float-in-range' , 'type' : float , 'min' : 1.555 , 'max' : 2.555 , 'round' : 3 }, { 'name' : 'random-boolean' , 'type' : bool }, { 'name' : 'random-boolean-nullable' , 'type' : 'boolean' , 'null' : True }, { 'name' : 'random-type' , 'type' : 'random' # random type from availables }, { 'name' : 'random-unique-identifier' , 'type' : 'uuid' }, { 'name' : 'random-id' , # positive integer 'type' : 'id' }, # Parameter name randomization { 'name' : [ 'random-name-from-iterable' , 'random-name-by-iterable' ], 'type' : 'str' , }, { 'name' : fake_module . random_name_by_function , 'type' : 'random' , }, ] ) Output curl \\ -X 'POST' \\ -d 'fixed-value=3&dinamic-value-by-iterable=3&dinamic-value-by-function=9&random-values-by-iterable=baz&random-values-by-function=9&random-values-by-function-path=9&random-value-by-faker-provider-function-path=Surveyor%2C+building&random-string=various&random-integer=19824&random-integer-in-range=4&random-float=15267.672192991231&random-rounded-float-in-range=2.171&random-boolean=false&random-boolean-nullable=null&random-type=continue&random-unique-identifier=e2bbe15848d549ff818a60859333e584&random-id=42681&random-name-by-iterable=role&random-name-by-function=fund' \\ -H 'Accept-Language: *' \\ -H 'Accept-Charset: utf-8' \\ https://github.com/mondeja/http-request-codegen multipart/form-data Input from http_request_codegen import generate_http_request_code generate_http_request_code ( language = 'bash' , impl = 'curl' , method = 'POST' , url = 'https://github.com/mondeja/http-request-codegen' , headers = { 'Accept-Language' : '*' , 'Accept-Charset' : 'utf-8' }, seed = 3549 , files = { 'fixed-filepath' : '/tmp/foo.txt' , 'random-filepath' : None , 'fixed-filepath-content-type' : ( '/tmp/bar.csv' , 'text/csv' ), 'fixed-filepath-ct-header' : ( '/tmp/bar.json' , 'application/json' , { 'Accept-Charset' : 'utf-8' } ), 'random-filepath-content-type' : ( None , 'text/plain' ), 'random-filepath-ct-header' : ( None , 'text/csv' , { 'Accept-Charset' : 'utf-8' } ) } ) Output curl \\ -X 'POST' \\ -F 'fixed-filepath=@/tmp/foo.txt' \\ -F 'random-filepath=@/teacher/as.gif' \\ -F 'fixed-filepath-content-type=@/tmp/bar.csv' \\ -F 'fixed-filepath-ct-header=@/tmp/bar.json' \\ -F 'random-filepath-content-type=@/which/church.css' \\ -F 'random-filepath-ct-header=@/final/response.csv' \\ -H 'Accept-Language: *' \\ -H 'Accept-Charset: utf-8' \\ https://github.com/mondeja/http-request-codegen application/json Input import fake_module from http_request_codegen import generate_http_request_code generate_http_request_code ( language = 'bash' , impl = 'curl' , method = 'POST' , url = 'https://github.com/mondeja/http-request-codegen' , headers = { 'Content-Type' : 'application/json' }, seed = 3549 , parameters = [ { 'name' : 'fixed-value' , 'value' : 3 }, { 'name' : 'dinamic-value-by-iterable' , 'value' : [ 1 , 2 , 3 ] # same as 'values': [1, 2, 3] }, { 'name' : 'dinamic-value-by-function' , 'value' : fake_module . integers_from_1_to_10 }, # Parameter value randomization { 'name' : 'random-values-by-iterable' , 'values' : [ 'foo' , 'bar' , 'baz' ] }, { 'name' : 'random-values-by-function' , 'values' : fake_module . integers_from_1_to_10 }, { 'name' : 'random-values-by-function-path' , 'values' : 'fake_module::integers_from_1_to_10' }, { 'name' : 'random-value-by-faker-provider-function-path' , 'faker' : 'faker.providers.job::job' }, { 'name' : 'random-string' , # by default: random word 'type' : 'str' }, { 'name' : 'random-integer' , 'type' : 'int' , }, { 'name' : 'random-integer-in-range' , 'type' : int , # You can use Python types also 'min' : 2 , 'max' : 5 , }, { 'name' : 'random-float' , 'type' : 'number' , # You can use some type aliases also }, { 'name' : 'random-rounded-float-in-range' , 'type' : float , 'min' : 1.555 , 'max' : 2.555 , 'round' : 3 }, { 'name' : 'random-boolean' , 'type' : bool }, { 'name' : 'random-boolean-nullable' , 'type' : 'boolean' , 'null' : True }, { 'name' : 'random-type' , 'type' : 'random' # random type from availables }, { 'name' : 'random-unique-identifier' , 'type' : 'uuid' }, { 'name' : 'random-id' , # positive integer 'type' : 'id' }, # Parameter name randomization { 'name' : [ 'random-name-from-iterable' , 'random-name-by-iterable' ], 'type' : 'str' , }, { 'name' : fake_module . random_name_by_function , 'type' : 'random' , }, ] ) Output curl \\ -X 'POST' \\ -d 'fixed-value=3&dinamic-value-by-iterable=3&dinamic-value-by-function=9&random-values-by-iterable=baz&random-values-by-function=9&random-values-by-function-path=9&random-value-by-faker-provider-function-path=Comptroller&random-string=nature&random-integer=19824&random-integer-in-range=4&random-float=15267.672192991231&random-rounded-float-in-range=2.171&random-boolean=false&random-boolean-nullable=null&random-type=general&random-unique-identifier=002cab7390c84a179bd802fe044cbeb6&random-id=42681&random-name-by-iterable=sea&random-name-by-function=only' \\ -H 'Content-Type: application/json' \\ https://github.com/mondeja/http-request-codegen text/plain Input from http_request_codegen import generate_http_request_code generate_http_request_code ( language = 'bash' , impl = 'curl' , method = 'POST' , url = 'https://github.com/mondeja/http-request-codegen' , headers = { 'Content-Type' : 'text/plain' }, seed = 3549 , parameters = [ { 'name' : 'random-values-by-iterable' , 'values' : [ 'foo' , 'bar' , 'baz' ] } ] ) Output curl \\ -X 'POST' \\ -d 'random-values-by-iterable=baz' \\ -H 'Content-Type: text/plain' \\ https://github.com/mondeja/http-request-codegen Javascript fetch GET Input import fake_module from http_request_codegen import generate_http_request_code generate_http_request_code ( language = 'javascript' , impl = 'fetch' , method = 'GET' , url = 'https://github.com/mondeja/http-request-codegen' , headers = { 'Content-Type' : 'application/json' , 'Accept-Language' : '*' }, seed = 3549 , parameters = [ { 'name' : 'fixed-value' , 'value' : 3 }, { 'name' : 'dinamic-value-by-iterable' , 'value' : [ 1 , 2 , 3 ] # same as 'values': [1, 2, 3] }, { 'name' : 'dinamic-value-by-function' , 'value' : fake_module . integers_from_1_to_10 }, # Parameter value randomization { 'name' : 'random-values-by-iterable' , 'values' : [ 'foo' , 'bar' , 'baz' ] }, { 'name' : 'random-values-by-function' , 'values' : fake_module . integers_from_1_to_10 }, { 'name' : 'random-values-by-function-path' , 'values' : 'fake_module::integers_from_1_to_10' }, { 'name' : 'random-value-by-faker-provider-function-path' , 'faker' : 'faker.providers.job::job' }, { 'name' : 'random-string' , # by default: random word 'type' : 'str' }, { 'name' : 'random-integer' , 'type' : 'int' , }, { 'name' : 'random-integer-in-range' , 'type' : int , # You can use Python types also 'min' : 2 , 'max' : 5 , }, { 'name' : 'random-float' , 'type' : 'number' , # You can use some type aliases also }, { 'name' : 'random-rounded-float-in-range' , 'type' : float , 'min' : 1.555 , 'max' : 2.555 , 'round' : 3 }, { 'name' : 'random-boolean' , 'type' : bool }, { 'name' : 'random-boolean-nullable' , 'type' : 'boolean' , 'null' : True }, { 'name' : 'random-type' , 'type' : 'random' # random type from availables }, { 'name' : 'random-unique-identifier' , 'type' : 'uuid' }, { 'name' : 'random-id' , # positive integer 'type' : 'id' }, # Parameter name randomization { 'name' : [ 'random-name-from-iterable' , 'random-name-by-iterable' ], 'type' : 'str' , }, { 'name' : fake_module . random_name_by_function , 'type' : 'random' , }, ] ) This implementation will emulate browsers' fetch API by default. using Promises-like response processing. If you want to simulate a NodeJS environment, pass the parameter setup as True and the next initialization snippet will be prepended to the generated code: const fetch = require ( 'node-fetch' ); For ESM imports emulation, use setup='import fetch from \\'node-fetch\\';\\n\\n' , thus the initialization snippet will be: import fetch from 'node-fetch' ; Of course, you can customize this initialization for other environments. For example, polyfill the API using whatwg as ESM module with setup='import \\'whatwg-fetch\\';\\n\\n' : import 'whatwg-fetch' ; Output fetch ( 'https://github.com/mondeja/http-request-codegen?fixed-value=3&dinamic-value' + '-by-iterable=3&dinamic-value-by-function=9&random-values-by-iterable=baz&' + 'random-values-by-function=9&random-values-by-function-path=9&random-value' + '-by-faker-provider-function-path=Commissioning+editor&random-string=seek&' + 'random-integer=19824&random-integer-in-range=4&random-float=15267.6721929' + '91231&random-rounded-float-in-range=2.171&random-boolean=false&random-boo' + 'lean-nullable=null&random-type=author&random-unique-identifier=693f10b184' + 'af451da6d4175ab730b1f2&random-id=42681&random-name-by-iterable=teach&rand' + 'om-name-by-function=north' , { headers : { 'Content-Type' : 'application/json' , 'Accept-Language' : '*' } } ). then ( function ( response ) { console . log ( response ); }). catch ( function ( err ) { console . error ( 'Error:' , err ); }); POST application/x-www-form-urlencoded Input import fake_module from http_request_codegen import generate_http_request_code generate_http_request_code ( language = 'javascript' , impl = 'fetch' , method = 'POST' , url = 'https://github.com/mondeja/http-request-codegen' , headers = { 'Accept-Language' : '*' , 'Accept-Charset' : 'utf-8' }, seed = 3549 , parameters = [ { 'name' : 'fixed-value' , 'value' : 3 }, { 'name' : 'dinamic-value-by-iterable' , 'value' : [ 1 , 2 , 3 ] # same as 'values': [1, 2, 3] }, { 'name' : 'dinamic-value-by-function' , 'value' : fake_module . integers_from_1_to_10 }, # Parameter value randomization { 'name' : 'random-values-by-iterable' , 'values' : [ 'foo' , 'bar' , 'baz' ] }, { 'name' : 'random-values-by-function' , 'values' : fake_module . integers_from_1_to_10 }, { 'name' : 'random-values-by-function-path' , 'values' : 'fake_module::integers_from_1_to_10' }, { 'name' : 'random-value-by-faker-provider-function-path' , 'faker' : 'faker.providers.job::job' }, { 'name' : 'random-string' , # by default: random word 'type' : 'str' }, { 'name' : 'random-integer' , 'type' : 'int' , }, { 'name' : 'random-integer-in-range' , 'type' : int , # You can use Python types also 'min' : 2 , 'max' : 5 , }, { 'name' : 'random-float' , 'type' : 'number' , # You can use some type aliases also }, { 'name' : 'random-rounded-float-in-range' , 'type' : float , 'min' : 1.555 , 'max' : 2.555 , 'round' : 3 }, { 'name' : 'random-boolean' , 'type' : bool }, { 'name' : 'random-boolean-nullable' , 'type' : 'boolean' , 'null' : True }, { 'name' : 'random-type' , 'type' : 'random' # random type from availables }, { 'name' : 'random-unique-identifier' , 'type' : 'uuid' }, { 'name' : 'random-id' , # positive integer 'type' : 'id' }, # Parameter name randomization { 'name' : [ 'random-name-from-iterable' , 'random-name-by-iterable' ], 'type' : 'str' , }, { 'name' : fake_module . random_name_by_function , 'type' : 'random' , }, ] ) Output const fetch = require ( 'node-fetch' ); fetch ( 'https://github.com/mondeja/http-request-codegen' , { method : 'POST' , body : new URLSearchParams ({ 'fixed-value' : '3' , 'dinamic-value-by-iterable' : '3' , 'dinamic-value-by-function' : '9' , 'random-values-by-iterable' : 'baz' , 'random-values-by-function' : '9' , 'random-values-by-function-path' : '9' , 'random-value-by-faker-provider-function-path' : 'Lecturer, higher educat' + 'ion' , 'random-string' : 'whatever' , 'random-integer' : '19824' , 'random-integer-in-range' : '4' , 'random-float' : '15267.672192991231' , 'random-rounded-float-in-range' : '2.171' , 'random-boolean' : 'false' , 'random-boolean-nullable' : 'null' , 'random-type' : 'close' , 'random-unique-identifier' : '25f131366a4244bd9f095e2645d12ed3' , 'random-id' : '42681' , 'random-name-by-iterable' : 'affect' , 'random-name-by-function' : 'employee' }), headers : { 'Accept-Language' : '*' , 'Accept-Charset' : 'utf-8' } } ). then ( function ( response ) { console . log ( response ); }). catch ( function ( err ) { console . error ( 'Error:' , err ); }); multipart/form-data Input from http_request_codegen import generate_http_request_code generate_http_request_code ( language = 'javascript' , impl = 'fetch' , method = 'POST' , url = 'https://github.com/mondeja/http-request-codegen' , headers = { 'Accept-Language' : '*' , 'Accept-Charset' : 'utf-8' }, seed = 3549 , files = { 'fixed-filepath' : '/tmp/foo.txt' , 'random-filepath' : None , 'fixed-filepath-content-type' : ( '/tmp/bar.csv' , 'text/csv' ), 'fixed-filepath-ct-header' : ( '/tmp/bar.json' , 'application/json' , { 'Accept-Charset' : 'utf-8' } ), 'random-filepath-content-type' : ( None , 'text/plain' ), 'random-filepath-ct-header' : ( None , 'text/csv' , { 'Accept-Charset' : 'utf-8' } ) } ) Output const fs = require ( 'fs' ); const fetch = require ( 'node-fetch' ); const FormData = require ( 'form-data' ); const formData = new FormData (); formData . append ( 'fixed-filepath' , fs . createReadStream ( '/tmp/foo.txt' ), { filename : 'foo.txt' } ); formData . append ( 'random-filepath' , fs . createReadStream ( '/plan/design.gif' ), { filename : 'design.gif' } ); formData . append ( 'fixed-filepath-content-type' , fs . createReadStream ( '/tmp/bar.csv' ), { filename : 'bar.csv' , contentType : 'text/csv' } ); formData . append ( 'fixed-filepath-ct-header' , fs . createReadStream ( '/tmp/bar.json' ), { filename : 'bar.json' , contentType : 'application/json' } ); formData . append ( 'random-filepath-content-type' , fs . createReadStream ( '/large/discussion.bmp' ), { filename : 'discussion.bmp' , contentType : 'text/plain' } ); formData . append ( 'random-filepath-ct-header' , fs . createReadStream ( '/live/doctor.flac' ), { filename : 'doctor.flac' , contentType : 'text/csv' } ); fetch ( 'https://github.com/mondeja/http-request-codegen' , { method : 'POST' , body : formData , headers : { 'Accept-Language' : '*' , 'Accept-Charset' : 'utf-8' } } ). then ( function ( response ) { console . log ( response ); }). catch ( function ( err ) { console . error ( 'Error:' , err ); }); application/json Input import fake_module from http_request_codegen import generate_http_request_code generate_http_request_code ( language = 'javascript' , impl = 'fetch' , method = 'POST' , url = 'https://github.com/mondeja/http-request-codegen' , headers = { 'Content-Type' : 'application/json' }, seed = 3549 , parameters = [ { 'name' : 'fixed-value' , 'value' : 3 }, { 'name' : 'dinamic-value-by-iterable' , 'value' : [ 1 , 2 , 3 ] # same as 'values': [1, 2, 3] }, { 'name' : 'dinamic-value-by-function' , 'value' : fake_module . integers_from_1_to_10 }, # Parameter value randomization { 'name' : 'random-values-by-iterable' , 'values' : [ 'foo' , 'bar' , 'baz' ] }, { 'name' : 'random-values-by-function' , 'values' : fake_module . integers_from_1_to_10 }, { 'name' : 'random-values-by-function-path' , 'values' : 'fake_module::integers_from_1_to_10' }, { 'name' : 'random-value-by-faker-provider-function-path' , 'faker' : 'faker.providers.job::job' }, { 'name' : 'random-string' , # by default: random word 'type' : 'str' }, { 'name' : 'random-integer' , 'type' : 'int' , }, { 'name' : 'random-integer-in-range' , 'type' : int , # You can use Python types also 'min' : 2 , 'max' : 5 , }, { 'name' : 'random-float' , 'type' : 'number' , # You can use some type aliases also }, { 'name' : 'random-rounded-float-in-range' , 'type' : float , 'min' : 1.555 , 'max' : 2.555 , 'round' : 3 }, { 'name' : 'random-boolean' , 'type' : bool }, { 'name' : 'random-boolean-nullable' , 'type' : 'boolean' , 'null' : True }, { 'name' : 'random-type' , 'type' : 'random' # random type from availables }, { 'name' : 'random-unique-identifier' , 'type' : 'uuid' }, { 'name' : 'random-id' , # positive integer 'type' : 'id' }, # Parameter name randomization { 'name' : [ 'random-name-from-iterable' , 'random-name-by-iterable' ], 'type' : 'str' , }, { 'name' : fake_module . random_name_by_function , 'type' : 'random' , }, ] ) Output const fetch = require ( 'node-fetch' ); fetch ( 'https://github.com/mondeja/http-request-codegen' , { method : 'POST' , body : JSON . stringify ({ 'fixed-value' : '3' , 'dinamic-value-by-iterable' : '3' , 'dinamic-value-by-function' : '9' , 'random-values-by-iterable' : 'baz' , 'random-values-by-function' : '9' , 'random-values-by-function-path' : '9' , 'random-value-by-faker-provider-function-path' : 'Press sub' , 'random-string' : 'consumer' , 'random-integer' : '19824' , 'random-integer-in-range' : '4' , 'random-float' : '15267.672192991231' , 'random-rounded-float-in-range' : '2.171' , 'random-boolean' : 'false' , 'random-boolean-nullable' : 'null' , 'random-type' : 'example' , 'random-unique-identifier' : 'e50eadc2b048489f97feb9c3ddd216b8' , 'random-id' : '42681' , 'random-name-by-iterable' : 'speak' , 'random-name-by-function' : 'officer' }), headers : { 'Content-Type' : 'application/json' } } ). then ( function ( response ) { console . log ( response ); }). catch ( function ( err ) { console . error ( 'Error:' , err ); }); text/plain Input from http_request_codegen import generate_http_request_code generate_http_request_code ( language = 'javascript' , impl = 'fetch' , method = 'POST' , url = 'https://github.com/mondeja/http-request-codegen' , headers = { 'Content-Type' : 'text/plain' }, seed = 3549 , parameters = [ { 'name' : 'random-values-by-iterable' , 'values' : [ 'foo' , 'bar' , 'baz' ] } ] ) Output const fetch = require ( 'node-fetch' ); fetch ( 'https://github.com/mondeja/http-request-codegen' , { method : 'POST' , body : 'baz' , headers : { 'Content-Type' : 'text/plain' } } ). then ( function ( response ) { console . log ( response ); }). catch ( function ( err ) { console . error ( 'Error:' , err ); });","title":"Demo"},{"location":"#support","text":"Python requests GET POST Headers \u2705 \u2705 Parameters \u2705 \u2705 Parameters localization \u2705 \u2705 Parameters seed \u2705 \u2705 Custom indentation \u2705 \u2705 Quotation character \u2705 \u2705 One line rendering \u2705 \u2705 Custom initialization \u2705 \u2705 Custom teardown \u2705 \u2705 Line wrapping \u2705 \u2705 Bash curl GET POST Headers \u2705 \u2705 Parameters \u2705 \u2705 Parameters localization \u2705 \u2705 Parameters seed \u2705 \u2705 Custom indentation \u2705 \u2705 Quotation character \u2705 \u2705 One line rendering \u2705 \u2705 Custom initialization \u2705 \u2705 Custom teardown \u2705 \u2705 Line wrapping \u2705 \u2705 Javascript fetch GET POST Headers \u2705 \u2705 Parameters \u2705 \u2705 Parameters localization \u2705 \u2705 Parameters seed \u2705 \u2705 Custom indentation \u2705 \u2705 Quotation character \u2705 \u2705 One line rendering \u2705 \u2705 Custom initialization \u2705 \u2705 Custom teardown \u2705 \u2705 Line wrapping \u2705 \u2705","title":"Support"},{"location":"dev/","text":"Setup development environment \u00b6 Linux/MacOS pip + virtualenv git clone https://github.com/mondeja/http-request-codegen.git python3 -m virtualenv venv . venv/bin/activate python3 -m pip install . [ dev ] pre-commit install Windows pip + virtualenv git clone https://github.com/mondeja/http-request-codegen.git python3 -m virtualenv venv venv\\Scripts\\activate.bat python3 -m pip install .[dev] pre-commit install Development commands \u00b6 Test \u00b6 All pytest -sv Coverage pytest -s --cov = http_request_codegen --cov-config = setup.cfg --cov-report = html Doctests pytest -svv --doctest-modules http_request_codegen Lint \u00b6 pre-commit run --all-files Developing implementations \u00b6 To develop an HTTP method function for a library or a program, you need to take in accounts all parameters described in generate_http_request_code function, but not the randomized values passed in parameters argument, because http_request_codegen provides functions that can handle these. Implementation arguments \u00b6 Each implementation function must contain the following arguments, which are passed from the API function generate_http_request_code , so it's recommended that you familiarize yourself with the arguments of that function before continuing with this guide because they are well documented there: url : unique positional argument of the function, represents the target URL of the request. headers : dictionary of headers. parameters : list of parameter data objects. files : dictionary of files, only passed to POST requests, so this should not be defined as argument is the function implementation's name is different to post . wrap : maximum anchor of the rendered code snippet. indent : indentation used in the rendered code snippet. quote_char : string quotation character. setup : code snippet prepended to generated request output. teardown : code snippet appended at the end of the generated request output. oneline : if enabled, render the code snippet in one line. seed : seed used generating random fake values of parameters. locale : locale used by faker library to localize the faked random values for parameters. Method singularities \u00b6 POST \u00b6 Most POST methods implementations render their code snippets different, depending on Content-Types header, including by default some of the most used Content-Types header related behaviours: The default behavior, even if you don't specify it explicitly in the Content-Type header is the generation of an application/x-www-form-urlencoded encoded request. If you want to generate a multipart/form-data encoded request, you need to specify the files to sent using the files argument. If you specifies the Content-Type header application/json , the parameters sent will be adjusted according to the JSON encoded POST request. If you specifies the Content-Type header text/plain , you can only send one parameter and it will be adjusted accordingly following the implementation. One line wrapping behaviour \u00b6 The first thing to take in account (and the most complicated one) is the behaviour of wrapping ( wrap argument) rendering as if oneline=True is passed. The question is: can a snippet of code be outputted in one line if the estimated length of the request is lower than wrap argument value? For example, Python requests can be rendered using this kind of code, in one line: import requests req = requests . get ( 'https://github.com/mondeja/http-request-codegen' ) ...or using multiple lines ( wrap is lower than expected length): import requests req = requests . get ( 'https://github.com/mondeja/http-request-codegen' ) Of course, this also affects parameters , headers and kwargs : import requests req = requests . get ( 'localhost' , params = { 'foo' : 'bar' }, headers = { 'foo' : 'bar' }) ...which can be outputted in multiple lines: import requests req = requests . get ( 'localhost' , params = { 'foo' : 'bar' }, headers = { 'foo' : 'bar' } ) Since this behaviour can depend both oneline and wrap arguments, the recommended way of implement this is to calculate the length of the expected request inside the code snippet, and, if it is greater or equal to wrap argument, must be rendered as if oneline=True . Tip You can see an example of this type of implementation at http_request_codegen.generators.python.requests::get function. But other implementations could be rendered in multiples lines regardless the wrap argument value. For example, the Javascript fetch API implementation will output always a multiline code snippet (unless oneline=True is explicitly defined), because the Javascript Promises writing in single line is not a common syntax and there is a little chance that the generated request could not be wrapped given the default wrap value (80 in this case). The minimum reasonable possible code snippet in one line for Javascript fetch API implementation would be: fetch ( 'localhost' ). then ( function ( response ) {}). catch ( function ( error ) { console . error ( error )}); ...which exceeds the default wrap value length (80). In such type of cases, there is no need of calculate the expected generated code snippet request length before build their output. Tip You can see an example of this type of implementation at http_request_codegen.generators.javascript.fetch::get function. In the first case, you need to iterate over parameters , headers and kwargs arguments to compute the expected length, then compare the expected length with wrap argument value and, if it reaches it, define an internal oneline=True like behaviour. In the second, you can assume that the generated code is multiline unless oneline=True is explicitly defined as argument. Randomizing values \u00b6 The library provides the functions lazy_name_by_parameter and lazy_value_by_parameter which returns the name and the value of a parameter given a parameter dictionary specification. These must be used to randomize parameters in a unified way across implementations as described in generate_http_request_code function documentation. Language/platform utilities \u00b6 You can create an _utils.py module inside a language or platform package to store utilities that could help in the process of building the code snippet, like: Define default indentation for the language/platform ( indent argument). Define default wrapping length value ( wrap argument). Define default quotation character/s ( quote_char argument). Escape quotes of values (according to given quote_char argument). Create greater level functions of code generation for the language/platform, such as string definitions with wrapping behaviour, dictionary definitions... Tip See current _utils.py modules of generators packages as reference. Creating test cases \u00b6 Use the script scripts/create-impl-test-cases.py to create possible generated code snippets cases accordingly to combination of arguments. This will help you developing implementations because saves you the need of execute every possible combination of arguments. Use it as follows: rm -rf cases && python3 scripts/create-impl-test-cases.py \\ --language python \\ --implementation requests \\ --method GET \\ --directory cases Previous command will create a cases/ directory with a lot of code snippets generated, given the combinations described in tests/combinations.py . When you will have manually revised that all code snippets are generated correctly, you can create a test for the implementation at tests/test_generators/test_<lang>/test_<impl>/test_<impl>.py , placing the cases/ directory at tests/test_generators/test_<lang>/test_<impl>/<METHOD> . For example, for Python requests GET method, the test module would be tests/test_generators/test_python/test_requests/test_requests.py and the cases/ directory would be placed at tests/test_generators/test_python/test_requests/GET/ . Tip You can use an already implemented test module as a reference to write the one for the implementation. TODO \u00b6 Create Python string wrapping algorithm that could wrap whitespaces in a smart way. Create Javascript string wrapping algorithm that could wrap whitespaces in a smart way.","title":"Development"},{"location":"dev/#setup-development-environment","text":"Linux/MacOS pip + virtualenv git clone https://github.com/mondeja/http-request-codegen.git python3 -m virtualenv venv . venv/bin/activate python3 -m pip install . [ dev ] pre-commit install Windows pip + virtualenv git clone https://github.com/mondeja/http-request-codegen.git python3 -m virtualenv venv venv\\Scripts\\activate.bat python3 -m pip install .[dev] pre-commit install","title":"Setup development environment"},{"location":"dev/#development-commands","text":"","title":"Development commands"},{"location":"dev/#test","text":"All pytest -sv Coverage pytest -s --cov = http_request_codegen --cov-config = setup.cfg --cov-report = html Doctests pytest -svv --doctest-modules http_request_codegen","title":"Test"},{"location":"dev/#lint","text":"pre-commit run --all-files","title":"Lint"},{"location":"dev/#developing-implementations","text":"To develop an HTTP method function for a library or a program, you need to take in accounts all parameters described in generate_http_request_code function, but not the randomized values passed in parameters argument, because http_request_codegen provides functions that can handle these.","title":"Developing implementations"},{"location":"dev/#implementation-arguments","text":"Each implementation function must contain the following arguments, which are passed from the API function generate_http_request_code , so it's recommended that you familiarize yourself with the arguments of that function before continuing with this guide because they are well documented there: url : unique positional argument of the function, represents the target URL of the request. headers : dictionary of headers. parameters : list of parameter data objects. files : dictionary of files, only passed to POST requests, so this should not be defined as argument is the function implementation's name is different to post . wrap : maximum anchor of the rendered code snippet. indent : indentation used in the rendered code snippet. quote_char : string quotation character. setup : code snippet prepended to generated request output. teardown : code snippet appended at the end of the generated request output. oneline : if enabled, render the code snippet in one line. seed : seed used generating random fake values of parameters. locale : locale used by faker library to localize the faked random values for parameters.","title":"Implementation arguments"},{"location":"dev/#method-singularities","text":"","title":"Method singularities"},{"location":"dev/#post","text":"Most POST methods implementations render their code snippets different, depending on Content-Types header, including by default some of the most used Content-Types header related behaviours: The default behavior, even if you don't specify it explicitly in the Content-Type header is the generation of an application/x-www-form-urlencoded encoded request. If you want to generate a multipart/form-data encoded request, you need to specify the files to sent using the files argument. If you specifies the Content-Type header application/json , the parameters sent will be adjusted according to the JSON encoded POST request. If you specifies the Content-Type header text/plain , you can only send one parameter and it will be adjusted accordingly following the implementation.","title":"POST"},{"location":"dev/#one-line-wrapping-behaviour","text":"The first thing to take in account (and the most complicated one) is the behaviour of wrapping ( wrap argument) rendering as if oneline=True is passed. The question is: can a snippet of code be outputted in one line if the estimated length of the request is lower than wrap argument value? For example, Python requests can be rendered using this kind of code, in one line: import requests req = requests . get ( 'https://github.com/mondeja/http-request-codegen' ) ...or using multiple lines ( wrap is lower than expected length): import requests req = requests . get ( 'https://github.com/mondeja/http-request-codegen' ) Of course, this also affects parameters , headers and kwargs : import requests req = requests . get ( 'localhost' , params = { 'foo' : 'bar' }, headers = { 'foo' : 'bar' }) ...which can be outputted in multiple lines: import requests req = requests . get ( 'localhost' , params = { 'foo' : 'bar' }, headers = { 'foo' : 'bar' } ) Since this behaviour can depend both oneline and wrap arguments, the recommended way of implement this is to calculate the length of the expected request inside the code snippet, and, if it is greater or equal to wrap argument, must be rendered as if oneline=True . Tip You can see an example of this type of implementation at http_request_codegen.generators.python.requests::get function. But other implementations could be rendered in multiples lines regardless the wrap argument value. For example, the Javascript fetch API implementation will output always a multiline code snippet (unless oneline=True is explicitly defined), because the Javascript Promises writing in single line is not a common syntax and there is a little chance that the generated request could not be wrapped given the default wrap value (80 in this case). The minimum reasonable possible code snippet in one line for Javascript fetch API implementation would be: fetch ( 'localhost' ). then ( function ( response ) {}). catch ( function ( error ) { console . error ( error )}); ...which exceeds the default wrap value length (80). In such type of cases, there is no need of calculate the expected generated code snippet request length before build their output. Tip You can see an example of this type of implementation at http_request_codegen.generators.javascript.fetch::get function. In the first case, you need to iterate over parameters , headers and kwargs arguments to compute the expected length, then compare the expected length with wrap argument value and, if it reaches it, define an internal oneline=True like behaviour. In the second, you can assume that the generated code is multiline unless oneline=True is explicitly defined as argument.","title":"One line wrapping behaviour"},{"location":"dev/#randomizing-values","text":"The library provides the functions lazy_name_by_parameter and lazy_value_by_parameter which returns the name and the value of a parameter given a parameter dictionary specification. These must be used to randomize parameters in a unified way across implementations as described in generate_http_request_code function documentation.","title":"Randomizing values"},{"location":"dev/#languageplatform-utilities","text":"You can create an _utils.py module inside a language or platform package to store utilities that could help in the process of building the code snippet, like: Define default indentation for the language/platform ( indent argument). Define default wrapping length value ( wrap argument). Define default quotation character/s ( quote_char argument). Escape quotes of values (according to given quote_char argument). Create greater level functions of code generation for the language/platform, such as string definitions with wrapping behaviour, dictionary definitions... Tip See current _utils.py modules of generators packages as reference.","title":"Language/platform utilities"},{"location":"dev/#creating-test-cases","text":"Use the script scripts/create-impl-test-cases.py to create possible generated code snippets cases accordingly to combination of arguments. This will help you developing implementations because saves you the need of execute every possible combination of arguments. Use it as follows: rm -rf cases && python3 scripts/create-impl-test-cases.py \\ --language python \\ --implementation requests \\ --method GET \\ --directory cases Previous command will create a cases/ directory with a lot of code snippets generated, given the combinations described in tests/combinations.py . When you will have manually revised that all code snippets are generated correctly, you can create a test for the implementation at tests/test_generators/test_<lang>/test_<impl>/test_<impl>.py , placing the cases/ directory at tests/test_generators/test_<lang>/test_<impl>/<METHOD> . For example, for Python requests GET method, the test module would be tests/test_generators/test_python/test_requests/test_requests.py and the cases/ directory would be placed at tests/test_generators/test_python/test_requests/GET/ . Tip You can use an already implemented test module as a reference to write the one for the implementation.","title":"Creating test cases"},{"location":"dev/#todo","text":"Create Python string wrapping algorithm that could wrap whitespaces in a smart way. Create Javascript string wrapping algorithm that could wrap whitespaces in a smart way.","title":"TODO"},{"location":"reference/","text":"Public API \u00b6 generate_http_request_code \u00b6 from http_request_codegen import generate_http_request_code Generates a code snippet of an HTTP request for a library of a given programming language or a CLI of a program, based on a valid HTTP method and a specification of parameters. There are some peculiarities concerning certain methods: POST Most POST methods implementations render their code snippets different, depending on Content-Types header, including by default some of the most used Content-Types header related behaviours: The default behavior, even if you don't specify it explicitly in the Content-Type header is the generation of an application/x-www-form-urlencoded encoded request. If you want to generate a multipart/form-data encoded request, you need to specify the files to sent using the files argument. If you specifies the Content-Type header application/json , the parameters sent will be adjusted according to the JSON encoded POST request. If you specifies the Content-Type header text/plain , you can only send one parameter and it will be adjusted accordingly following the implementation. Parameters: Name Type Description Default language str Programming language or plataform of the resulting code snippet. See Support to check the supported platforms and programming languages. None impl str Implementation type used for the code snippet. It can be a library, a program, or a language API. See Support to check the supported implementations by language. None method str HTTP method of the generated request. 'GET' url str, iterable, callable URL endpoint of the generated request. Defined as a string, the url will be the string itself. Defined as an iterable, the url will be selected randomly from the iterable. Supports recursivity: until a string is not selected the recursion will not be stopped. Defined as a callable, the url will be the returned value of the callable. Supports recursivity: until a string is returned the recursion will not be stopped. 'http://localhost' headers dict Mapping of request header names and values. {} parameters list List of parameters for the request. Each parameter must be a dictionary. This dictionary defines, for each parameter, what is the parameter name and how are the parameters values generated: name ( str , list , function ): Parameter name. At least one of this or names attributes are required. Defined as a string, the name will be the string itself. Defined as an iterable, the name will be selected randomly from the iterable. Supports recursivity: until a string is not selected the recursion will not be stopped. Defined as a callable, the name will be the returned value of the callable. Supports recursivity: until a string is returned the recursion will not be stopped. names ( str , list , function ): Parameter name. At least one of this or name attributes are required. Defined as an iterable, the name will be selected randomly from the iterable. Supports recursivity: until a string is not selected the recursion will not be stopped. Defined as a string, must be a Python formatted module path following the format 'path.to.module::function' and the return name will be used as the name for the parameter, which is useful if choosing a random value from a list doesn't fit your needs. Defined as a callable, the name will be the returned value of the callable. Supports recursivity: until a string is returned the recursion will not be stopped. type ( str , iterable , callable ): Parameter data type. If not defined and value , values and faker are not defined, will be considered as a string and the value of the parameter will be a random word built using faker library. For some types, other parameter dictionary attributes are supported, documented, if so, in each type. The following parameter data types are supported as attributes of parameters dictionaries, as well as their corresponding names in capital letters: 'str' : Basic string type. Can be defined with the Python builtin type str or the strings 'str' and 'string' . 'int' : Basic integer type. Can be defined with the Python builtin type int , or the strings 'int' and 'integer' . As default will be an integer in the range -65536 to -65536. The minimum and maximum values can be defined with min and max parameter optional attributes. 'float' : Floating point number type. Can be defined with the Python builtin type float , or the strings 'float' and number . As default will be in the range -65536 to 65536. The minimum and maximum values can be defined with min and max parameter optional attributes and can be rounded with round Python builtin function using round parameter optional attribute. 'bool' : Basic boolean type. Can be defined with the Python builtin type bool , or the strings 'bool' and 'boolean' . Returns as parameter value one of the strings 'true' or 'false' . If you pass the optional parameter attribute null as True , the string 'null' can also be returned. 'uuid' : Unique identifier type. Can be defined with the Python type uuid.UUID , or the strings 'uuid' and 'uuid4' . It's a unique identifier v4 encoded as hexadecimal string. 'id' : Basic integer id. It's a positive integer in the range 1 to 65536. The maximum value can be defined by optional max attribute. 'random' : Random type between the available types. You can define a set of possible types passing an iterable to types optional parameter attribute. Defined as an iterable or callable, the type will be selected randomly from the iterable, or the returned value from the callable will be used. This allows you to select a random type from a list of custom predefined types. value ( str , iterable , callable ): Parameter value. If not defined and type , values and faker are not defined, the value of the parameter will be a random word built using faker library. Defined as a string, the value will be the string itself. Defined as an iterable, the value will be selected randomly from the iterable. Supports recursivity: until a string is not selected the recursion will not be stopped. Defined as a callable, the value will be the returned value of the callable. Supports recursivity: until a string is returned the recursion will not be stopped. values ( list , iterable , callable ): Possible parameter values. Defined as an iterable, the value will be selected randomly from the iterable. Supports recursivity: until a string is not selected the recursion will not be stopped. Defined as a string, must be a Python formatted module path following the format 'path.to.module::function' and the return value will be used as the value for the parameter, which is useful if choosing a random value from a list doesn't fit your needs. Defined as a callable, the value will be the returned value of the callable. Supports recursivity: until a string is returned the recursion will not be stopped. faker ( str , function ): Python formatted module path to a function of a Faker provider used to build the value randomized. Can be a standard, external provider or any function, but if is not a provider, seed and locale will not have effect. Defined as a string must follow the format 'path.to.provider.module::function' . [] files dict Mapping of files to send to URL. Only has effect for POST methods. If you define this argument, the Content-Type header of the request will be assumed to be 'multipart/form-data' , but only will be explicitly specified in the code generated if the implementation needs it. Each value accepts a string, None or a tuple: Defined as a string, must be the filepath of the file to be sent. Defined as None , the filepath will be randomized using faker.providers.file::file_path function. Defined as a tuple, the first value must be the filepath of the file to be sent (if None will be a randomized filepath), the second value the content-type of the file and the third a dictionary of custom headers for the file. {} wrap int Maximum anchor of the rendered code snippet. If it exceeds it, the rendered code will be conveniently formatted on multiple lines. 80 indent str Indentation string used in the generated code. If not defined, the indentation string commonly used in the implementation will be used. None quote_char str Quotation character for strings used in the generated code. \"'\" setup bool, str If True , includes the code needed by an implementation to perform the request. Could be imports of additional modules or intialization of objects, depends on implementation. You can customize this snippet passing a string with the code snippet that you want to include. None teardown str Code snippet to include after the HTTP request code. None oneline bool Render the code in a single line. False seed int Seed used generating random fake values of parameters. Useful if you want to generate the same set of values between multiples code snippets. None locale str Locale used by faker library to localize the faked random values for parameters. None Exceptions: Type Description ValueError Value is not a valid value in their context. TypeError Values does not complaint with the types supported for it. ImportError Python module-function path specified can not be imported successfully. Returns: Type Description str HTTP request code snippet. generate_http_request_md_fenced_code_block \u00b6 from http_request_codegen import generate_http_request_md_fenced_code_block Wraps generate_http_request_code function result in a Markdown fenced code block. Parameters: Name Type Description Default fence_string str Code block fence string used wrapping the code. It does not perform any check about if the fenced string is a \"valid\" markdown code block fence string. '```' **kwargs All other optional arguments are passed to generate_http_request_code function. {} Examples: >>> generate_http_request_md_fenced_code_block ( setup = False ) \"```python \\n req = requests.get('http://localhost') \\n ```\" >>> generate_http_request_md_fenced_code_block ( fence_string = '~~~' , ... setup = False ) \"~~~python \\n req = requests.get('http://localhost') \\n ~~~\" Returns: Type Description str Fenced code block with HTTP request code snippet inside. lazy_name_by_parameter \u00b6 from http_request_codegen import lazy_name_by_parameter Given a dictionary of parameter options, returns the corresponding parameter name built following the rules listed in parameters argument of generate_http_request_code function documentation. The strategy of name building is to check next attributes in given order: name names You can use this function to build the parameters at lower level. This can be used, for example, to append the parameters to an URL generating GET method code snippets if an implementation does by building the parameters as arguments of a function. Parameters: Name Type Description Default parameter_data dict Parameter specification data. It's defined at name and names sections of parameters argument of generate_http_request_code function documentation. required seed int Seed using randomizing names. None Exceptions: Type Description ValueError if none of the name or names attributes are defined inside parameter_data dictionary. Examples: >>> lazy_name_by_parameter ({ 'name' : 'foo' }) 'foo' >>> result = lazy_name_by_parameter ({ 'names' : [ 'foo' , 'bar' , 'baz' ]}) >>> result in [ 'foo' , 'bar' , 'baz' ] True Returns: Type Description str Parameter name. lazy_value_by_parameter \u00b6 from http_request_codegen import lazy_value_by_parameter Given a dictionary of parameter options, returns the corresponding value built following the rules listed in parameters argument of generate_http_request_code function documentation. For example, giving {'type': int} as input, the output will be a random number as string. The strategy of value building is to check next attributes in given order: 'value' 'values' 'faker' 'type' If any of the previous attributes are passed will be treated as if {'type': str} has been passed, returning a random word. You can use this function to build the parameters at lower level. This can be used, for example, to append the parameters to an URL generating GET method code snippets if an implementation does by building the parameters as arguments of a function. Parameters: Name Type Description Default parameter_data dict Parameter specification data. It's defined at type , value , values and faker sections of parameters argument as is defined at generate_http_request_code function documentation. required seed int Seed using randomizing values. None locale str Locale used for faker providers. None Examples: >>> lazy_value_by_parameter ({ 'value' : 'foo' }) 'foo' >>> result = lazy_value_by_parameter ({ 'values' : [ 'foo' , 'bar' , 'baz' ]}) >>> result in [ 'foo' , 'bar' , 'baz' ] True >>> result = lazy_value_by_parameter ({ 'type' : 'int' }) >>> result . replace ( '.' , '' , 1 ) . lstrip ( '-' ) . isnumeric () and \\ ... isinstance ( result , str ) True Exceptions: Type Description ImportError if 'values' attribute value points to an inexistent Python object. TypeError if 'faker' attribute value does not contains an string or Python callable object, or if the 'type' attribute value does not support the defined type. ImportError if 'faker' attribute value, when passed as string, points to an inexistent Python object. Returns: Type Description str Parameter value.","title":"Reference"},{"location":"reference/#public-api","text":"","title":"Public API"},{"location":"reference/#generate_http_request_code","text":"from http_request_codegen import generate_http_request_code Generates a code snippet of an HTTP request for a library of a given programming language or a CLI of a program, based on a valid HTTP method and a specification of parameters. There are some peculiarities concerning certain methods: POST Most POST methods implementations render their code snippets different, depending on Content-Types header, including by default some of the most used Content-Types header related behaviours: The default behavior, even if you don't specify it explicitly in the Content-Type header is the generation of an application/x-www-form-urlencoded encoded request. If you want to generate a multipart/form-data encoded request, you need to specify the files to sent using the files argument. If you specifies the Content-Type header application/json , the parameters sent will be adjusted according to the JSON encoded POST request. If you specifies the Content-Type header text/plain , you can only send one parameter and it will be adjusted accordingly following the implementation. Parameters: Name Type Description Default language str Programming language or plataform of the resulting code snippet. See Support to check the supported platforms and programming languages. None impl str Implementation type used for the code snippet. It can be a library, a program, or a language API. See Support to check the supported implementations by language. None method str HTTP method of the generated request. 'GET' url str, iterable, callable URL endpoint of the generated request. Defined as a string, the url will be the string itself. Defined as an iterable, the url will be selected randomly from the iterable. Supports recursivity: until a string is not selected the recursion will not be stopped. Defined as a callable, the url will be the returned value of the callable. Supports recursivity: until a string is returned the recursion will not be stopped. 'http://localhost' headers dict Mapping of request header names and values. {} parameters list List of parameters for the request. Each parameter must be a dictionary. This dictionary defines, for each parameter, what is the parameter name and how are the parameters values generated: name ( str , list , function ): Parameter name. At least one of this or names attributes are required. Defined as a string, the name will be the string itself. Defined as an iterable, the name will be selected randomly from the iterable. Supports recursivity: until a string is not selected the recursion will not be stopped. Defined as a callable, the name will be the returned value of the callable. Supports recursivity: until a string is returned the recursion will not be stopped. names ( str , list , function ): Parameter name. At least one of this or name attributes are required. Defined as an iterable, the name will be selected randomly from the iterable. Supports recursivity: until a string is not selected the recursion will not be stopped. Defined as a string, must be a Python formatted module path following the format 'path.to.module::function' and the return name will be used as the name for the parameter, which is useful if choosing a random value from a list doesn't fit your needs. Defined as a callable, the name will be the returned value of the callable. Supports recursivity: until a string is returned the recursion will not be stopped. type ( str , iterable , callable ): Parameter data type. If not defined and value , values and faker are not defined, will be considered as a string and the value of the parameter will be a random word built using faker library. For some types, other parameter dictionary attributes are supported, documented, if so, in each type. The following parameter data types are supported as attributes of parameters dictionaries, as well as their corresponding names in capital letters: 'str' : Basic string type. Can be defined with the Python builtin type str or the strings 'str' and 'string' . 'int' : Basic integer type. Can be defined with the Python builtin type int , or the strings 'int' and 'integer' . As default will be an integer in the range -65536 to -65536. The minimum and maximum values can be defined with min and max parameter optional attributes. 'float' : Floating point number type. Can be defined with the Python builtin type float , or the strings 'float' and number . As default will be in the range -65536 to 65536. The minimum and maximum values can be defined with min and max parameter optional attributes and can be rounded with round Python builtin function using round parameter optional attribute. 'bool' : Basic boolean type. Can be defined with the Python builtin type bool , or the strings 'bool' and 'boolean' . Returns as parameter value one of the strings 'true' or 'false' . If you pass the optional parameter attribute null as True , the string 'null' can also be returned. 'uuid' : Unique identifier type. Can be defined with the Python type uuid.UUID , or the strings 'uuid' and 'uuid4' . It's a unique identifier v4 encoded as hexadecimal string. 'id' : Basic integer id. It's a positive integer in the range 1 to 65536. The maximum value can be defined by optional max attribute. 'random' : Random type between the available types. You can define a set of possible types passing an iterable to types optional parameter attribute. Defined as an iterable or callable, the type will be selected randomly from the iterable, or the returned value from the callable will be used. This allows you to select a random type from a list of custom predefined types. value ( str , iterable , callable ): Parameter value. If not defined and type , values and faker are not defined, the value of the parameter will be a random word built using faker library. Defined as a string, the value will be the string itself. Defined as an iterable, the value will be selected randomly from the iterable. Supports recursivity: until a string is not selected the recursion will not be stopped. Defined as a callable, the value will be the returned value of the callable. Supports recursivity: until a string is returned the recursion will not be stopped. values ( list , iterable , callable ): Possible parameter values. Defined as an iterable, the value will be selected randomly from the iterable. Supports recursivity: until a string is not selected the recursion will not be stopped. Defined as a string, must be a Python formatted module path following the format 'path.to.module::function' and the return value will be used as the value for the parameter, which is useful if choosing a random value from a list doesn't fit your needs. Defined as a callable, the value will be the returned value of the callable. Supports recursivity: until a string is returned the recursion will not be stopped. faker ( str , function ): Python formatted module path to a function of a Faker provider used to build the value randomized. Can be a standard, external provider or any function, but if is not a provider, seed and locale will not have effect. Defined as a string must follow the format 'path.to.provider.module::function' . [] files dict Mapping of files to send to URL. Only has effect for POST methods. If you define this argument, the Content-Type header of the request will be assumed to be 'multipart/form-data' , but only will be explicitly specified in the code generated if the implementation needs it. Each value accepts a string, None or a tuple: Defined as a string, must be the filepath of the file to be sent. Defined as None , the filepath will be randomized using faker.providers.file::file_path function. Defined as a tuple, the first value must be the filepath of the file to be sent (if None will be a randomized filepath), the second value the content-type of the file and the third a dictionary of custom headers for the file. {} wrap int Maximum anchor of the rendered code snippet. If it exceeds it, the rendered code will be conveniently formatted on multiple lines. 80 indent str Indentation string used in the generated code. If not defined, the indentation string commonly used in the implementation will be used. None quote_char str Quotation character for strings used in the generated code. \"'\" setup bool, str If True , includes the code needed by an implementation to perform the request. Could be imports of additional modules or intialization of objects, depends on implementation. You can customize this snippet passing a string with the code snippet that you want to include. None teardown str Code snippet to include after the HTTP request code. None oneline bool Render the code in a single line. False seed int Seed used generating random fake values of parameters. Useful if you want to generate the same set of values between multiples code snippets. None locale str Locale used by faker library to localize the faked random values for parameters. None Exceptions: Type Description ValueError Value is not a valid value in their context. TypeError Values does not complaint with the types supported for it. ImportError Python module-function path specified can not be imported successfully. Returns: Type Description str HTTP request code snippet.","title":"generate_http_request_code"},{"location":"reference/#generate_http_request_md_fenced_code_block","text":"from http_request_codegen import generate_http_request_md_fenced_code_block Wraps generate_http_request_code function result in a Markdown fenced code block. Parameters: Name Type Description Default fence_string str Code block fence string used wrapping the code. It does not perform any check about if the fenced string is a \"valid\" markdown code block fence string. '```' **kwargs All other optional arguments are passed to generate_http_request_code function. {} Examples: >>> generate_http_request_md_fenced_code_block ( setup = False ) \"```python \\n req = requests.get('http://localhost') \\n ```\" >>> generate_http_request_md_fenced_code_block ( fence_string = '~~~' , ... setup = False ) \"~~~python \\n req = requests.get('http://localhost') \\n ~~~\" Returns: Type Description str Fenced code block with HTTP request code snippet inside.","title":"generate_http_request_md_fenced_code_block"},{"location":"reference/#lazy_name_by_parameter","text":"from http_request_codegen import lazy_name_by_parameter Given a dictionary of parameter options, returns the corresponding parameter name built following the rules listed in parameters argument of generate_http_request_code function documentation. The strategy of name building is to check next attributes in given order: name names You can use this function to build the parameters at lower level. This can be used, for example, to append the parameters to an URL generating GET method code snippets if an implementation does by building the parameters as arguments of a function. Parameters: Name Type Description Default parameter_data dict Parameter specification data. It's defined at name and names sections of parameters argument of generate_http_request_code function documentation. required seed int Seed using randomizing names. None Exceptions: Type Description ValueError if none of the name or names attributes are defined inside parameter_data dictionary. Examples: >>> lazy_name_by_parameter ({ 'name' : 'foo' }) 'foo' >>> result = lazy_name_by_parameter ({ 'names' : [ 'foo' , 'bar' , 'baz' ]}) >>> result in [ 'foo' , 'bar' , 'baz' ] True Returns: Type Description str Parameter name.","title":"lazy_name_by_parameter"},{"location":"reference/#lazy_value_by_parameter","text":"from http_request_codegen import lazy_value_by_parameter Given a dictionary of parameter options, returns the corresponding value built following the rules listed in parameters argument of generate_http_request_code function documentation. For example, giving {'type': int} as input, the output will be a random number as string. The strategy of value building is to check next attributes in given order: 'value' 'values' 'faker' 'type' If any of the previous attributes are passed will be treated as if {'type': str} has been passed, returning a random word. You can use this function to build the parameters at lower level. This can be used, for example, to append the parameters to an URL generating GET method code snippets if an implementation does by building the parameters as arguments of a function. Parameters: Name Type Description Default parameter_data dict Parameter specification data. It's defined at type , value , values and faker sections of parameters argument as is defined at generate_http_request_code function documentation. required seed int Seed using randomizing values. None locale str Locale used for faker providers. None Examples: >>> lazy_value_by_parameter ({ 'value' : 'foo' }) 'foo' >>> result = lazy_value_by_parameter ({ 'values' : [ 'foo' , 'bar' , 'baz' ]}) >>> result in [ 'foo' , 'bar' , 'baz' ] True >>> result = lazy_value_by_parameter ({ 'type' : 'int' }) >>> result . replace ( '.' , '' , 1 ) . lstrip ( '-' ) . isnumeric () and \\ ... isinstance ( result , str ) True Exceptions: Type Description ImportError if 'values' attribute value points to an inexistent Python object. TypeError if 'faker' attribute value does not contains an string or Python callable object, or if the 'type' attribute value does not support the defined type. ImportError if 'faker' attribute value, when passed as string, points to an inexistent Python object. Returns: Type Description str Parameter value.","title":"lazy_value_by_parameter"}]}