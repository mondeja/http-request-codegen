{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Warning This library is currently under development, only supporting a few methods and implementations (see Support ). Please wait before use it and help me with implementations if you are interested. http-request-codegen generates HTTP request code snippets for different implementations. It's perfect if you want to include examples documenting APIs. Supports the following features: Request parameters values randomization using multiples strategies: Random values from lists and functions. Random values from data types. Random values from Faker providers . Randomization seeds. Localization. Request headers customization. Request optional arguments. Custom line wrapping. Custom indentation. Custom quotation character. Rendering in one line. Installation \u00b6 pip pip install http-request-codegen pipenv pipenv install http-request-codegen source git clone https://github.com/mondeja/http-request-codegen.git --depth = 1 cd http-request-codegen python setup.py install development git clone https://github.com/mondeja/http-request-codegen.git cd http-request-codegen pip install -e . [ dev ] Demo \u00b6 Python requests GET Input import fake_module from http_request_codegen import generate_http_request_code generate_http_request_code ( language = 'python' , impl = 'requests' , method = 'GET' , url = 'https://github.com/mondeja/http-request-codegen' , headers = { 'Content-Type' : 'application/json' , 'Accept-Language' : '*' }, seed = 680 , parameters = [ { 'name' : 'fixed-value' , 'value' : 3 }, { 'name' : 'dinamic-value-by-iterable' , 'value' : [ 1 , 2 , 3 ] # same as 'values': [1, 2, 3] }, { 'name' : 'dinamic-value-by-function' , 'value' : fake_module . integers_from_1_to_10 }, # Parameter value randomization { 'name' : 'random-values-by-iterable' , 'values' : [ 'foo' , 'bar' , 'baz' ] }, { 'name' : 'random-values-by-function' , 'values' : fake_module . integers_from_1_to_10 }, { 'name' : 'random-values-by-function-path' , 'values' : 'fake_module::integers_from_1_to_10' }, { 'name' : 'random-value-by-faker-provider-function-path' , 'faker' : 'faker.providers.job::job' }, { 'name' : 'random-string' , # by default: random word 'type' : 'str' }, { 'name' : 'random-integer' , 'type' : 'int' , }, { 'name' : 'random-integer-in-range' , 'type' : int , # You can use Python types also 'min' : 2 , 'max' : 5 , }, { 'name' : 'random-float' , 'type' : 'number' , # You can use some type aliases also }, { 'name' : 'random-rounded-float-in-range' , 'type' : float , 'min' : 1.555 , 'max' : 2.555 , 'round' : 3 }, { 'name' : 'random-boolean' , 'type' : bool }, { 'name' : 'random-boolean-nullable' , 'type' : 'boolean' , 'null' : True }, { 'name' : 'random-type' , 'type' : 'random' # random type from availables }, { 'name' : 'random-unique-identifier' , 'type' : 'uuid' }, { 'name' : 'random-id' , # positive integer 'type' : 'id' }, # Parameter name randomization { 'name' : [ 'random-name-from-iterable' , 'random-name-by-iterable' ], 'type' : 'str' , }, { 'name' : fake_module . random_name_by_function , 'type' : 'random' , }, ] ) Output import requests req = requests . get ( 'https://github.com/mondeja/http-request-codegen' , params = { 'fixed-value' : '3' , 'dinamic-value-by-iterable' : '3' , 'dinamic-value-by-function' : '9' , 'random-values-by-iterable' : 'baz' , 'random-values-by-function' : '9' , 'random-values-by-function-path' : '9' , 'random-value-by-faker-provider-function-path' : ( 'Museum/gallery exhib' 'itions officer' ), 'random-string' : 'surface' , 'random-integer' : '62909' , 'random-integer-in-range' : '5' , 'random-float' : '14742.772939434784' , 'random-rounded-float-in-range' : '2.167' , 'random-boolean' : 'false' , 'random-boolean-nullable' : 'null' , 'random-type' : 'card' , 'random-unique-identifier' : 'd75b6764833543e69426d2becc8e53f0' , 'random-id' : '64223' , 'random-name-by-iterable' : 'name' , 'random-name-by-function' : 'would' }, headers = { 'Content-Type' : 'application/json' , 'Accept-Language' : '*' } ) POST application/x-www-form-urlencoded Input import fake_module from http_request_codegen import generate_http_request_code generate_http_request_code ( language = 'python' , impl = 'requests' , method = 'POST' , url = 'https://github.com/mondeja/http-request-codegen' , headers = { 'Accept-Language' : '*' , 'Accept-Charset' : 'utf-8' }, seed = 680 , parameters = [ { 'name' : 'fixed-value' , 'value' : 3 }, { 'name' : 'dinamic-value-by-iterable' , 'value' : [ 1 , 2 , 3 ] # same as 'values': [1, 2, 3] }, { 'name' : 'dinamic-value-by-function' , 'value' : fake_module . integers_from_1_to_10 }, # Parameter value randomization { 'name' : 'random-values-by-iterable' , 'values' : [ 'foo' , 'bar' , 'baz' ] }, { 'name' : 'random-values-by-function' , 'values' : fake_module . integers_from_1_to_10 }, { 'name' : 'random-values-by-function-path' , 'values' : 'fake_module::integers_from_1_to_10' }, { 'name' : 'random-value-by-faker-provider-function-path' , 'faker' : 'faker.providers.job::job' }, { 'name' : 'random-string' , # by default: random word 'type' : 'str' }, { 'name' : 'random-integer' , 'type' : 'int' , }, { 'name' : 'random-integer-in-range' , 'type' : int , # You can use Python types also 'min' : 2 , 'max' : 5 , }, { 'name' : 'random-float' , 'type' : 'number' , # You can use some type aliases also }, { 'name' : 'random-rounded-float-in-range' , 'type' : float , 'min' : 1.555 , 'max' : 2.555 , 'round' : 3 }, { 'name' : 'random-boolean' , 'type' : bool }, { 'name' : 'random-boolean-nullable' , 'type' : 'boolean' , 'null' : True }, { 'name' : 'random-type' , 'type' : 'random' # random type from availables }, { 'name' : 'random-unique-identifier' , 'type' : 'uuid' }, { 'name' : 'random-id' , # positive integer 'type' : 'id' }, # Parameter name randomization { 'name' : [ 'random-name-from-iterable' , 'random-name-by-iterable' ], 'type' : 'str' , }, { 'name' : fake_module . random_name_by_function , 'type' : 'random' , }, ] ) Output import requests req = requests . post ( 'https://github.com/mondeja/http-request-codegen' , data = { 'fixed-value' : '3' , 'dinamic-value-by-iterable' : '3' , 'dinamic-value-by-function' : '9' , 'random-values-by-iterable' : 'baz' , 'random-values-by-function' : '9' , 'random-values-by-function-path' : '9' , 'random-value-by-faker-provider-function-path' : ( 'Product/process deve' 'lopment scientist' ), 'random-string' : 'most' , 'random-integer' : '62909' , 'random-integer-in-range' : '5' , 'random-float' : '14742.772939434784' , 'random-rounded-float-in-range' : '2.167' , 'random-boolean' : 'false' , 'random-boolean-nullable' : 'null' , 'random-type' : 'fire' , 'random-unique-identifier' : 'de7c151722664178b1a70594ca9d89fb' , 'random-id' : '64223' , 'random-name-by-iterable' : 'home' , 'random-name-by-function' : 'key' }, headers = { 'Accept-Language' : '*' , 'Accept-Charset' : 'utf-8' } ) multipart/form-data Input from http_request_codegen import generate_http_request_code generate_http_request_code ( language = 'python' , impl = 'requests' , method = 'POST' , url = 'https://github.com/mondeja/http-request-codegen' , headers = { 'Accept-Language' : '*' , 'Accept-Charset' : 'utf-8' }, seed = 680 , files = { 'fixed-filepath' : '/tmp/foo.txt' , 'random-filepath' : None , 'fixed-filepath-content-type' : ( '/tmp/bar.csv' , 'text/csv' ), 'fixed-filepath-ct-header' : ( '/tmp/bar.json' , 'application/json' , { 'Accept-Charset' : 'utf-8' } ), 'random-filepath-content-type' : ( None , 'text/plain' ), 'random-filepath-ct-header' : ( None , 'text/csv' , { 'Accept-Charset' : 'utf-8' } ) } ) Output import requests req = requests . post ( 'https://github.com/mondeja/http-request-codegen' , files = { 'fixed-filepath' : ( '/tmp/foo.txt' , open ( '/tmp/foo.txt' , 'rb' ) ), 'random-filepath' : ( '/environment/read.mov' , open ( '/environment/read.mov' , 'rb' ) ), 'fixed-filepath-content-type' : ( '/tmp/bar.csv' , open ( '/tmp/bar.csv' , 'rb' ), 'text/csv' ), 'fixed-filepath-ct-header' : ( '/tmp/bar.json' , open ( '/tmp/bar.json' , 'rb' ), 'application/json' , { 'Accept-Charset' : 'utf-8' } ), 'random-filepath-content-type' : ( '/think/TV.json' , open ( '/think/TV.json' , 'rb' ), 'text/plain' ), 'random-filepath-ct-header' : ( '/carry/everyone.avi' , open ( '/carry/everyone.avi' , 'rb' ), 'text/csv' , { 'Accept-Charset' : 'utf-8' } ) }, headers = { 'Accept-Language' : '*' , 'Accept-Charset' : 'utf-8' } ) application/json Input import fake_module from http_request_codegen import generate_http_request_code generate_http_request_code ( language = 'python' , impl = 'requests' , method = 'POST' , url = 'https://github.com/mondeja/http-request-codegen' , headers = { 'Content-Type' : 'application/json' }, seed = 680 , parameters = [ { 'name' : 'fixed-value' , 'value' : 3 }, { 'name' : 'dinamic-value-by-iterable' , 'value' : [ 1 , 2 , 3 ] # same as 'values': [1, 2, 3] }, { 'name' : 'dinamic-value-by-function' , 'value' : fake_module . integers_from_1_to_10 }, # Parameter value randomization { 'name' : 'random-values-by-iterable' , 'values' : [ 'foo' , 'bar' , 'baz' ] }, { 'name' : 'random-values-by-function' , 'values' : fake_module . integers_from_1_to_10 }, { 'name' : 'random-values-by-function-path' , 'values' : 'fake_module::integers_from_1_to_10' }, { 'name' : 'random-value-by-faker-provider-function-path' , 'faker' : 'faker.providers.job::job' }, { 'name' : 'random-string' , # by default: random word 'type' : 'str' }, { 'name' : 'random-integer' , 'type' : 'int' , }, { 'name' : 'random-integer-in-range' , 'type' : int , # You can use Python types also 'min' : 2 , 'max' : 5 , }, { 'name' : 'random-float' , 'type' : 'number' , # You can use some type aliases also }, { 'name' : 'random-rounded-float-in-range' , 'type' : float , 'min' : 1.555 , 'max' : 2.555 , 'round' : 3 }, { 'name' : 'random-boolean' , 'type' : bool }, { 'name' : 'random-boolean-nullable' , 'type' : 'boolean' , 'null' : True }, { 'name' : 'random-type' , 'type' : 'random' # random type from availables }, { 'name' : 'random-unique-identifier' , 'type' : 'uuid' }, { 'name' : 'random-id' , # positive integer 'type' : 'id' }, # Parameter name randomization { 'name' : [ 'random-name-from-iterable' , 'random-name-by-iterable' ], 'type' : 'str' , }, { 'name' : fake_module . random_name_by_function , 'type' : 'random' , }, ] ) Output import requests req = requests . post ( 'https://github.com/mondeja/http-request-codegen' , json = { 'fixed-value' : 3 , 'dinamic-value-by-iterable' : '3' , 'dinamic-value-by-function' : '9' , 'random-values-by-iterable' : 'baz' , 'random-values-by-function' : '9' , 'random-values-by-function-path' : '9' , 'random-value-by-faker-provider-function-path' : 'Automotive engineer' , 'random-string' : 'nearly' , 'random-integer' : '62909' , 'random-integer-in-range' : '5' , 'random-float' : '14742.772939434784' , 'random-rounded-float-in-range' : '2.167' , 'random-boolean' : 'false' , 'random-boolean-nullable' : 'null' , 'random-type' : 'table' , 'random-unique-identifier' : '96c380f1a6c141c8afa1e021541ce404' , 'random-id' : '64223' , 'random-name-by-iterable' : 'whole' , 'random-name-by-function' : 'outside' }, headers = { 'Content-Type' : 'application/json' } ) text/plain Input from http_request_codegen import generate_http_request_code generate_http_request_code ( language = 'python' , impl = 'requests' , method = 'POST' , url = 'https://github.com/mondeja/http-request-codegen' , headers = { 'Content-Type' : 'text/plain' }, seed = 680 , parameters = [ { 'name' : 'fixed-value' , 'value' : 3 }, ] ) Output import requests req = requests . post ( 'https://github.com/mondeja/http-request-codegen' , data = '3' , headers = { 'Content-Type' : 'text/plain' } ) Support \u00b6 Python requests GET POST Headers \u2705 \u2705 Parameters \u2705 \u2705 Parameters localization \u2705 \u2705 Parameters seed \u2705 \u2705 Custom indentation \u2705 \u2705 Quotation character \u2705 \u2705 One line rendering \u2705 \u2705 Custom initialization \u2705 \u2705 Custom teardown \u2705 \u2705 Line wrapping \u2705 \u2705 Public API \u00b6 generate_http_request_code \u00b6 from http_request_codegen import generate_http_request_code Generates a code snippet of an HTTP request for a library of a given programming language or a CLI of a program, based on a valid HTTP method and a specification of parameters. There are some peculiarities concerning certain methods: POST POST methods implementations includes some of the most used \"Content-Types\" headers related behaviours: The default behavior, even if you don't specify it explicitly in the Content-Type header is the generation of an application/x-www-form-urlencoded encoded request. If you want to generate a multipart/form-data encoded request, you need to specify the files to sent using the files argument. If you specifies the Content-Type header application/json , the parameters sent will be adjusted according to the JSON encoded POST request. If you specifies the Content-Type header text/plain , you can only send one parameter and it will be adjusted accordingly following the implementation. Parameters: Name Type Description Default language str Programming language or plataform of the resulting code snippet. See Support to check the supported platforms and programming languages. None impl str Implementation type used for the code snippet. It can be a library, a program, or a language API. See Support to check the supported implementations by language. None method str HTTP method of the generated request. 'GET' url str, iterable, callable URL endpoint of the generated request. - Defined as a string, the url will be the string itself. - Defined as an iterable, the url will be selected randomly from the iterable. Supports recursivity: until a string is not selected the recursion will not be stopped. - Defined as a callable, the url will be the returned value of the callable. Supports recursivity: until a string is returned the recursion will not be stopped. 'http://localhost' headers dict Mapping of request header names and values. {} parameters list List of parameters for the request. Each parameter must be a dictionary. This dictionary defines, for each parameter, what is the parameter name and how are the parameters values generated: name ( str , list , function ): Parameter name. At least one of this or names attributes are required. Defined as a string, the name will be the string itself. Defined as an iterable, the name will be selected randomly from the iterable. Supports recursivity: until a string is not selected the recursion will not be stopped. Defined as a callable, the name will be the returned value of the callable. Supports recursivity: until a string is returned the recursion will not be stopped. names ( str , list , function ): Parameter name. At least one of this or name attributes are required. Defined as an iterable, the name will be selected randomly from the iterable. Supports recursivity: until a string is not selected the recursion will not be stopped. Defined as a string, must be a Python formatted module path following the format 'path.to.module::function' and the return name will be used as the name for the parameter, which is useful if choosing a random value from a list doesn't fit your needs. Defined as a callable, the name will be the returned value of the callable. Supports recursivity: until a string is returned the recursion will not be stopped. type ( str ): Parameter data type. If not defined and value , values and faker are not defined, will be considered as a string and the value of the parameter will be a random word built using faker library. For some types, other parameter dictionary attributes are supported, documented, if so, in each type. The following parameter data types are supported as attributes of parameters dictionaries, as well as their corresponding names in capital letters: 'str' : Basic string type. Can be defined with the Python builtin type str or the strings 'str' and 'string' . 'int' : Basic integer type. Can be defined with the Python builtin type int , or the strings 'int' and 'integer' . As default will be an integer in the range -65536 to -65536. The minimum and maximum values can be defined with min and max parameter optional attributes. 'float' : Floating point number type. Can be defined with the Python builtin type float , or the strings 'float' and number . As default will be in the range -65536 to 65536. The minimum and maximum values can be defined with min and max parameter optional attributes and can be rounded with round Python builtin function using round parameter optional attribute. 'bool' : Basic boolean type. Can be defined with the Python builtin type bool , or the strings 'bool' and 'boolean' . Returns as parameter value one of the strings 'true' or 'false' . If you pass the optional parameter attribute null as True , the string 'null' can also be returned. 'uuid' : Unique identifier type. Can be defined with the Python type uuid.UUID , or the strings 'uuid' and 'uuid4' . It's a unique identifier v4 encoded as hexadecimal string. 'id' : Basic integer id. It's a positive integer in the range 1 to 65536. The maximum value can be defined by optional max attribute. 'random' : Random type between the available types. You can define a set of possible types passing an iterable to types optional parameter attribute. value ( str , iterable , callable ): Parameter value. If not defined and type , values and faker are not defined, the value of the parameter will be a random word built using faker library. Defined as a string, the value will be the string itself. Defined as an iterable, the value will be selected randomly from the iterable. Supports recursivity: until a string is not selected the recursion will not be stopped. Defined as a callable, the value will be the returned value of the callable. Supports recursivity: until a string is returned the recursion will not be stopped. values ( list , iterable , callable ): Possible parameter values. Defined as an iterable, the value will be selected randomly from the iterable. Supports recursivity: until a string is not selected the recursion will not be stopped. Defined as a string, must be a Python formatted module path following the format 'path.to.module::function' and the return value will be used as the value for the parameter, which is useful if choosing a random value from a list doesn't fit your needs. Defined as a callable, the value will be the returned value of the callable. Supports recursivity: until a string is returned the recursion will not be stopped. faker ( str , function ): Python formatted module path to a function of a Faker provider used to build the value randomized. Can be a standard, external provider or any function, but if is not a provider, seed and locale will not have effect. Defined as a string must follow the format 'path.to.provider.module::function' . [] files dict Mapping of files to send to URL. Only has effect for POST methods. If you define this argument the Content-Type header of the request will be assumed to be 'multipart/form-data' , but only will be explicitly specified in the code generated if the implementation needs it. Each value accepts a string, None or a tuple: Defined as a string, must be the filepath of the file to be sent. Defined as None , the filepath will be randomized using faker.providers.file::file_path function. Defined as a tuple, the first value must be the filepath of the file to be sent (if None will be a randomized filepath), the second value the content-type of the file and the third a dictionary of custom headers for the file. {} wrap int Maximum anchor of the code. If it exceeds it, the output code will be conveniently formatted on multiple lines. 80 indent str Indentation string used in the generated code. If not defined, the indentation string commonly used in the implementation will be used. None quote_char str Quotation character for strings used in the generated code. \"'\" setup bool, str If True , includes the code needed by an implementation to perform the request. Could be imports of additional modules or intialization of objects, depends on implementation. You can customize this snippet passing a string with the code snippet that you want to include. True teardown str Code snippet to include after the HTTP request code. None oneline bool Render the code in a single line. False seed int Seed used generating random fake values of parameters. Useful if you want to generate the same set of values between multiples code snippets. None locale str Locale used by faker library for localization of the fake random values for parameters. None Exceptions: Type Description ValueError Value is not a valid value in their context. TypeError Values does not complaint with the types supported for it. ImportError Python module-function path specified can not be imported successfully. Returns: Type Description str HTTP request code snippet. generate_http_request_md_fenced_code_block \u00b6 from http_request_codegen import generate_http_request_md_fenced_code_block Wraps generate_http_request_code function result in a Markdown fenced code block. Parameters: Name Type Description Default fence_string str Code block fence string used wrapping the code. It does not perform any check about if the fenced string is a \"valid\" markdown code block fence string. '```' **kwargs All optional arguments are passed to generate_http_request_code function. {} Examples: >>> generate_http_request_md_fenced_code_block ( setup = False ) \"```python \\n req = requests.get('http://localhost') \\n ```\" >>> generate_http_request_md_fenced_code_block ( fence_string = '~~~' , ... setup = False ) \"~~~python \\n req = requests.get('http://localhost') \\n ~~~\" Returns: Type Description str Fenced code block with HTTP request code snippet inside.","title":"User guide"},{"location":"#installation","text":"pip pip install http-request-codegen pipenv pipenv install http-request-codegen source git clone https://github.com/mondeja/http-request-codegen.git --depth = 1 cd http-request-codegen python setup.py install development git clone https://github.com/mondeja/http-request-codegen.git cd http-request-codegen pip install -e . [ dev ]","title":"Installation"},{"location":"#demo","text":"Python requests GET Input import fake_module from http_request_codegen import generate_http_request_code generate_http_request_code ( language = 'python' , impl = 'requests' , method = 'GET' , url = 'https://github.com/mondeja/http-request-codegen' , headers = { 'Content-Type' : 'application/json' , 'Accept-Language' : '*' }, seed = 680 , parameters = [ { 'name' : 'fixed-value' , 'value' : 3 }, { 'name' : 'dinamic-value-by-iterable' , 'value' : [ 1 , 2 , 3 ] # same as 'values': [1, 2, 3] }, { 'name' : 'dinamic-value-by-function' , 'value' : fake_module . integers_from_1_to_10 }, # Parameter value randomization { 'name' : 'random-values-by-iterable' , 'values' : [ 'foo' , 'bar' , 'baz' ] }, { 'name' : 'random-values-by-function' , 'values' : fake_module . integers_from_1_to_10 }, { 'name' : 'random-values-by-function-path' , 'values' : 'fake_module::integers_from_1_to_10' }, { 'name' : 'random-value-by-faker-provider-function-path' , 'faker' : 'faker.providers.job::job' }, { 'name' : 'random-string' , # by default: random word 'type' : 'str' }, { 'name' : 'random-integer' , 'type' : 'int' , }, { 'name' : 'random-integer-in-range' , 'type' : int , # You can use Python types also 'min' : 2 , 'max' : 5 , }, { 'name' : 'random-float' , 'type' : 'number' , # You can use some type aliases also }, { 'name' : 'random-rounded-float-in-range' , 'type' : float , 'min' : 1.555 , 'max' : 2.555 , 'round' : 3 }, { 'name' : 'random-boolean' , 'type' : bool }, { 'name' : 'random-boolean-nullable' , 'type' : 'boolean' , 'null' : True }, { 'name' : 'random-type' , 'type' : 'random' # random type from availables }, { 'name' : 'random-unique-identifier' , 'type' : 'uuid' }, { 'name' : 'random-id' , # positive integer 'type' : 'id' }, # Parameter name randomization { 'name' : [ 'random-name-from-iterable' , 'random-name-by-iterable' ], 'type' : 'str' , }, { 'name' : fake_module . random_name_by_function , 'type' : 'random' , }, ] ) Output import requests req = requests . get ( 'https://github.com/mondeja/http-request-codegen' , params = { 'fixed-value' : '3' , 'dinamic-value-by-iterable' : '3' , 'dinamic-value-by-function' : '9' , 'random-values-by-iterable' : 'baz' , 'random-values-by-function' : '9' , 'random-values-by-function-path' : '9' , 'random-value-by-faker-provider-function-path' : ( 'Museum/gallery exhib' 'itions officer' ), 'random-string' : 'surface' , 'random-integer' : '62909' , 'random-integer-in-range' : '5' , 'random-float' : '14742.772939434784' , 'random-rounded-float-in-range' : '2.167' , 'random-boolean' : 'false' , 'random-boolean-nullable' : 'null' , 'random-type' : 'card' , 'random-unique-identifier' : 'd75b6764833543e69426d2becc8e53f0' , 'random-id' : '64223' , 'random-name-by-iterable' : 'name' , 'random-name-by-function' : 'would' }, headers = { 'Content-Type' : 'application/json' , 'Accept-Language' : '*' } ) POST application/x-www-form-urlencoded Input import fake_module from http_request_codegen import generate_http_request_code generate_http_request_code ( language = 'python' , impl = 'requests' , method = 'POST' , url = 'https://github.com/mondeja/http-request-codegen' , headers = { 'Accept-Language' : '*' , 'Accept-Charset' : 'utf-8' }, seed = 680 , parameters = [ { 'name' : 'fixed-value' , 'value' : 3 }, { 'name' : 'dinamic-value-by-iterable' , 'value' : [ 1 , 2 , 3 ] # same as 'values': [1, 2, 3] }, { 'name' : 'dinamic-value-by-function' , 'value' : fake_module . integers_from_1_to_10 }, # Parameter value randomization { 'name' : 'random-values-by-iterable' , 'values' : [ 'foo' , 'bar' , 'baz' ] }, { 'name' : 'random-values-by-function' , 'values' : fake_module . integers_from_1_to_10 }, { 'name' : 'random-values-by-function-path' , 'values' : 'fake_module::integers_from_1_to_10' }, { 'name' : 'random-value-by-faker-provider-function-path' , 'faker' : 'faker.providers.job::job' }, { 'name' : 'random-string' , # by default: random word 'type' : 'str' }, { 'name' : 'random-integer' , 'type' : 'int' , }, { 'name' : 'random-integer-in-range' , 'type' : int , # You can use Python types also 'min' : 2 , 'max' : 5 , }, { 'name' : 'random-float' , 'type' : 'number' , # You can use some type aliases also }, { 'name' : 'random-rounded-float-in-range' , 'type' : float , 'min' : 1.555 , 'max' : 2.555 , 'round' : 3 }, { 'name' : 'random-boolean' , 'type' : bool }, { 'name' : 'random-boolean-nullable' , 'type' : 'boolean' , 'null' : True }, { 'name' : 'random-type' , 'type' : 'random' # random type from availables }, { 'name' : 'random-unique-identifier' , 'type' : 'uuid' }, { 'name' : 'random-id' , # positive integer 'type' : 'id' }, # Parameter name randomization { 'name' : [ 'random-name-from-iterable' , 'random-name-by-iterable' ], 'type' : 'str' , }, { 'name' : fake_module . random_name_by_function , 'type' : 'random' , }, ] ) Output import requests req = requests . post ( 'https://github.com/mondeja/http-request-codegen' , data = { 'fixed-value' : '3' , 'dinamic-value-by-iterable' : '3' , 'dinamic-value-by-function' : '9' , 'random-values-by-iterable' : 'baz' , 'random-values-by-function' : '9' , 'random-values-by-function-path' : '9' , 'random-value-by-faker-provider-function-path' : ( 'Product/process deve' 'lopment scientist' ), 'random-string' : 'most' , 'random-integer' : '62909' , 'random-integer-in-range' : '5' , 'random-float' : '14742.772939434784' , 'random-rounded-float-in-range' : '2.167' , 'random-boolean' : 'false' , 'random-boolean-nullable' : 'null' , 'random-type' : 'fire' , 'random-unique-identifier' : 'de7c151722664178b1a70594ca9d89fb' , 'random-id' : '64223' , 'random-name-by-iterable' : 'home' , 'random-name-by-function' : 'key' }, headers = { 'Accept-Language' : '*' , 'Accept-Charset' : 'utf-8' } ) multipart/form-data Input from http_request_codegen import generate_http_request_code generate_http_request_code ( language = 'python' , impl = 'requests' , method = 'POST' , url = 'https://github.com/mondeja/http-request-codegen' , headers = { 'Accept-Language' : '*' , 'Accept-Charset' : 'utf-8' }, seed = 680 , files = { 'fixed-filepath' : '/tmp/foo.txt' , 'random-filepath' : None , 'fixed-filepath-content-type' : ( '/tmp/bar.csv' , 'text/csv' ), 'fixed-filepath-ct-header' : ( '/tmp/bar.json' , 'application/json' , { 'Accept-Charset' : 'utf-8' } ), 'random-filepath-content-type' : ( None , 'text/plain' ), 'random-filepath-ct-header' : ( None , 'text/csv' , { 'Accept-Charset' : 'utf-8' } ) } ) Output import requests req = requests . post ( 'https://github.com/mondeja/http-request-codegen' , files = { 'fixed-filepath' : ( '/tmp/foo.txt' , open ( '/tmp/foo.txt' , 'rb' ) ), 'random-filepath' : ( '/environment/read.mov' , open ( '/environment/read.mov' , 'rb' ) ), 'fixed-filepath-content-type' : ( '/tmp/bar.csv' , open ( '/tmp/bar.csv' , 'rb' ), 'text/csv' ), 'fixed-filepath-ct-header' : ( '/tmp/bar.json' , open ( '/tmp/bar.json' , 'rb' ), 'application/json' , { 'Accept-Charset' : 'utf-8' } ), 'random-filepath-content-type' : ( '/think/TV.json' , open ( '/think/TV.json' , 'rb' ), 'text/plain' ), 'random-filepath-ct-header' : ( '/carry/everyone.avi' , open ( '/carry/everyone.avi' , 'rb' ), 'text/csv' , { 'Accept-Charset' : 'utf-8' } ) }, headers = { 'Accept-Language' : '*' , 'Accept-Charset' : 'utf-8' } ) application/json Input import fake_module from http_request_codegen import generate_http_request_code generate_http_request_code ( language = 'python' , impl = 'requests' , method = 'POST' , url = 'https://github.com/mondeja/http-request-codegen' , headers = { 'Content-Type' : 'application/json' }, seed = 680 , parameters = [ { 'name' : 'fixed-value' , 'value' : 3 }, { 'name' : 'dinamic-value-by-iterable' , 'value' : [ 1 , 2 , 3 ] # same as 'values': [1, 2, 3] }, { 'name' : 'dinamic-value-by-function' , 'value' : fake_module . integers_from_1_to_10 }, # Parameter value randomization { 'name' : 'random-values-by-iterable' , 'values' : [ 'foo' , 'bar' , 'baz' ] }, { 'name' : 'random-values-by-function' , 'values' : fake_module . integers_from_1_to_10 }, { 'name' : 'random-values-by-function-path' , 'values' : 'fake_module::integers_from_1_to_10' }, { 'name' : 'random-value-by-faker-provider-function-path' , 'faker' : 'faker.providers.job::job' }, { 'name' : 'random-string' , # by default: random word 'type' : 'str' }, { 'name' : 'random-integer' , 'type' : 'int' , }, { 'name' : 'random-integer-in-range' , 'type' : int , # You can use Python types also 'min' : 2 , 'max' : 5 , }, { 'name' : 'random-float' , 'type' : 'number' , # You can use some type aliases also }, { 'name' : 'random-rounded-float-in-range' , 'type' : float , 'min' : 1.555 , 'max' : 2.555 , 'round' : 3 }, { 'name' : 'random-boolean' , 'type' : bool }, { 'name' : 'random-boolean-nullable' , 'type' : 'boolean' , 'null' : True }, { 'name' : 'random-type' , 'type' : 'random' # random type from availables }, { 'name' : 'random-unique-identifier' , 'type' : 'uuid' }, { 'name' : 'random-id' , # positive integer 'type' : 'id' }, # Parameter name randomization { 'name' : [ 'random-name-from-iterable' , 'random-name-by-iterable' ], 'type' : 'str' , }, { 'name' : fake_module . random_name_by_function , 'type' : 'random' , }, ] ) Output import requests req = requests . post ( 'https://github.com/mondeja/http-request-codegen' , json = { 'fixed-value' : 3 , 'dinamic-value-by-iterable' : '3' , 'dinamic-value-by-function' : '9' , 'random-values-by-iterable' : 'baz' , 'random-values-by-function' : '9' , 'random-values-by-function-path' : '9' , 'random-value-by-faker-provider-function-path' : 'Automotive engineer' , 'random-string' : 'nearly' , 'random-integer' : '62909' , 'random-integer-in-range' : '5' , 'random-float' : '14742.772939434784' , 'random-rounded-float-in-range' : '2.167' , 'random-boolean' : 'false' , 'random-boolean-nullable' : 'null' , 'random-type' : 'table' , 'random-unique-identifier' : '96c380f1a6c141c8afa1e021541ce404' , 'random-id' : '64223' , 'random-name-by-iterable' : 'whole' , 'random-name-by-function' : 'outside' }, headers = { 'Content-Type' : 'application/json' } ) text/plain Input from http_request_codegen import generate_http_request_code generate_http_request_code ( language = 'python' , impl = 'requests' , method = 'POST' , url = 'https://github.com/mondeja/http-request-codegen' , headers = { 'Content-Type' : 'text/plain' }, seed = 680 , parameters = [ { 'name' : 'fixed-value' , 'value' : 3 }, ] ) Output import requests req = requests . post ( 'https://github.com/mondeja/http-request-codegen' , data = '3' , headers = { 'Content-Type' : 'text/plain' } )","title":"Demo"},{"location":"#support","text":"Python requests GET POST Headers \u2705 \u2705 Parameters \u2705 \u2705 Parameters localization \u2705 \u2705 Parameters seed \u2705 \u2705 Custom indentation \u2705 \u2705 Quotation character \u2705 \u2705 One line rendering \u2705 \u2705 Custom initialization \u2705 \u2705 Custom teardown \u2705 \u2705 Line wrapping \u2705 \u2705","title":"Support"},{"location":"#public-api","text":"","title":"Public API"},{"location":"#generate_http_request_code","text":"from http_request_codegen import generate_http_request_code Generates a code snippet of an HTTP request for a library of a given programming language or a CLI of a program, based on a valid HTTP method and a specification of parameters. There are some peculiarities concerning certain methods: POST POST methods implementations includes some of the most used \"Content-Types\" headers related behaviours: The default behavior, even if you don't specify it explicitly in the Content-Type header is the generation of an application/x-www-form-urlencoded encoded request. If you want to generate a multipart/form-data encoded request, you need to specify the files to sent using the files argument. If you specifies the Content-Type header application/json , the parameters sent will be adjusted according to the JSON encoded POST request. If you specifies the Content-Type header text/plain , you can only send one parameter and it will be adjusted accordingly following the implementation. Parameters: Name Type Description Default language str Programming language or plataform of the resulting code snippet. See Support to check the supported platforms and programming languages. None impl str Implementation type used for the code snippet. It can be a library, a program, or a language API. See Support to check the supported implementations by language. None method str HTTP method of the generated request. 'GET' url str, iterable, callable URL endpoint of the generated request. - Defined as a string, the url will be the string itself. - Defined as an iterable, the url will be selected randomly from the iterable. Supports recursivity: until a string is not selected the recursion will not be stopped. - Defined as a callable, the url will be the returned value of the callable. Supports recursivity: until a string is returned the recursion will not be stopped. 'http://localhost' headers dict Mapping of request header names and values. {} parameters list List of parameters for the request. Each parameter must be a dictionary. This dictionary defines, for each parameter, what is the parameter name and how are the parameters values generated: name ( str , list , function ): Parameter name. At least one of this or names attributes are required. Defined as a string, the name will be the string itself. Defined as an iterable, the name will be selected randomly from the iterable. Supports recursivity: until a string is not selected the recursion will not be stopped. Defined as a callable, the name will be the returned value of the callable. Supports recursivity: until a string is returned the recursion will not be stopped. names ( str , list , function ): Parameter name. At least one of this or name attributes are required. Defined as an iterable, the name will be selected randomly from the iterable. Supports recursivity: until a string is not selected the recursion will not be stopped. Defined as a string, must be a Python formatted module path following the format 'path.to.module::function' and the return name will be used as the name for the parameter, which is useful if choosing a random value from a list doesn't fit your needs. Defined as a callable, the name will be the returned value of the callable. Supports recursivity: until a string is returned the recursion will not be stopped. type ( str ): Parameter data type. If not defined and value , values and faker are not defined, will be considered as a string and the value of the parameter will be a random word built using faker library. For some types, other parameter dictionary attributes are supported, documented, if so, in each type. The following parameter data types are supported as attributes of parameters dictionaries, as well as their corresponding names in capital letters: 'str' : Basic string type. Can be defined with the Python builtin type str or the strings 'str' and 'string' . 'int' : Basic integer type. Can be defined with the Python builtin type int , or the strings 'int' and 'integer' . As default will be an integer in the range -65536 to -65536. The minimum and maximum values can be defined with min and max parameter optional attributes. 'float' : Floating point number type. Can be defined with the Python builtin type float , or the strings 'float' and number . As default will be in the range -65536 to 65536. The minimum and maximum values can be defined with min and max parameter optional attributes and can be rounded with round Python builtin function using round parameter optional attribute. 'bool' : Basic boolean type. Can be defined with the Python builtin type bool , or the strings 'bool' and 'boolean' . Returns as parameter value one of the strings 'true' or 'false' . If you pass the optional parameter attribute null as True , the string 'null' can also be returned. 'uuid' : Unique identifier type. Can be defined with the Python type uuid.UUID , or the strings 'uuid' and 'uuid4' . It's a unique identifier v4 encoded as hexadecimal string. 'id' : Basic integer id. It's a positive integer in the range 1 to 65536. The maximum value can be defined by optional max attribute. 'random' : Random type between the available types. You can define a set of possible types passing an iterable to types optional parameter attribute. value ( str , iterable , callable ): Parameter value. If not defined and type , values and faker are not defined, the value of the parameter will be a random word built using faker library. Defined as a string, the value will be the string itself. Defined as an iterable, the value will be selected randomly from the iterable. Supports recursivity: until a string is not selected the recursion will not be stopped. Defined as a callable, the value will be the returned value of the callable. Supports recursivity: until a string is returned the recursion will not be stopped. values ( list , iterable , callable ): Possible parameter values. Defined as an iterable, the value will be selected randomly from the iterable. Supports recursivity: until a string is not selected the recursion will not be stopped. Defined as a string, must be a Python formatted module path following the format 'path.to.module::function' and the return value will be used as the value for the parameter, which is useful if choosing a random value from a list doesn't fit your needs. Defined as a callable, the value will be the returned value of the callable. Supports recursivity: until a string is returned the recursion will not be stopped. faker ( str , function ): Python formatted module path to a function of a Faker provider used to build the value randomized. Can be a standard, external provider or any function, but if is not a provider, seed and locale will not have effect. Defined as a string must follow the format 'path.to.provider.module::function' . [] files dict Mapping of files to send to URL. Only has effect for POST methods. If you define this argument the Content-Type header of the request will be assumed to be 'multipart/form-data' , but only will be explicitly specified in the code generated if the implementation needs it. Each value accepts a string, None or a tuple: Defined as a string, must be the filepath of the file to be sent. Defined as None , the filepath will be randomized using faker.providers.file::file_path function. Defined as a tuple, the first value must be the filepath of the file to be sent (if None will be a randomized filepath), the second value the content-type of the file and the third a dictionary of custom headers for the file. {} wrap int Maximum anchor of the code. If it exceeds it, the output code will be conveniently formatted on multiple lines. 80 indent str Indentation string used in the generated code. If not defined, the indentation string commonly used in the implementation will be used. None quote_char str Quotation character for strings used in the generated code. \"'\" setup bool, str If True , includes the code needed by an implementation to perform the request. Could be imports of additional modules or intialization of objects, depends on implementation. You can customize this snippet passing a string with the code snippet that you want to include. True teardown str Code snippet to include after the HTTP request code. None oneline bool Render the code in a single line. False seed int Seed used generating random fake values of parameters. Useful if you want to generate the same set of values between multiples code snippets. None locale str Locale used by faker library for localization of the fake random values for parameters. None Exceptions: Type Description ValueError Value is not a valid value in their context. TypeError Values does not complaint with the types supported for it. ImportError Python module-function path specified can not be imported successfully. Returns: Type Description str HTTP request code snippet.","title":"generate_http_request_code"},{"location":"#generate_http_request_md_fenced_code_block","text":"from http_request_codegen import generate_http_request_md_fenced_code_block Wraps generate_http_request_code function result in a Markdown fenced code block. Parameters: Name Type Description Default fence_string str Code block fence string used wrapping the code. It does not perform any check about if the fenced string is a \"valid\" markdown code block fence string. '```' **kwargs All optional arguments are passed to generate_http_request_code function. {} Examples: >>> generate_http_request_md_fenced_code_block ( setup = False ) \"```python \\n req = requests.get('http://localhost') \\n ```\" >>> generate_http_request_md_fenced_code_block ( fence_string = '~~~' , ... setup = False ) \"~~~python \\n req = requests.get('http://localhost') \\n ~~~\" Returns: Type Description str Fenced code block with HTTP request code snippet inside.","title":"generate_http_request_md_fenced_code_block"},{"location":"dev/","text":"Setup development environment \u00b6 Linux/MacOS pip + virtualenv git clone https://github.com/mondeja/http-request-codegen.git python3 -m virtualenv venv . venv/bin/activate pip install -e . [ dev ] pre-commit install Windows pip + virtualenv git clone https://github.com/mondeja/http-request-codegen.git python3 -m virtualenv venv venv\\Scripts\\activate.bat pip install -e .[dev] pre-commit install Development commands \u00b6 Test \u00b6 All pytest -sv Coverage pytest -s --cov = http_request_codegen --cov-config = setup.cfg --cov-report = html Doctests pytest -svv --doctest-modules http_request_codegen Lint \u00b6 pre-commit run --all-files TODO \u00b6 Implement implementation autodiscovering in http_request_codegen.factory . Document and doctest http_request_codegen.generators.python._utils module. Document and doctest http_request_codegen.inspector module. Document http_request_codegen.support module. Add parameter name randomization support. Add url randomization support. Implement random parameter type (lazy string and 'random' type). Document lazy strings in parameter type. Document bool type in parameters types. Implement nullable value for bool type. Document random type in parameters types. Implement random type filtering between set of types. Document uuid type in parameters types. Document id type in parameters types. Document float type max , min and round parameters. Document int type max and min parameters. Add parametrizer that list all combinations of arguments passed to implementations. Implement custom code block fence string in http_request_codegen.api::generate_http_request_md_fenced_code_block function. Document http_request_codegen.api::generate_http_request_md_fenced_code_block function. Document http_request_codegen.valuer::lazy_value_by_parameter function. Document http_request_codegen.valuer::lazy_name_by_parameter function. Change init argument by setup . Allow setup argument to take a string for customize the initialization. Implement teardown argument. Implement real testing of generated HTTP requests against Flask server. Implement Python requests POST. Add complete demo for POST methods. Use mkdocs-exclude-plugin to remove fake_module.py and __pycache__ from built documentation. Test http_request_codegen.valuer.::lazy_name_by_parameter function. Add more oneline tests for POST requests. Implement real server testing for POST requests. Add support for random URLs passing None to url argument. Create Python string wrapping algorithm that could wrap whitespaces in a smart way.","title":"Development"},{"location":"dev/#setup-development-environment","text":"Linux/MacOS pip + virtualenv git clone https://github.com/mondeja/http-request-codegen.git python3 -m virtualenv venv . venv/bin/activate pip install -e . [ dev ] pre-commit install Windows pip + virtualenv git clone https://github.com/mondeja/http-request-codegen.git python3 -m virtualenv venv venv\\Scripts\\activate.bat pip install -e .[dev] pre-commit install","title":"Setup development environment"},{"location":"dev/#development-commands","text":"","title":"Development commands"},{"location":"dev/#test","text":"All pytest -sv Coverage pytest -s --cov = http_request_codegen --cov-config = setup.cfg --cov-report = html Doctests pytest -svv --doctest-modules http_request_codegen","title":"Test"},{"location":"dev/#lint","text":"pre-commit run --all-files","title":"Lint"},{"location":"dev/#todo","text":"Implement implementation autodiscovering in http_request_codegen.factory . Document and doctest http_request_codegen.generators.python._utils module. Document and doctest http_request_codegen.inspector module. Document http_request_codegen.support module. Add parameter name randomization support. Add url randomization support. Implement random parameter type (lazy string and 'random' type). Document lazy strings in parameter type. Document bool type in parameters types. Implement nullable value for bool type. Document random type in parameters types. Implement random type filtering between set of types. Document uuid type in parameters types. Document id type in parameters types. Document float type max , min and round parameters. Document int type max and min parameters. Add parametrizer that list all combinations of arguments passed to implementations. Implement custom code block fence string in http_request_codegen.api::generate_http_request_md_fenced_code_block function. Document http_request_codegen.api::generate_http_request_md_fenced_code_block function. Document http_request_codegen.valuer::lazy_value_by_parameter function. Document http_request_codegen.valuer::lazy_name_by_parameter function. Change init argument by setup . Allow setup argument to take a string for customize the initialization. Implement teardown argument. Implement real testing of generated HTTP requests against Flask server. Implement Python requests POST. Add complete demo for POST methods. Use mkdocs-exclude-plugin to remove fake_module.py and __pycache__ from built documentation. Test http_request_codegen.valuer.::lazy_name_by_parameter function. Add more oneline tests for POST requests. Implement real server testing for POST requests. Add support for random URLs passing None to url argument. Create Python string wrapping algorithm that could wrap whitespaces in a smart way.","title":"TODO"},{"location":"info/","text":"Macros Plugin Environment \u00b6 General List \u00b6 All available variables and filters within the macros plugin: Variable Type Content {'extra': {}, 'config': {'config_file_path': '/home/runner/work/http-request-codegen/http-request-codegen/mkdocs.yml', 'site_name': 'http-request-codegen', 'nav': [{'User guide': 'index.md'}, {'Development': 'dev.md'}], 'pages': None, 'site_url': 'https://github.com/mondeja/http-request-codegen', 'site_description': 'Multilanguage HTTP request code snippet generator.', 'site_author': '\u00c1lvaro Mond\u00e9jar Rubio', 'theme': Theme(name='material', dirs=['/opt/hostedtoolcache/Python/3.8.6/x64/lib/python3.8/site-packages/material', '/opt/hostedtoolcache/Python/3.8.6/x64/lib/python3.8/site-packages/mkdocs/templates'], static_templates=['sitemap.xml', '404.html'], language='en', direction=None, features=[], palette={'primary': None, 'accent': None}, font={'text': 'Roboto', 'code': 'Roboto Mono'}, icon={'repo': 'fontawesome/brands/github'}, favicon='assets/images/favicon.png', include_search_page=False, search_index_only=True), 'docs_dir': '/home/runner/work/http-request-codegen/http-request-codegen/docs', 'site_dir': '/home/runner/work/http-request-codegen/http-request-codegen/site', 'copyright': 'Copyright \u00a9 2020 \u00c1lvaro Mond\u00e9jar', 'google_analytics': None, 'dev_addr': Address(host='127.0.0.1', port=8000), 'use_directory_urls': True, 'repo_url': 'https://github.com/mondeja/http-request-codegen', 'repo_name': 'http-request-codegen', 'edit_uri': '', 'extra_css': [], 'extra_javascript': [], 'extra_templates': [], 'markdown_extensions': ['toc', 'tables', 'fenced_code', 'pymdownx.tabbed', 'pymdownx.superfences', 'meta', 'pymdownx.tasklist', 'admonition', 'pymdownx.details', ], 'mdx_configs': {'toc': {'permalink': True}, 'pymdownx.tasklist': {'custom_checkbox': True}}, 'strict': False, 'remote_branch': 'gh-pages', 'remote_name': 'origin', 'extra': {}, 'plugins': PluginCollection([('search', ), ('include-markdown', ), ('macros', ), ('minify', ), ('mkdocstrings', ), ('exclude', )])}, 'environment': {'system': 'Linux', 'system_version': '5.4.0-1031-azure', 'python_version': '3.8.6', 'mkdocs_version': '1.1.2', 'macros_plugin_version': '0.5.0', 'jinja2_version': '2.11.2'}, 'plugin': {'module_name': 'docs_macros', 'modules': [], 'include_dir': '', 'include_yaml': [], 'j2_block_start_string': '', 'j2_block_end_string': '', 'j2_variable_start_string': '', 'j2_variable_end_string': '', 'verbose': False}, 'git': {'status': True, 'date': datetime.datetime(2020, 12, 8, 14, 55, 35, tzinfo=tzoffset(None, 3600)), 'short_commit': '85a944f', 'commit': '85a944f2e41b3f78add9f75644155f5946200ecf', 'author': '\u00c1lvaro Mond\u00e9jar', 'tag': '', 'date_ISO': '2020-12-08 14:55:35 +0100', 'message': \"Remove uneeded files from documentation build using 'mkdocs-exclude' plugin\", 'raw': \"commit 85a944f2e41b3f78add9f75644155f5946200ecf\\nAuthor: \u00c1lvaro Mond\u00e9jar \\nDate: Tue Dec 8 14:55:35 2020 +0100\\n\\n Remove uneeded files from documentation build using 'mkdocs-exclude' plugin\", 'root_dir': '/home/runner/work/http-request-codegen/http-request-codegen'}, 'context': .context at 0x7fa5106fd3a0>, 'macros_info': .macros_info at 0x7fa5106fd310>, 'now': .now at 0x7fa5106fd430>, 'fix_url': , 'http_request_codegen': , 'seed': 680, 'fake_module': , 'str': , 'int': , 'float': , 'bool': , 'supported_features_md_table': .supported_features_md_table at 0x7fa5106fd670>, 'filters': {'pretty': .pretty at 0x7fa5106fd1f0>}, 'filters_builtin': {'abs': , 'attr': , 'batch': , 'capitalize': , 'center': , 'count': , 'd': , 'default': , 'dictsort': , 'e': , 'escape': , 'filesizeformat': , 'first': , 'float': , 'forceescape': , 'format': , 'groupby': , 'indent': , 'int': , 'join': , 'last': , 'length': , 'list': , 'lower': , 'map': , 'min': , 'max': , 'pprint': , 'random': , 'reject': , 'rejectattr': , 'replace': , 'reverse': , 'round': , 'safe': , 'select': , 'selectattr': , 'slice': , 'sort': , 'string': , 'striptags': , 'sum': , 'title': , 'trim': , 'truncate': , 'unique': , 'upper': , 'urlencode': , 'urlize': , 'wordcount': , 'wordwrap': , 'xmlattr': , 'tojson': }, 'navigation': Page(title='User guide', url='/mondeja/http-request-codegen/') Page(title='Development', url='/mondeja/http-request-codegen/dev/'), 'page': Page(title='Info', url='/mondeja/http-request-codegen/info/')} SuperDict {'extra': {}, 'config': {'config_file_path': '/home/runner/work/http-request-codegen/http-request-codegen/mkdocs.yml', 'site_name': 'http-request-codegen', 'nav': [{'User guide': 'index.md'}, {'Development': 'dev.md'}], 'pages': None, 'site_url': 'https://github.com/mondeja/http-request-codegen', 'site_description': 'Multilanguage HTTP request code snippet generator.', 'site_author': '\u00c1lvaro Mond\u00e9jar Rubio', 'theme': Theme(name='material', dirs=['/opt/hostedtoolcache/Python/3.8.6/x64/lib/python3.8/site-packages/material', '/opt/hostedtoolcache/Python/3.8.6/x64/lib/python3.8/site-packages/mkdocs/templates'], static_templates=['sitemap.xml', '404.html'], language='en', direction=None, features=[], palette={'primary': None, 'accent': None}, font={'text': 'Roboto', 'code': 'Roboto Mono'}, icon={'repo': 'fontawesome/brands/github'}, favicon='assets/images/favicon.png', include_search_page=False, search_index_only=True), 'docs_dir': '/home/runner/work/http-request-codegen/http-request-codegen/docs', 'site_dir': '/home/runner/work/http-request-codegen/http-request-codegen/site', 'copyright': 'Copyright \u00a9 2020 \u00c1lvaro Mond\u00e9jar', 'google_analytics': None, 'dev_addr': Address(host='127.0.0.1', port=8000), 'use_directory_urls': True, 'repo_url': 'https://github.com/mondeja/http-request-codegen', 'repo_name': 'http-request-codegen', 'edit_uri': '', 'extra_css': [], 'extra_javascript': [], 'extra_templates': [], 'markdown_extensions': ['toc', 'tables', 'fenced_code', 'pymdownx.tabbed', 'pymdownx.superfences', 'meta', 'pymdownx.tasklist', 'admonition', 'pymdownx.details', ], 'mdx_configs': {'toc': {'permalink': True}, 'pymdownx.tasklist': {'custom_checkbox': True}}, 'strict': False, 'remote_branch': 'gh-pages', 'remote_name': 'origin', 'extra': {}, 'plugins': PluginCollection([('search', ), ('include-markdown', ), ('macros', ), ('minify', ), ('mkdocstrings', ), ('exclude', )])}, 'environment': {'system': 'Linux', 'system_version': '5.4.0-1031-azure', 'python_version': '3.8.6', 'mkdocs_version': '1.1.2', 'macros_plugin_version': '0.5.0', 'jinja2_version': '2.11.2'}, 'plugin': {'module_name': 'docs_macros', 'modules': [], 'include_dir': '', 'include_yaml': [], 'j2_block_start_string': '', 'j2_block_end_string': '', 'j2_variable_start_string': '', 'j2_variable_end_string': '', 'verbose': False}, 'git': {'status': True, 'date': datetime.datetime(2020, 12, 8, 14, 55, 35, tzinfo=tzoffset(None, 3600)), 'short_commit': '85a944f', 'commit': '85a944f2e41b3f78add9f75644155f5946200ecf', 'author': '\u00c1lvaro Mond\u00e9jar', 'tag': '', 'date_ISO': '2020-12-08 14:55:35 +0100', 'message': \"Remove uneeded files from documentation build using 'mkdocs-exclude' plugin\", 'raw': \"commit 85a944f2e41b3f78add9f75644155f5946200ecf\\nAuthor: \u00c1lvaro Mond\u00e9jar \\nDate: Tue Dec 8 14:55:35 2020 +0100\\n\\n Remove uneeded files from documentation build using 'mkdocs-exclude' plugin\", 'root_dir': '/home/runner/work/http-request-codegen/http-request-codegen'}, 'context': .context at 0x7fa5106fd3a0>, 'macros_info': .macros_info at 0x7fa5106fd310>, 'now': .now at 0x7fa5106fd430>, 'fix_url': , 'http_request_codegen': , 'seed': 680, 'fake_module': , 'str': , 'int': , 'float': , 'bool': , 'supported_features_md_table': .supported_features_md_table at 0x7fa5106fd670>, 'filters': {'pretty': .pretty at 0x7fa5106fd1f0>}, 'filters_builtin': {'abs': , 'attr': , 'batch': , 'capitalize': , 'center': , 'count': , 'd': , 'default': , 'dictsort': , 'e': , 'escape': , 'filesizeformat': , 'first': , 'float': , 'forceescape': , 'format': , 'groupby': , 'indent': , 'int': , 'join': , 'last': , 'length': , 'list': , 'lower': , 'map': , 'min': , 'max': , 'pprint': , 'random': , 'reject': , 'rejectattr': , 'replace': , 'reverse': , 'round': , 'safe': , 'select': , 'selectattr': , 'slice': , 'sort': , 'string': , 'striptags': , 'sum': , 'title': , 'trim': , 'truncate': , 'unique': , 'upper': , 'urlencode': , 'urlize': , 'wordcount': , 'wordwrap': , 'xmlattr': , 'tojson': }, 'navigation': Page(title='User guide', url='/mondeja/http-request-codegen/') Page(title='Development', url='/mondeja/http-request-codegen/dev/'), 'page': Page(title='Info', url='/mondeja/http-request-codegen/info/')} Config Information \u00b6 Standard MkDocs configuration information. Do not try to modify. e.g. {{ config.docs_dir }} See also the MkDocs documentation on the config object . Variable Type Content config_file_path str '/home/runner/work/http-request-codegen/http-request-codegen/mkdocs.yml' site_name str 'http-request-codegen' nav list [{'User guide': 'index.md'}, {'Development': 'dev.md'}] pages NoneType None site_url str 'https://github.com/mondeja/http-request-codegen' site_description str 'Multilanguage HTTP request code snippet generator.' site_author str '\u00c1lvaro Mond\u00e9jar Rubio' theme Theme Theme(name='material', dirs=['/opt/hostedtoolcache/Python/3.8.6/x64/lib/python3.8/site-packages/material', '/opt/hostedtoolcache/Python/3.8.6/x64/lib/python3.8/site-packages/mkdocs/templates'], static_templates=['sitemap.xml', '404.html'], language='en', direction=None, features=[], palette={'primary': None, 'accent': None}, font={'text': 'Roboto', 'code': 'Roboto Mono'}, icon={'repo': 'fontawesome/brands/github'}, favicon='assets/images/favicon.png', include_search_page=False, search_index_only=True) docs_dir str '/home/runner/work/http-request-codegen/http-request-codegen/docs' site_dir str '/home/runner/work/http-request-codegen/http-request-codegen/site' copyright str 'Copyright \u00a9 2020 \u00c1lvaro Mond\u00e9jar' google_analytics NoneType None dev_addr Address Address(host='127.0.0.1', port=8000) use_directory_urls bool True repo_url str 'https://github.com/mondeja/http-request-codegen' repo_name str 'http-request-codegen' edit_uri str '' extra_css list [] extra_javascript list [] extra_templates list [] markdown_extensions list ['toc', 'tables', 'fenced_code', 'pymdownx.tabbed', 'pymdownx.superfences', 'meta', 'pymdownx.tasklist', 'admonition', 'pymdownx.details', ] mdx_configs dict toc [ dict ], pymdownx.tasklist [ dict ] strict bool False remote_branch str 'gh-pages' remote_name str 'origin' extra SubConfig {} plugins PluginCollection search [ SearchPlugin ], include-markdown [ IncludeMarkdownPlugin ], macros [ MacrosPlugin ], minify [ MinifyPlugin ], mkdocstrings [ MkdocstringsPlugin ], exclude [ Exclude ] Git Information \u00b6 Information available on the last commit and the git repository containing the documentation project: e.g. {{ git.message }} Variable Type Content status bool True date datetime datetime.datetime(2020, 12, 8, 14, 55, 35, tzinfo=tzoffset(None, 3600)) short_commit str '85a944f' commit str '85a944f2e41b3f78add9f75644155f5946200ecf' author str '\u00c1lvaro Mond\u00e9jar' tag str '' date_ISO str '2020-12-08 14:55:35 +0100' message str \"Remove uneeded files from documentation build using 'mkdocs-exclude' plugin\" raw str \"commit 85a944f2e41b3f78add9f75644155f5946200ecf\\nAuthor: \u00c1lvaro Mond\u00e9jar \\nDate: Tue Dec 8 14:55:35 2020 +0100\\n\\n Remove uneeded files from documentation build using 'mkdocs-exclude' plugin\" root_dir str '/home/runner/work/http-request-codegen/http-request-codegen' Page Attributes \u00b6 Provided by MkDocs. These attributes change for every page (the attributes shown are for this page). e.g. {{ page.title }} See also the MkDocs documentation on the page object . Variable Type Content file File page [ Page ], src_path = 'info.md', abs_src_path = '/home/runner/work/http-request-codegen/http-request-codegen/docs/info.md', name = 'info', dest_path = 'info/index.html', abs_dest_path = '/home/runner/work/http-request-codegen/http-request-codegen/site/info/index.html', url = 'info/' title str 'Info' parent NoneType None children NoneType None previous_page NoneType None next_page NoneType None _Page__active bool False is_section bool False is_page bool True is_link bool False update_date str '2020-12-08' canonical_url str 'https://github.com/mondeja/http-request-codegen/info/' abs_url str '/mondeja/http-request-codegen/info/' edit_url NoneType None markdown str '{{ macros_info() }}\\n' content NoneType None toc list [] meta dict To have all titles of all pages, use: {% for page in navigation.pages %} - {{ page.title }} {% endfor% } Plugin Filters \u00b6 These filters are provided as a standard by the macros plugin. Variable Type Content pretty function ( var_list, rows, header, e ) Default mkdocs_macro Prettify a dictionary or object (used for environment documentation, or debugging). Builtin Jinja2 Filters \u00b6 These filters are provided by Jinja2 as a standard. See also the Jinja2 documentation on builtin filters ). Variable Type Content abs builtin_function_or_method Return the absolute value of the argument. attr function ( environment, obj, name, value ) Get an attribute of an object. foo|attr(\"bar\") works like foo.bar just that always an attribute is returned and items are not looked up. batch function ( value, linecount, fill_with, tmp, item ) A filter that batches items. It works pretty much like slice just the other way round. It returns a list of lists with the given number of items. If you provide a second parameter this is used to fill up missing items. See this example. capitalize function ( s ) Capitalize a value. The first character will be uppercase, all others lowercase. center function ( value, width ) Centers the value in a field of a given width. count builtin_function_or_method Return the number of items in a container. d function ( value, default_value, boolean ) If the value is undefined it will return the passed default value, otherwise the value of the variable. default function ( value, default_value, boolean ) If the value is undefined it will return the passed default value, otherwise the value of the variable. dictsort function ( value, case_sensitive, by, reverse, sort_func ) Sort a dict and yield (key, value) pairs. Because python dicts are unsorted you may want to use this function to order them by either key or value. e builtin_function_or_method escape(s) -> markup escape builtin_function_or_method escape(s) -> markup filesizeformat function ( value, binary, bytes, base, prefixes, i, prefix, unit ) Format the value like a 'human-readable' file size (i.e. 13 kB, 4.1 MB, 102 Bytes, etc). Per default decimal prefixes are used (Mega, Giga, etc.), if the second parameter is set to True the binary prefixes are used (Mebi, Gibi). first function ( environment, seq ) Return the first item of a sequence. float function ( value, default ) Convert the value into a floating point number. If the conversion doesn't work it will return 0.0 . You can override this default using the first parameter. forceescape function ( value ) Enforce HTML escaping. This will probably double escape variables. format function ( value, args, kwargs ) Apply the given values to a printf-style _ format string, like string % values . groupby function ( environment, value, attribute, expr ) Group a sequence of objects by an attribute using Python's :func: itertools.groupby . The attribute can use dot notation for nested access, like \"address.city\" . Unlike Python's groupby , the values are sorted first so only one group is returned for each unique value. indent function ( s, width, first, blank, indentfirst, newline, rv, lines ) Return a copy of the string with each line indented by 4 spaces. The first line and blank lines are not indented by default. int function ( value, default, base ) Convert the value into an integer. If the conversion doesn't work it will return 0 . You can override this default using the first parameter. You can also override the default base (10) in the second parameter, which handles input with prefixes such as 0b, 0o and 0x for bases 2, 8 and 16 respectively. The base is ignored for decimal numbers and non-string values. join function ( eval_ctx, value, d, attribute, do_escape, idx, item ) Return a string which is the concatenation of the strings in the sequence. The separator between elements is an empty string per default, you can define it with the optional parameter. last function ( environment, seq ) Return the last item of a sequence. length builtin_function_or_method Return the number of items in a container. list function ( value ) Convert the value into a list. If it was a string the returned list will be a list of characters. lower function ( s ) Convert a value to lowercase. map function ( args, kwargs, seq, func, item ) Applies a filter on a sequence of objects or looks up an attribute. This is useful when dealing with lists of objects but you are really only interested in a certain value of it. min function ( environment, value, case_sensitive, attribute ) Return the smallest item from the sequence. max function ( environment, value, case_sensitive, attribute ) Return the largest item from the sequence. pprint function ( value, verbose ) Pretty print a variable. Useful for debugging. random function ( context, seq ) Return a random item from the sequence. reject function ( args, kwargs ) Filters a sequence of objects by applying a test to each object, and rejecting the objects with the test succeeding. rejectattr function ( args, kwargs ) Filters a sequence of objects by applying a test to the specified attribute of each object, and rejecting the objects with the test succeeding. replace function ( eval_ctx, s, old, new, count ) Return a copy of the value with all occurrences of a substring replaced with a new one. The first argument is the substring that should be replaced, the second is the replacement string. If the optional third argument count is given, only the first count occurrences are replaced. reverse function ( value, rv ) Reverse the object or return an iterator that iterates over it the other way round. round function ( value, precision, method, func ) Round the number to a given precision. The first parameter specifies the precision (default is 0 ), the second the rounding method. safe function ( value ) Mark the value as safe which means that in an environment with automatic escaping enabled this variable will not be escaped. select function ( args, kwargs ) Filters a sequence of objects by applying a test to each object, and only selecting the objects with the test succeeding. selectattr function ( args, kwargs ) Filters a sequence of objects by applying a test to the specified attribute of each object, and only selecting the objects with the test succeeding. slice function ( value, slices, fill_with, seq, length, items_per_slice, slices_with_extra, offset, slice_number, start, end, tmp ) Slice an iterator and return a list of lists containing those items. Useful if you want to create a div containing three ul tags that represent columns. sort function ( environment, value, reverse, case_sensitive, attribute, key_func ) Sort an iterable using Python's :func: sorted . string builtin_function_or_method soft_unicode(object) -> string striptags function ( value ) Strip SGML/XML tags and replace adjacent whitespace by one space. sum function ( environment, iterable, attribute, start ) Returns the sum of a sequence of numbers plus the value of parameter 'start' (which defaults to 0). When the sequence is empty it returns start. title function ( s ) Return a titlecased version of the value. I.e. words will start with uppercase letters, all remaining characters are lowercase. trim function ( value, chars ) Strip leading and trailing characters, by default whitespace. truncate function ( env, s, length, killwords, end, leeway, result ) Return a truncated copy of the string. The length is specified with the first parameter which defaults to 255 . If the second parameter is true the filter will cut the text at length. Otherwise it will discard the last word. If the text was in fact truncated it will append an ellipsis sign ( \"...\" ). If you want a different ellipsis sign than \"...\" you can specify it using the third parameter. Strings that only exceed the length by the tolerance margin given in the fourth parameter will not be truncated. unique function ( environment, value, case_sensitive, attribute, getter, seen, item, key ) Returns a list of unique items from the given iterable. upper function ( s ) Convert a value to uppercase. urlencode function ( value, items ) Quote data for use in a URL path or query using UTF-8. urlize function ( eval_ctx, value, trim_url_limit, nofollow, target, rel, policies, rv ) Converts URLs in plain text into clickable links. wordcount function ( s ) Count the words in that string. wordwrap function ( environment, s, width, break_long_words, wrapstring, break_on_hyphens ) Wrap a string to the given width. Existing newlines are treated as paragraphs to be wrapped separately. xmlattr function ( _eval_ctx, d, autospace, rv ) Create an SGML/XML attribute string based on the items in a dict. All values that are neither none nor undefined are automatically escaped. tojson function ( eval_ctx, value, indent, policies, dumper, options ) Dumps a structure to JSON so that it's safe to use in <script> tags. It accepts the same arguments and returns a JSON string. Note that this is available in templates through the |tojson filter which will also mark the result as safe. Due to how this function escapes certain characters this is safe even if used outside of <script> tags.","title":"Info"},{"location":"info/#macros-plugin-environment","text":"","title":"Macros Plugin Environment"},{"location":"info/#general-list","text":"All available variables and filters within the macros plugin: Variable Type Content {'extra': {}, 'config': {'config_file_path': '/home/runner/work/http-request-codegen/http-request-codegen/mkdocs.yml', 'site_name': 'http-request-codegen', 'nav': [{'User guide': 'index.md'}, {'Development': 'dev.md'}], 'pages': None, 'site_url': 'https://github.com/mondeja/http-request-codegen', 'site_description': 'Multilanguage HTTP request code snippet generator.', 'site_author': '\u00c1lvaro Mond\u00e9jar Rubio', 'theme': Theme(name='material', dirs=['/opt/hostedtoolcache/Python/3.8.6/x64/lib/python3.8/site-packages/material', '/opt/hostedtoolcache/Python/3.8.6/x64/lib/python3.8/site-packages/mkdocs/templates'], static_templates=['sitemap.xml', '404.html'], language='en', direction=None, features=[], palette={'primary': None, 'accent': None}, font={'text': 'Roboto', 'code': 'Roboto Mono'}, icon={'repo': 'fontawesome/brands/github'}, favicon='assets/images/favicon.png', include_search_page=False, search_index_only=True), 'docs_dir': '/home/runner/work/http-request-codegen/http-request-codegen/docs', 'site_dir': '/home/runner/work/http-request-codegen/http-request-codegen/site', 'copyright': 'Copyright \u00a9 2020 \u00c1lvaro Mond\u00e9jar', 'google_analytics': None, 'dev_addr': Address(host='127.0.0.1', port=8000), 'use_directory_urls': True, 'repo_url': 'https://github.com/mondeja/http-request-codegen', 'repo_name': 'http-request-codegen', 'edit_uri': '', 'extra_css': [], 'extra_javascript': [], 'extra_templates': [], 'markdown_extensions': ['toc', 'tables', 'fenced_code', 'pymdownx.tabbed', 'pymdownx.superfences', 'meta', 'pymdownx.tasklist', 'admonition', 'pymdownx.details', ], 'mdx_configs': {'toc': {'permalink': True}, 'pymdownx.tasklist': {'custom_checkbox': True}}, 'strict': False, 'remote_branch': 'gh-pages', 'remote_name': 'origin', 'extra': {}, 'plugins': PluginCollection([('search', ), ('include-markdown', ), ('macros', ), ('minify', ), ('mkdocstrings', ), ('exclude', )])}, 'environment': {'system': 'Linux', 'system_version': '5.4.0-1031-azure', 'python_version': '3.8.6', 'mkdocs_version': '1.1.2', 'macros_plugin_version': '0.5.0', 'jinja2_version': '2.11.2'}, 'plugin': {'module_name': 'docs_macros', 'modules': [], 'include_dir': '', 'include_yaml': [], 'j2_block_start_string': '', 'j2_block_end_string': '', 'j2_variable_start_string': '', 'j2_variable_end_string': '', 'verbose': False}, 'git': {'status': True, 'date': datetime.datetime(2020, 12, 8, 14, 55, 35, tzinfo=tzoffset(None, 3600)), 'short_commit': '85a944f', 'commit': '85a944f2e41b3f78add9f75644155f5946200ecf', 'author': '\u00c1lvaro Mond\u00e9jar', 'tag': '', 'date_ISO': '2020-12-08 14:55:35 +0100', 'message': \"Remove uneeded files from documentation build using 'mkdocs-exclude' plugin\", 'raw': \"commit 85a944f2e41b3f78add9f75644155f5946200ecf\\nAuthor: \u00c1lvaro Mond\u00e9jar \\nDate: Tue Dec 8 14:55:35 2020 +0100\\n\\n Remove uneeded files from documentation build using 'mkdocs-exclude' plugin\", 'root_dir': '/home/runner/work/http-request-codegen/http-request-codegen'}, 'context': .context at 0x7fa5106fd3a0>, 'macros_info': .macros_info at 0x7fa5106fd310>, 'now': .now at 0x7fa5106fd430>, 'fix_url': , 'http_request_codegen': , 'seed': 680, 'fake_module': , 'str': , 'int': , 'float': , 'bool': , 'supported_features_md_table': .supported_features_md_table at 0x7fa5106fd670>, 'filters': {'pretty': .pretty at 0x7fa5106fd1f0>}, 'filters_builtin': {'abs': , 'attr': , 'batch': , 'capitalize': , 'center': , 'count': , 'd': , 'default': , 'dictsort': , 'e': , 'escape': , 'filesizeformat': , 'first': , 'float': , 'forceescape': , 'format': , 'groupby': , 'indent': , 'int': , 'join': , 'last': , 'length': , 'list': , 'lower': , 'map': , 'min': , 'max': , 'pprint': , 'random': , 'reject': , 'rejectattr': , 'replace': , 'reverse': , 'round': , 'safe': , 'select': , 'selectattr': , 'slice': , 'sort': , 'string': , 'striptags': , 'sum': , 'title': , 'trim': , 'truncate': , 'unique': , 'upper': , 'urlencode': , 'urlize': , 'wordcount': , 'wordwrap': , 'xmlattr': , 'tojson': }, 'navigation': Page(title='User guide', url='/mondeja/http-request-codegen/') Page(title='Development', url='/mondeja/http-request-codegen/dev/'), 'page': Page(title='Info', url='/mondeja/http-request-codegen/info/')} SuperDict {'extra': {}, 'config': {'config_file_path': '/home/runner/work/http-request-codegen/http-request-codegen/mkdocs.yml', 'site_name': 'http-request-codegen', 'nav': [{'User guide': 'index.md'}, {'Development': 'dev.md'}], 'pages': None, 'site_url': 'https://github.com/mondeja/http-request-codegen', 'site_description': 'Multilanguage HTTP request code snippet generator.', 'site_author': '\u00c1lvaro Mond\u00e9jar Rubio', 'theme': Theme(name='material', dirs=['/opt/hostedtoolcache/Python/3.8.6/x64/lib/python3.8/site-packages/material', '/opt/hostedtoolcache/Python/3.8.6/x64/lib/python3.8/site-packages/mkdocs/templates'], static_templates=['sitemap.xml', '404.html'], language='en', direction=None, features=[], palette={'primary': None, 'accent': None}, font={'text': 'Roboto', 'code': 'Roboto Mono'}, icon={'repo': 'fontawesome/brands/github'}, favicon='assets/images/favicon.png', include_search_page=False, search_index_only=True), 'docs_dir': '/home/runner/work/http-request-codegen/http-request-codegen/docs', 'site_dir': '/home/runner/work/http-request-codegen/http-request-codegen/site', 'copyright': 'Copyright \u00a9 2020 \u00c1lvaro Mond\u00e9jar', 'google_analytics': None, 'dev_addr': Address(host='127.0.0.1', port=8000), 'use_directory_urls': True, 'repo_url': 'https://github.com/mondeja/http-request-codegen', 'repo_name': 'http-request-codegen', 'edit_uri': '', 'extra_css': [], 'extra_javascript': [], 'extra_templates': [], 'markdown_extensions': ['toc', 'tables', 'fenced_code', 'pymdownx.tabbed', 'pymdownx.superfences', 'meta', 'pymdownx.tasklist', 'admonition', 'pymdownx.details', ], 'mdx_configs': {'toc': {'permalink': True}, 'pymdownx.tasklist': {'custom_checkbox': True}}, 'strict': False, 'remote_branch': 'gh-pages', 'remote_name': 'origin', 'extra': {}, 'plugins': PluginCollection([('search', ), ('include-markdown', ), ('macros', ), ('minify', ), ('mkdocstrings', ), ('exclude', )])}, 'environment': {'system': 'Linux', 'system_version': '5.4.0-1031-azure', 'python_version': '3.8.6', 'mkdocs_version': '1.1.2', 'macros_plugin_version': '0.5.0', 'jinja2_version': '2.11.2'}, 'plugin': {'module_name': 'docs_macros', 'modules': [], 'include_dir': '', 'include_yaml': [], 'j2_block_start_string': '', 'j2_block_end_string': '', 'j2_variable_start_string': '', 'j2_variable_end_string': '', 'verbose': False}, 'git': {'status': True, 'date': datetime.datetime(2020, 12, 8, 14, 55, 35, tzinfo=tzoffset(None, 3600)), 'short_commit': '85a944f', 'commit': '85a944f2e41b3f78add9f75644155f5946200ecf', 'author': '\u00c1lvaro Mond\u00e9jar', 'tag': '', 'date_ISO': '2020-12-08 14:55:35 +0100', 'message': \"Remove uneeded files from documentation build using 'mkdocs-exclude' plugin\", 'raw': \"commit 85a944f2e41b3f78add9f75644155f5946200ecf\\nAuthor: \u00c1lvaro Mond\u00e9jar \\nDate: Tue Dec 8 14:55:35 2020 +0100\\n\\n Remove uneeded files from documentation build using 'mkdocs-exclude' plugin\", 'root_dir': '/home/runner/work/http-request-codegen/http-request-codegen'}, 'context': .context at 0x7fa5106fd3a0>, 'macros_info': .macros_info at 0x7fa5106fd310>, 'now': .now at 0x7fa5106fd430>, 'fix_url': , 'http_request_codegen': , 'seed': 680, 'fake_module': , 'str': , 'int': , 'float': , 'bool': , 'supported_features_md_table': .supported_features_md_table at 0x7fa5106fd670>, 'filters': {'pretty': .pretty at 0x7fa5106fd1f0>}, 'filters_builtin': {'abs': , 'attr': , 'batch': , 'capitalize': , 'center': , 'count': , 'd': , 'default': , 'dictsort': , 'e': , 'escape': , 'filesizeformat': , 'first': , 'float': , 'forceescape': , 'format': , 'groupby': , 'indent': , 'int': , 'join': , 'last': , 'length': , 'list': , 'lower': , 'map': , 'min': , 'max': , 'pprint': , 'random': , 'reject': , 'rejectattr': , 'replace': , 'reverse': , 'round': , 'safe': , 'select': , 'selectattr': , 'slice': , 'sort': , 'string': , 'striptags': , 'sum': , 'title': , 'trim': , 'truncate': , 'unique': , 'upper': , 'urlencode': , 'urlize': , 'wordcount': , 'wordwrap': , 'xmlattr': , 'tojson': }, 'navigation': Page(title='User guide', url='/mondeja/http-request-codegen/') Page(title='Development', url='/mondeja/http-request-codegen/dev/'), 'page': Page(title='Info', url='/mondeja/http-request-codegen/info/')}","title":"General List"},{"location":"info/#config-information","text":"Standard MkDocs configuration information. Do not try to modify. e.g. {{ config.docs_dir }} See also the MkDocs documentation on the config object . Variable Type Content config_file_path str '/home/runner/work/http-request-codegen/http-request-codegen/mkdocs.yml' site_name str 'http-request-codegen' nav list [{'User guide': 'index.md'}, {'Development': 'dev.md'}] pages NoneType None site_url str 'https://github.com/mondeja/http-request-codegen' site_description str 'Multilanguage HTTP request code snippet generator.' site_author str '\u00c1lvaro Mond\u00e9jar Rubio' theme Theme Theme(name='material', dirs=['/opt/hostedtoolcache/Python/3.8.6/x64/lib/python3.8/site-packages/material', '/opt/hostedtoolcache/Python/3.8.6/x64/lib/python3.8/site-packages/mkdocs/templates'], static_templates=['sitemap.xml', '404.html'], language='en', direction=None, features=[], palette={'primary': None, 'accent': None}, font={'text': 'Roboto', 'code': 'Roboto Mono'}, icon={'repo': 'fontawesome/brands/github'}, favicon='assets/images/favicon.png', include_search_page=False, search_index_only=True) docs_dir str '/home/runner/work/http-request-codegen/http-request-codegen/docs' site_dir str '/home/runner/work/http-request-codegen/http-request-codegen/site' copyright str 'Copyright \u00a9 2020 \u00c1lvaro Mond\u00e9jar' google_analytics NoneType None dev_addr Address Address(host='127.0.0.1', port=8000) use_directory_urls bool True repo_url str 'https://github.com/mondeja/http-request-codegen' repo_name str 'http-request-codegen' edit_uri str '' extra_css list [] extra_javascript list [] extra_templates list [] markdown_extensions list ['toc', 'tables', 'fenced_code', 'pymdownx.tabbed', 'pymdownx.superfences', 'meta', 'pymdownx.tasklist', 'admonition', 'pymdownx.details', ] mdx_configs dict toc [ dict ], pymdownx.tasklist [ dict ] strict bool False remote_branch str 'gh-pages' remote_name str 'origin' extra SubConfig {} plugins PluginCollection search [ SearchPlugin ], include-markdown [ IncludeMarkdownPlugin ], macros [ MacrosPlugin ], minify [ MinifyPlugin ], mkdocstrings [ MkdocstringsPlugin ], exclude [ Exclude ]","title":"Config Information"},{"location":"info/#git-information","text":"Information available on the last commit and the git repository containing the documentation project: e.g. {{ git.message }} Variable Type Content status bool True date datetime datetime.datetime(2020, 12, 8, 14, 55, 35, tzinfo=tzoffset(None, 3600)) short_commit str '85a944f' commit str '85a944f2e41b3f78add9f75644155f5946200ecf' author str '\u00c1lvaro Mond\u00e9jar' tag str '' date_ISO str '2020-12-08 14:55:35 +0100' message str \"Remove uneeded files from documentation build using 'mkdocs-exclude' plugin\" raw str \"commit 85a944f2e41b3f78add9f75644155f5946200ecf\\nAuthor: \u00c1lvaro Mond\u00e9jar \\nDate: Tue Dec 8 14:55:35 2020 +0100\\n\\n Remove uneeded files from documentation build using 'mkdocs-exclude' plugin\" root_dir str '/home/runner/work/http-request-codegen/http-request-codegen'","title":"Git Information"},{"location":"info/#page-attributes","text":"Provided by MkDocs. These attributes change for every page (the attributes shown are for this page). e.g. {{ page.title }} See also the MkDocs documentation on the page object . Variable Type Content file File page [ Page ], src_path = 'info.md', abs_src_path = '/home/runner/work/http-request-codegen/http-request-codegen/docs/info.md', name = 'info', dest_path = 'info/index.html', abs_dest_path = '/home/runner/work/http-request-codegen/http-request-codegen/site/info/index.html', url = 'info/' title str 'Info' parent NoneType None children NoneType None previous_page NoneType None next_page NoneType None _Page__active bool False is_section bool False is_page bool True is_link bool False update_date str '2020-12-08' canonical_url str 'https://github.com/mondeja/http-request-codegen/info/' abs_url str '/mondeja/http-request-codegen/info/' edit_url NoneType None markdown str '{{ macros_info() }}\\n' content NoneType None toc list [] meta dict To have all titles of all pages, use: {% for page in navigation.pages %} - {{ page.title }} {% endfor% }","title":"Page Attributes"},{"location":"info/#plugin-filters","text":"These filters are provided as a standard by the macros plugin. Variable Type Content pretty function ( var_list, rows, header, e ) Default mkdocs_macro Prettify a dictionary or object (used for environment documentation, or debugging).","title":"Plugin Filters"},{"location":"info/#builtin-jinja2-filters","text":"These filters are provided by Jinja2 as a standard. See also the Jinja2 documentation on builtin filters ). Variable Type Content abs builtin_function_or_method Return the absolute value of the argument. attr function ( environment, obj, name, value ) Get an attribute of an object. foo|attr(\"bar\") works like foo.bar just that always an attribute is returned and items are not looked up. batch function ( value, linecount, fill_with, tmp, item ) A filter that batches items. It works pretty much like slice just the other way round. It returns a list of lists with the given number of items. If you provide a second parameter this is used to fill up missing items. See this example. capitalize function ( s ) Capitalize a value. The first character will be uppercase, all others lowercase. center function ( value, width ) Centers the value in a field of a given width. count builtin_function_or_method Return the number of items in a container. d function ( value, default_value, boolean ) If the value is undefined it will return the passed default value, otherwise the value of the variable. default function ( value, default_value, boolean ) If the value is undefined it will return the passed default value, otherwise the value of the variable. dictsort function ( value, case_sensitive, by, reverse, sort_func ) Sort a dict and yield (key, value) pairs. Because python dicts are unsorted you may want to use this function to order them by either key or value. e builtin_function_or_method escape(s) -> markup escape builtin_function_or_method escape(s) -> markup filesizeformat function ( value, binary, bytes, base, prefixes, i, prefix, unit ) Format the value like a 'human-readable' file size (i.e. 13 kB, 4.1 MB, 102 Bytes, etc). Per default decimal prefixes are used (Mega, Giga, etc.), if the second parameter is set to True the binary prefixes are used (Mebi, Gibi). first function ( environment, seq ) Return the first item of a sequence. float function ( value, default ) Convert the value into a floating point number. If the conversion doesn't work it will return 0.0 . You can override this default using the first parameter. forceescape function ( value ) Enforce HTML escaping. This will probably double escape variables. format function ( value, args, kwargs ) Apply the given values to a printf-style _ format string, like string % values . groupby function ( environment, value, attribute, expr ) Group a sequence of objects by an attribute using Python's :func: itertools.groupby . The attribute can use dot notation for nested access, like \"address.city\" . Unlike Python's groupby , the values are sorted first so only one group is returned for each unique value. indent function ( s, width, first, blank, indentfirst, newline, rv, lines ) Return a copy of the string with each line indented by 4 spaces. The first line and blank lines are not indented by default. int function ( value, default, base ) Convert the value into an integer. If the conversion doesn't work it will return 0 . You can override this default using the first parameter. You can also override the default base (10) in the second parameter, which handles input with prefixes such as 0b, 0o and 0x for bases 2, 8 and 16 respectively. The base is ignored for decimal numbers and non-string values. join function ( eval_ctx, value, d, attribute, do_escape, idx, item ) Return a string which is the concatenation of the strings in the sequence. The separator between elements is an empty string per default, you can define it with the optional parameter. last function ( environment, seq ) Return the last item of a sequence. length builtin_function_or_method Return the number of items in a container. list function ( value ) Convert the value into a list. If it was a string the returned list will be a list of characters. lower function ( s ) Convert a value to lowercase. map function ( args, kwargs, seq, func, item ) Applies a filter on a sequence of objects or looks up an attribute. This is useful when dealing with lists of objects but you are really only interested in a certain value of it. min function ( environment, value, case_sensitive, attribute ) Return the smallest item from the sequence. max function ( environment, value, case_sensitive, attribute ) Return the largest item from the sequence. pprint function ( value, verbose ) Pretty print a variable. Useful for debugging. random function ( context, seq ) Return a random item from the sequence. reject function ( args, kwargs ) Filters a sequence of objects by applying a test to each object, and rejecting the objects with the test succeeding. rejectattr function ( args, kwargs ) Filters a sequence of objects by applying a test to the specified attribute of each object, and rejecting the objects with the test succeeding. replace function ( eval_ctx, s, old, new, count ) Return a copy of the value with all occurrences of a substring replaced with a new one. The first argument is the substring that should be replaced, the second is the replacement string. If the optional third argument count is given, only the first count occurrences are replaced. reverse function ( value, rv ) Reverse the object or return an iterator that iterates over it the other way round. round function ( value, precision, method, func ) Round the number to a given precision. The first parameter specifies the precision (default is 0 ), the second the rounding method. safe function ( value ) Mark the value as safe which means that in an environment with automatic escaping enabled this variable will not be escaped. select function ( args, kwargs ) Filters a sequence of objects by applying a test to each object, and only selecting the objects with the test succeeding. selectattr function ( args, kwargs ) Filters a sequence of objects by applying a test to the specified attribute of each object, and only selecting the objects with the test succeeding. slice function ( value, slices, fill_with, seq, length, items_per_slice, slices_with_extra, offset, slice_number, start, end, tmp ) Slice an iterator and return a list of lists containing those items. Useful if you want to create a div containing three ul tags that represent columns. sort function ( environment, value, reverse, case_sensitive, attribute, key_func ) Sort an iterable using Python's :func: sorted . string builtin_function_or_method soft_unicode(object) -> string striptags function ( value ) Strip SGML/XML tags and replace adjacent whitespace by one space. sum function ( environment, iterable, attribute, start ) Returns the sum of a sequence of numbers plus the value of parameter 'start' (which defaults to 0). When the sequence is empty it returns start. title function ( s ) Return a titlecased version of the value. I.e. words will start with uppercase letters, all remaining characters are lowercase. trim function ( value, chars ) Strip leading and trailing characters, by default whitespace. truncate function ( env, s, length, killwords, end, leeway, result ) Return a truncated copy of the string. The length is specified with the first parameter which defaults to 255 . If the second parameter is true the filter will cut the text at length. Otherwise it will discard the last word. If the text was in fact truncated it will append an ellipsis sign ( \"...\" ). If you want a different ellipsis sign than \"...\" you can specify it using the third parameter. Strings that only exceed the length by the tolerance margin given in the fourth parameter will not be truncated. unique function ( environment, value, case_sensitive, attribute, getter, seen, item, key ) Returns a list of unique items from the given iterable. upper function ( s ) Convert a value to uppercase. urlencode function ( value, items ) Quote data for use in a URL path or query using UTF-8. urlize function ( eval_ctx, value, trim_url_limit, nofollow, target, rel, policies, rv ) Converts URLs in plain text into clickable links. wordcount function ( s ) Count the words in that string. wordwrap function ( environment, s, width, break_long_words, wrapstring, break_on_hyphens ) Wrap a string to the given width. Existing newlines are treated as paragraphs to be wrapped separately. xmlattr function ( _eval_ctx, d, autospace, rv ) Create an SGML/XML attribute string based on the items in a dict. All values that are neither none nor undefined are automatically escaped. tojson function ( eval_ctx, value, indent, policies, dumper, options ) Dumps a structure to JSON so that it's safe to use in <script> tags. It accepts the same arguments and returns a JSON string. Note that this is available in templates through the |tojson filter which will also mark the result as safe. Due to how this function escapes certain characters this is safe even if used outside of <script> tags.","title":"Builtin Jinja2 Filters"}]}